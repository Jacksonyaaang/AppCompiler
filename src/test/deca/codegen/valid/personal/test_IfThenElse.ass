	TSTO #7
	BOV stack_overflow_error
	ADDSP #7
; start main program
; Main program
; Beginning of main instructions:
	LOAD #1, R2	; loading true into memory
	STORE R2, 1(GB)	; Initializing the variable b1 and loading it into memory
	LOAD #0, R2	; loading false into memory
	STORE R2, 2(GB)	; Initializing the variable b2 and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 3(GB)	; Initializing the variable i and loading it into memory
	LOAD #2, R2	; loading 2 into memory
	STORE R2, 4(GB)	; Initializing the variable x and loading it into memory
	LOAD #1, R2	; loading 1 into memory
	STORE R2, 5(GB)	; Initializing the variable y and loading it into memory
	LOAD #3, R2	; loading 3 into memory
	STORE R2, 6(GB)	; Initializing the variable z and loading it into memory
	LOAD #1, R2	; loading true into memory
; ---------Startif-----------[27, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else1
	WSTR "true is true "
	WNL
	BRA end_ifthenelse_1
else1:
	WSTR "true is false "
	WNL
end_ifthenelse_1:
; ---------Endif-----------
	LOAD 1(GB), R2	; loading b1 into memory
; ---------Startif-----------[33, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else2
	WSTR "b1=true is true"
	WNL
	BRA end_ifthenelse_2
else2:
end_ifthenelse_2:
; ---------Endif-----------
; --------StartAND--------[38, 7]-----
	LOAD 1(GB), R2	; loading b1 into memory
	CMP #0, R2	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_1	; [AND] checking if the first element is false
	LOAD 1(GB), R3	; loading b1 into memory
	CMP #0, R3	; [AND]Comparing in the right branch 
	BNE AND_Success_id1	; [AND] checking if the first element is true
End_And_False_Id_1:
	LOAD #0, R2	; And is false, We place the value 0 in the return Register
AND_Success_id1:
; --------EndAND--------[38, 7]-----
; ---------Startif-----------[38, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else3
; --------StartBinaryOp--------[39, 12]-----
	LOAD 3(GB), R2	; loading i into memory
	LOAD #1000, R3	; loading 1000 into memory
	ADD R3, R2
; --------EndBinaryOp--------[39, 12]-----
	STORE R2, 3(GB)	;  Assiging a value to i
	BRA end_ifthenelse_3
else3:
end_ifthenelse_3:
; ---------Endif-----------
; --------StartAND--------[41, 9]-----
	LOAD 1(GB), R2	; loading b1 into memory
	CMP #0, R2	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_2	; [AND] checking if the first element is false
	LOAD 2(GB), R3	; loading b2 into memory
	CMP #0, R3	; [AND]Comparing in the right branch 
	BNE AND_Success_id2	; [AND] checking if the first element is true
End_And_False_Id_2:
	LOAD #0, R2	; And is false, We place the value 0 in the return Register
AND_Success_id2:
; --------EndAND--------[41, 9]-----
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
; ---------Startif-----------[41, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else4
; --------StartBinaryOp--------[42, 12]-----
	LOAD 3(GB), R2	; loading i into memory
	LOAD #100, R3	; loading 100 into memory
	ADD R3, R2
; --------EndBinaryOp--------[42, 12]-----
	STORE R2, 3(GB)	;  Assiging a value to i
	BRA end_ifthenelse_4
else4:
end_ifthenelse_4:
; ---------Endif-----------
; --------StartAND--------[44, 9]-----
	LOAD 2(GB), R2	; loading b2 into memory
	CMP #0, R2	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_3	; [AND] checking if the first element is false
	LOAD 1(GB), R3	; loading b1 into memory
	CMP #0, R3	; [AND]Comparing in the right branch 
	BNE AND_Success_id3	; [AND] checking if the first element is true
End_And_False_Id_3:
	LOAD #0, R2	; And is false, We place the value 0 in the return Register
AND_Success_id3:
; --------EndAND--------[44, 9]-----
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
; ---------Startif-----------[44, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else5
; --------StartBinaryOp--------[45, 12]-----
	LOAD 3(GB), R2	; loading i into memory
	LOAD #10, R3	; loading 10 into memory
	ADD R3, R2
; --------EndBinaryOp--------[45, 12]-----
	STORE R2, 3(GB)	;  Assiging a value to i
	BRA end_ifthenelse_5
else5:
end_ifthenelse_5:
; ---------Endif-----------
; --------StartAND--------[47, 9]-----
	LOAD 2(GB), R2	; loading b2 into memory
	CMP #0, R2	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_4	; [AND] checking if the first element is false
	LOAD 2(GB), R3	; loading b2 into memory
	CMP #0, R3	; [AND]Comparing in the right branch 
	BNE AND_Success_id4	; [AND] checking if the first element is true
End_And_False_Id_4:
	LOAD #0, R2	; And is false, We place the value 0 in the return Register
AND_Success_id4:
; --------EndAND--------[47, 9]-----
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
; ---------Startif-----------[47, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else6
; --------StartBinaryOp--------[48, 12]-----
	LOAD 3(GB), R2	; loading i into memory
	LOAD #1, R3	; loading 1 into memory
	ADD R3, R2
; --------EndBinaryOp--------[48, 12]-----
	STORE R2, 3(GB)	;  Assiging a value to i
	BRA end_ifthenelse_6
else6:
end_ifthenelse_6:
; ---------Endif-----------
	WSTR "b1&&b2[ "
	LOAD 3(GB), R2	; loading i into memory
	LOAD R2, R1
	WINT
	WSTR "/1111 ]"
	WNL
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 3(GB)	;  Assiging a value to i
; --------StartOr--------[54, 7]-----
	LOAD 1(GB), R2	; loading b1 into memory
	CMP #1, R2	; [Or]Comparing in the left branch 
	BEQ End_Or_Id_5	; [Or] checking if the first element is false
	LOAD 1(GB), R3	; loading b1 into memory
	CMP #0, R3	; [Or]Comparing in the right branch 
	BEQ End_Or_Id_5	; [OR] checking if the second element is true 
	LOAD #1, R2	; Or is true , We place the value 1 in the return Register
End_Or_Id_5:
; --------EndOr--------[54, 7]-----
; ---------Startif-----------[54, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else7
; --------StartBinaryOp--------[55, 12]-----
	LOAD 3(GB), R2	; loading i into memory
	LOAD #1000, R3	; loading 1000 into memory
	ADD R3, R2
; --------EndBinaryOp--------[55, 12]-----
	STORE R2, 3(GB)	;  Assiging a value to i
	BRA end_ifthenelse_7
else7:
end_ifthenelse_7:
; ---------Endif-----------
; --------StartOr--------[57, 7]-----
	LOAD 1(GB), R2	; loading b1 into memory
	CMP #1, R2	; [Or]Comparing in the left branch 
	BEQ End_Or_Id_6	; [Or] checking if the first element is false
	LOAD 2(GB), R3	; loading b2 into memory
	CMP #0, R3	; [Or]Comparing in the right branch 
	BEQ End_Or_Id_6	; [OR] checking if the second element is true 
	LOAD #1, R2	; Or is true , We place the value 1 in the return Register
End_Or_Id_6:
; --------EndOr--------[57, 7]-----
; ---------Startif-----------[57, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else8
; --------StartBinaryOp--------[58, 12]-----
	LOAD 3(GB), R2	; loading i into memory
	LOAD #100, R3	; loading 100 into memory
	ADD R3, R2
; --------EndBinaryOp--------[58, 12]-----
	STORE R2, 3(GB)	;  Assiging a value to i
	BRA end_ifthenelse_8
else8:
end_ifthenelse_8:
; ---------Endif-----------
; --------StartOr--------[60, 7]-----
	LOAD 2(GB), R2	; loading b2 into memory
	CMP #1, R2	; [Or]Comparing in the left branch 
	BEQ End_Or_Id_7	; [Or] checking if the first element is false
	LOAD 1(GB), R3	; loading b1 into memory
	CMP #0, R3	; [Or]Comparing in the right branch 
	BEQ End_Or_Id_7	; [OR] checking if the second element is true 
	LOAD #1, R2	; Or is true , We place the value 1 in the return Register
End_Or_Id_7:
; --------EndOr--------[60, 7]-----
; ---------Startif-----------[60, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else9
; --------StartBinaryOp--------[61, 12]-----
	LOAD 3(GB), R2	; loading i into memory
	LOAD #10, R3	; loading 10 into memory
	ADD R3, R2
; --------EndBinaryOp--------[61, 12]-----
	STORE R2, 3(GB)	;  Assiging a value to i
	BRA end_ifthenelse_9
else9:
end_ifthenelse_9:
; ---------Endif-----------
; --------StartOr--------[63, 9]-----
	LOAD 2(GB), R2	; loading b2 into memory
	CMP #1, R2	; [Or]Comparing in the left branch 
	BEQ End_Or_Id_8	; [Or] checking if the first element is false
	LOAD 2(GB), R3	; loading b2 into memory
	CMP #0, R3	; [Or]Comparing in the right branch 
	BEQ End_Or_Id_8	; [OR] checking if the second element is true 
	LOAD #1, R2	; Or is true , We place the value 1 in the return Register
End_Or_Id_8:
; --------EndOr--------[63, 9]-----
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
; ---------Startif-----------[63, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else10
; --------StartBinaryOp--------[64, 12]-----
	LOAD 3(GB), R2	; loading i into memory
	LOAD #1, R3	; loading 1 into memory
	ADD R3, R2
; --------EndBinaryOp--------[64, 12]-----
	STORE R2, 3(GB)	;  Assiging a value to i
	BRA end_ifthenelse_10
else10:
end_ifthenelse_10:
; ---------Endif-----------
	WSTR "b1||b2[ "
	LOAD 3(GB), R2	; loading i into memory
	LOAD R2, R1
	WINT
	WSTR "/1111 ]"
	WNL
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 3(GB)	;  Assiging a value to i
; --------StartBinaryOp--------[70, 7]-----
	LOAD 4(GB), R2	; loading x into memory
	CMP 5(GB), R2	; Comparing registers for Greater operation 
	SGT R2	; Placing Greater result into the register  
; --------EndBinaryOp--------[70, 7]-----
; ---------Startif-----------[70, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else11
; --------StartBinaryOp--------[71, 12]-----
	LOAD 3(GB), R2	; loading i into memory
	LOAD #1000, R3	; loading 1000 into memory
	ADD R3, R2
; --------EndBinaryOp--------[71, 12]-----
	STORE R2, 3(GB)	;  Assiging a value to i
	BRA end_ifthenelse_11
else11:
end_ifthenelse_11:
; ---------Endif-----------
; --------StartBinaryOp--------[73, 9]-----
	LOAD 4(GB), R2	; loading x into memory
	CMP 5(GB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[73, 9]-----
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
; ---------Startif-----------[73, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else12
	LOAD #1, R2	; loading true into memory
	STORE R2, 1(GB)	;  Assiging a value to b1
; --------StartBinaryOp--------[75, 12]-----
	LOAD 3(GB), R2	; loading i into memory
	LOAD #100, R3	; loading 100 into memory
	ADD R3, R2
; --------EndBinaryOp--------[75, 12]-----
	STORE R2, 3(GB)	;  Assiging a value to i
	BRA end_ifthenelse_12
else12:
end_ifthenelse_12:
; ---------Endif-----------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 5(GB)	;  Assiging a value to y
	LOAD #1, R2	; loading 1 into memory
	STORE R2, 4(GB)	;  Assiging a value to x
; --------StartBinaryOp--------[79, 7]-----
	LOAD 4(GB), R2	; loading x into memory
	CMP 5(GB), R2	; Comparing registers for GreaterOrEqual operation 
	SGE R2	; Placing GreaterOrEqual result into the register  
; --------EndBinaryOp--------[79, 7]-----
; ---------Startif-----------[79, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else13
; --------StartBinaryOp--------[80, 12]-----
	LOAD 3(GB), R2	; loading i into memory
	LOAD #10, R3	; loading 10 into memory
	ADD R3, R2
; --------EndBinaryOp--------[80, 12]-----
	STORE R2, 3(GB)	;  Assiging a value to i
	BRA end_ifthenelse_13
else13:
end_ifthenelse_13:
; ---------Endif-----------
; --------StartBinaryOp--------[82, 7]-----
	LOAD 5(GB), R2	; loading y into memory
	CMP 4(GB), R2	; Comparing registers for LowerOrEqual operation 
	SLE R2	; Placing LowerOrEqual result into the register  
; --------EndBinaryOp--------[82, 7]-----
; ---------Startif-----------[82, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else14
; --------StartBinaryOp--------[83, 12]-----
	LOAD 3(GB), R2	; loading i into memory
	LOAD #1, R3	; loading 1 into memory
	ADD R3, R2
; --------EndBinaryOp--------[83, 12]-----
	STORE R2, 3(GB)	;  Assiging a value to i
	BRA end_ifthenelse_14
else14:
end_ifthenelse_14:
; ---------Endif-----------
	LOAD 1(GB), R2	; loading b1 into memory
; ---------Startif-----------[85, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else15
	WSTR "b1 is true"
	WNL
	BRA end_ifthenelse_15
else15:
	WSTR "b1 is false"
	WNL
end_ifthenelse_15:
; ---------Endif-----------
	WSTR "x(greater/lower)y[ "
	LOAD 3(GB), R2	; loading i into memory
	LOAD R2, R1
	WINT
	WSTR "/1111 ]"
	WNL
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 3(GB)	;  Assiging a value to i
; --------StartOr--------[94, 7]-----
; --------StartAND--------[94, 7]-----
; --------StartBinaryOp--------[94, 8]-----
	LOAD 4(GB), R2	; loading x into memory
; --------StartBinaryOp--------[94, 11]-----
	LOAD 5(GB), R3	; loading y into memory
	ADD 6(GB), R3
; --------EndBinaryOp--------[94, 11]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[94, 8]-----
	CMP #0, R2	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_10	; [AND] checking if the first element is false
; --------StartOr--------[94, 19]-----
	LOAD 1(GB), R3	; loading b1 into memory
	CMP #1, R3	; [Or]Comparing in the left branch 
	BEQ End_Or_Id_11	; [Or] checking if the first element is false
	PUSH R2
	LOAD 2(GB), R2	; loading b2 into memory
	CMP #0, R2	; [Or]Comparing in the right branch 
	BEQ End_Or_Id_11	; [OR] checking if the second element is true 
	LOAD #1, R3	; Or is true , We place the value 1 in the return Register
	POP R2
End_Or_Id_11:
; --------EndOr--------[94, 19]-----
	CMP #0, R3	; [AND]Comparing in the right branch 
	BNE AND_Success_id10	; [AND] checking if the first element is true
End_And_False_Id_10:
	LOAD #0, R2	; And is false, We place the value 0 in the return Register
AND_Success_id10:
; --------EndAND--------[94, 7]-----
	CMP #1, R2	; [Or]Comparing in the left branch 
	BEQ End_Or_Id_9	; [Or] checking if the first element is false
	LOAD 2(GB), R3	; loading b2 into memory
	CMP #0, R3	; [Or]Comparing in the right branch 
	BEQ End_Or_Id_9	; [OR] checking if the second element is true 
	LOAD #1, R2	; Or is true , We place the value 1 in the return Register
End_Or_Id_9:
; --------EndOr--------[94, 7]-----
; ---------Startif-----------[94, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else16
; --------StartBinaryOp--------[95, 12]-----
	LOAD 3(GB), R2	; loading i into memory
	LOAD #100, R3	; loading 100 into memory
	ADD R3, R2
; --------EndBinaryOp--------[95, 12]-----
	STORE R2, 3(GB)	;  Assiging a value to i
	BRA end_ifthenelse_16
else16:
end_ifthenelse_16:
; ---------Endif-----------
; --------StartBinaryOp--------[97, 18]-----
	LOAD 4(GB), R2	; loading x into memory
	CMP 6(GB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[97, 18]-----
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
; ---------Startif-----------[97, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else17
; --------StartBinaryOp--------[98, 12]-----
	LOAD 3(GB), R2	; loading i into memory
	LOAD #10, R3	; loading 10 into memory
	ADD R3, R2
; --------EndBinaryOp--------[98, 12]-----
	STORE R2, 3(GB)	;  Assiging a value to i
	BRA end_ifthenelse_17
else17:
end_ifthenelse_17:
; ---------Endif-----------
; --------StartBinaryOp--------[100, 19]-----
	LOAD 4(GB), R2	; loading x into memory
	CMP 6(GB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[100, 19]-----
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
; ---------Startif-----------[100, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else18
	BRA end_ifthenelse_18
else18:
; --------StartBinaryOp--------[103, 12]-----
	LOAD 3(GB), R2	; loading i into memory
	LOAD #1, R3	; loading 1 into memory
	ADD R3, R2
; --------EndBinaryOp--------[103, 12]-----
	STORE R2, 3(GB)	;  Assiging a value to i
end_ifthenelse_18:
; ---------Endif-----------
	WSTR "comparaison plus complexes[ "
	LOAD 3(GB), R2	; loading i into memory
	LOAD R2, R1
	WINT
	WSTR "/111 ]"
	WNL
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 3(GB)	;  Assiging a value to i
	HALT
stack_overflow_error:
	WSTR "Error: stack_overflow_error"
	WNL
	ERROR
; end main program
