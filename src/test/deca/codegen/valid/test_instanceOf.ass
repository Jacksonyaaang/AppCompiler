	TSTO #29
	BOV stack_overflow_error
	ADDSP #26
; start main program
; -------------------------------------
;        Method Table
; -------------------------------------
	LOAD #null, R0
	STORE R0, 15(GB)
	LOAD code.Object.equals, R0
	STORE R0, 16(GB)
	LEA 15(GB), R0
	STORE R0, 17(GB)
	LOAD code.Object.equals, R0
	STORE R0, 18(GB)
	LEA 17(GB), R0
	STORE R0, 19(GB)
	LOAD code.Object.equals, R0
	STORE R0, 20(GB)
	LEA 19(GB), R0
	STORE R0, 21(GB)
	LOAD code.Object.equals, R0
	STORE R0, 22(GB)
	LEA 17(GB), R0
	STORE R0, 23(GB)
	LOAD code.Object.equals, R0
	STORE R0, 24(GB)
	LEA 21(GB), R0
	STORE R0, 25(GB)
	LOAD code.Object.equals, R0
	STORE R0, 26(GB)
; -------------------------------------
;        Main program
; -------------------------------------
; Beginning of main instructions:
	LOAD #2, R2	; loading 2 into memory
	STORE R2, 1(GB)	; Initializing the variable x and loading it into memory
	LOAD #2, R2	; loading 2 into memory
	STORE R2, 2(GB)	; Initializing the variable y and loading it into memory
	LOAD #2, R2	; loading 2 into memory
	STORE R2, 3(GB)	; Initializing the variable z and loading it into memory
	LOAD #2, R2	; loading 2 into memory
	STORE R2, 4(GB)	; Initializing the variable h and loading it into memory
	LOAD #2, R2	; loading 2 into memory
	STORE R2, 5(GB)	; Initializing the variable v and loading it into memory
	LOAD #1, R2	; loading true into memory
	STORE R2, 6(GB)	; Initializing the variable b1 and loading it into memory
	LOAD #1, R2	; loading true into memory
	STORE R2, 7(GB)	; Initializing the variable b2 and loading it into memory
	LOAD #0, R2	; loading false into memory
	STORE R2, 8(GB)	; Initializing the variable b3 and loading it into memory
	LOAD #0, R2	; loading false into memory
	STORE R2, 9(GB)	; Initializing the variable b4 and loading it into memory
; --------StartNew--------[31, 10]-----
; [New][loadItemintoRegister] loading new of calss =  A into memory at register R2
	NEW #1, R2
	BOV heap_overflow_error
	LEA 17(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.A
	POP R2
; --------EndNew--------[31, 10]-----
	STORE R2, 10(GB)	; Initializing the variable a and loading it into memory
; --------StartNew--------[32, 9]-----
; [New][loadItemintoRegister] loading new of calss =  B into memory at register R2
	NEW #1, R2
	BOV heap_overflow_error
	LEA 19(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.B
	POP R2
; --------EndNew--------[32, 9]-----
	STORE R2, 11(GB)	; Initializing the variable b and loading it into memory
; --------StartNew--------[33, 10]-----
; [New][loadItemintoRegister] loading new of calss =  C into memory at register R2
	NEW #1, R2
	BOV heap_overflow_error
	LEA 21(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.C
	POP R2
; --------EndNew--------[33, 10]-----
	STORE R2, 12(GB)	; Initializing the variable c and loading it into memory
; --------StartNew--------[34, 9]-----
; [New][loadItemintoRegister] loading new of calss =  D into memory at register R2
	NEW #1, R2
	BOV heap_overflow_error
	LEA 23(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.D
	POP R2
; --------EndNew--------[34, 9]-----
	STORE R2, 13(GB)	; Initializing the variable d and loading it into memory
; --------StartNew--------[35, 10]-----
; [New][loadItemintoRegister] loading new of calss =  H into memory at register R2
	NEW #1, R2
	BOV heap_overflow_error
	LEA 25(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.H
	POP R2
; --------EndNew--------[35, 10]-----
	STORE R2, 14(GB)	; Initializing the variable p and loading it into memory
; --------------BeginInstanceof----------[37, 7]+-----
	LEA 17(GB), R0	; loading method table of A
	LEA 19(GB), R1	; loading method table of B
	CMP R1, R0
	BEQ instanceOf_Object1	; si les deux classes sont les mêmes , on retourne immédiatement true
	LOAD 11(GB), R2	; loading b into memory
loopbegin1:
	CMP R0, R2
	BEQ instanceOf_Object1	; loopend
	LOAD 0(R2), R2
	CMP #null, R2
	BEQ endfalse1
	BRA loopbegin1
instanceOf_Object1:
	LOAD #1, R0
	BRA endtrue1
endfalse1:
	LOAD #0, R0
endtrue1:
	LOAD R0, R2
; --------------EndInstanceof----------[37, 7]-----
; ---------Startif-----------[37, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else1
	WSTR "instanceof fonctionne b instanceof A"
	WNL
	BRA end_ifthenelse_1
else1:
end_ifthenelse_1:
; ---------Endif-----------
; --------StartAND--------[40, 11]-----
; --------StartAND--------[40, 12]-----
; --------StartBinaryOp--------[40, 12]-----
	LOAD 1(GB), R2	; loading x into memory
	LOAD #2, R3	; loading 2 into memory
	CMP R3, R2	; Comparing registers for LowerOrEqual operation 
	SLE R2	; Placing LowerOrEqual result into the register  
; --------EndBinaryOp--------[40, 12]-----
	CMP #0, R2	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_2	; [AND] checking if the first element is false
; --------StartOr--------[40, 21]-----
; --------StartBinaryOp--------[40, 21]-----
	LOAD 2(GB), R3	; loading y into memory
	CMP 3(GB), R3	; Comparing registers for NotEquals operation 
	SNE R3	; Placing NotEquals result into the register  
; --------EndBinaryOp--------[40, 21]-----
	CMP #1, R3	; [Or]Comparing in the left branch 
	BEQ End_Or_Id_3	; [Or] checking if the first element is false
; --------StartBinaryOp--------[40, 31]-----
	PUSH R2
	LOAD 4(GB), R2	; loading h into memory
	CMP 5(GB), R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[40, 31]-----
	CMP #0, R2	; [Or]Comparing in the right branch 
	BEQ End_Or_Id_3	; [OR] checking if the second element is true 
	LOAD #1, R3	; Or is true , We place the value 1 in the return Register
	POP R2
End_Or_Id_3:
; --------EndOr--------[40, 21]-----
	CMP #0, R3	; [AND]Comparing in the right branch 
	BNE AND_Success_id2	; [AND] checking if the first element is true
End_And_False_Id_2:
	LOAD #0, R2	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id2	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id2:
QUIT_AND_Called_When_Fail_id2:
; --------EndAND--------[40, 12]-----
	CMP #0, R2	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_1	; [AND] checking if the first element is false
; --------StartAND--------[40, 40]-----
; --------StartAND--------[40, 40]-----
; --------StartAND--------[40, 40]-----
; --------StartAND--------[40, 40]-----
; --------StartAND--------[40, 40]-----
; --------StartAND--------[40, 40]-----
; --------StartAND--------[40, 41]-----
; --------StartBinaryOp--------[40, 41]-----
	LOAD #3, R3	; loading 3 into memory
	CMP 1(GB), R3	; Comparing registers for Greater operation 
	SGT R3	; Placing Greater result into the register  
; --------EndBinaryOp--------[40, 41]-----
	CMP #0, R3	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_10	; [AND] checking if the first element is false
; --------StartBinaryOp--------[40, 48]-----
	PUSH R2
	LOAD #0x1.4p1, R2	; loading 2.5 into memory
	PUSH R3
	LOAD 2(GB), R3	; loading y into memory
	FLOAT R3, R3	; Doing an unary minus
	CMP R3, R2	; Comparing registers for Greater operation 
	SGT R2	; Placing Greater result into the register  
	POP R3
; --------EndBinaryOp--------[40, 48]-----
	CMP #0, R2	; [AND]Comparing in the right branch 
	BNE AND_Success_id10	; [AND] checking if the first element is true
End_And_False_Id_10:
	LOAD #0, R3	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id10	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id10:
	POP R2
QUIT_AND_Called_When_Fail_id10:
; --------EndAND--------[40, 41]-----
	CMP #0, R3	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_9	; [AND] checking if the first element is false
; --------StartAND--------[40, 60]-----
; --------StartBinaryOp--------[40, 60]-----
	PUSH R2
	LOAD #0x1.0p1, R2	; loading 2.0 into memory
	PUSH R3
	LOAD 2(GB), R3	; loading y into memory
	FLOAT R3, R3	; Doing an unary minus
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
	POP R3
; --------EndBinaryOp--------[40, 60]-----
	CMP #0, R2	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_11	; [AND] checking if the first element is false
; --------StartBinaryOp--------[40, 70]-----
	PUSH R3
	LOAD 5(GB), R3	; loading v into memory
	CMP 4(GB), R3	; Comparing registers for Equals operation 
	SEQ R3	; Placing Equals result into the register  
; --------EndBinaryOp--------[40, 70]-----
	CMP #0, R3	; [AND]Comparing in the right branch 
	BNE AND_Success_id11	; [AND] checking if the first element is true
End_And_False_Id_11:
	LOAD #0, R2	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id11	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id11:
	POP R3
QUIT_AND_Called_When_Fail_id11:
; --------EndAND--------[40, 60]-----
	CMP #0, R2	; [AND]Comparing in the right branch 
	BNE AND_Success_id9	; [AND] checking if the first element is true
End_And_False_Id_9:
	LOAD #0, R3	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id9	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id9:
	POP R2
QUIT_AND_Called_When_Fail_id9:
; --------EndAND--------[40, 40]-----
	CMP #0, R3	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_8	; [AND] checking if the first element is false
	PUSH R2
	LOAD 6(GB), R2	; loading b1 into memory
	CMP #0, R2	; [AND]Comparing in the right branch 
	BNE AND_Success_id8	; [AND] checking if the first element is true
End_And_False_Id_8:
	LOAD #0, R3	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id8	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id8:
	POP R2
QUIT_AND_Called_When_Fail_id8:
; --------EndAND--------[40, 40]-----
	CMP #0, R3	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_7	; [AND] checking if the first element is false
	PUSH R2
	LOAD 7(GB), R2	; loading b2 into memory
	CMP #0, R2	; [AND]Comparing in the right branch 
	BNE AND_Success_id7	; [AND] checking if the first element is true
End_And_False_Id_7:
	LOAD #0, R3	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id7	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id7:
	POP R2
QUIT_AND_Called_When_Fail_id7:
; --------EndAND--------[40, 40]-----
	CMP #0, R3	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_6	; [AND] checking if the first element is false
	PUSH R2
	LOAD 8(GB), R2	; loading b3 into memory
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; [AND]Comparing in the right branch 
	BNE AND_Success_id6	; [AND] checking if the first element is true
End_And_False_Id_6:
	LOAD #0, R3	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id6	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id6:
	POP R2
QUIT_AND_Called_When_Fail_id6:
; --------EndAND--------[40, 40]-----
	CMP #0, R3	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_5	; [AND] checking if the first element is false
	PUSH R2
	LOAD 9(GB), R2	; loading b4 into memory
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; [AND]Comparing in the right branch 
	BNE AND_Success_id5	; [AND] checking if the first element is true
End_And_False_Id_5:
	LOAD #0, R3	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id5	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id5:
	POP R2
QUIT_AND_Called_When_Fail_id5:
; --------EndAND--------[40, 40]-----
	CMP #0, R3	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_4	; [AND] checking if the first element is false
; --------------BeginInstanceof----------[40, 107]+-----
	LEA 17(GB), R0	; loading method table of A
	LEA 19(GB), R1	; loading method table of B
	CMP R1, R0
	BEQ instanceOf_Object2	; si les deux classes sont les mêmes , on retourne immédiatement true
	PUSH R2
	LOAD 11(GB), R2	; loading b into memory
loopbegin2:
	CMP R0, R2
	BEQ instanceOf_Object2	; loopend
	LOAD 0(R2), R2
	CMP #null, R2
	BEQ endfalse2
	BRA loopbegin2
instanceOf_Object2:
	LOAD #1, R0
	BRA endtrue2
endfalse2:
	LOAD #0, R0
endtrue2:
	LOAD R0, R2
; --------------EndInstanceof----------[40, 107]-----
	CMP #0, R2	; [AND]Comparing in the right branch 
	BNE AND_Success_id4	; [AND] checking if the first element is true
End_And_False_Id_4:
	LOAD #0, R3	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id4	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id4:
	POP R2
QUIT_AND_Called_When_Fail_id4:
; --------EndAND--------[40, 40]-----
	CMP #0, R3	; [AND]Comparing in the right branch 
	BNE AND_Success_id1	; [AND] checking if the first element is true
End_And_False_Id_1:
	LOAD #0, R2	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id1	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id1:
QUIT_AND_Called_When_Fail_id1:
; --------EndAND--------[40, 11]-----
; ---------Startif-----------[40, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else2
	WSTR "Gestion de registre correct avec instance of "
	WNL
	BRA end_ifthenelse_2
else2:
end_ifthenelse_2:
; ---------Endif-----------
; --------------BeginInstanceof----------[45, 7]+-----
	LEA 15(GB), R0	; loading method table of Object
	LEA 19(GB), R1	; loading method table of B
	CMP R1, R0
	BEQ instanceOf_Object3	; si les deux classes sont les mêmes , on retourne immédiatement true
	LOAD 11(GB), R2	; loading b into memory
loopbegin3:
	CMP R0, R2
	BEQ instanceOf_Object3	; loopend
	LOAD 0(R2), R2
	CMP #null, R2
	BEQ endfalse3
	BRA loopbegin3
instanceOf_Object3:
	LOAD #1, R0
	BRA endtrue3
endfalse3:
	LOAD #0, R0
endtrue3:
	LOAD R0, R2
; --------------EndInstanceof----------[45, 7]-----
; ---------Startif-----------[45, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else3
	WSTR "instanceof fonctionne b -> instanceof Object"
	WNL
	BRA end_ifthenelse_3
else3:
end_ifthenelse_3:
; ---------Endif-----------
; --------------BeginInstanceof----------[49, 7]+-----
	LEA 19(GB), R0	; loading method table of B
	LEA 17(GB), R1	; loading method table of A
	CMP R1, R0
	BEQ instanceOf_Object4	; si les deux classes sont les mêmes , on retourne immédiatement true
	LOAD 10(GB), R2	; loading a into memory
loopbegin4:
	CMP R0, R2
	BEQ instanceOf_Object4	; loopend
	LOAD 0(R2), R2
	CMP #null, R2
	BEQ endfalse4
	BRA loopbegin4
instanceOf_Object4:
	LOAD #1, R0
	BRA endtrue4
endfalse4:
	LOAD #0, R0
endtrue4:
	LOAD R0, R2
; --------------EndInstanceof----------[49, 7]-----
; ---------Startif-----------[49, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else4
	WSTR "Problem with code"
	WNL
	BRA end_ifthenelse_4
else4:
	WSTR "instanceof fonctionne a not instanceof B"
	WNL
end_ifthenelse_4:
; ---------Endif-----------
; --------------BeginInstanceof----------[56, 7]+-----
	LEA 17(GB), R0	; loading method table of A
	LEA 25(GB), R1	; loading method table of H
	CMP R1, R0
	BEQ instanceOf_Object5	; si les deux classes sont les mêmes , on retourne immédiatement true
	LOAD 14(GB), R2	; loading p into memory
loopbegin5:
	CMP R0, R2
	BEQ instanceOf_Object5	; loopend
	LOAD 0(R2), R2
	CMP #null, R2
	BEQ endfalse5
	BRA loopbegin5
instanceOf_Object5:
	LOAD #1, R0
	BRA endtrue5
endfalse5:
	LOAD #0, R0
endtrue5:
	LOAD R0, R2
; --------------EndInstanceof----------[56, 7]-----
; ---------Startif-----------[56, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else5
	WSTR "instanceof fonctionne H instanceof A"
	WNL
	BRA end_ifthenelse_5
else5:
end_ifthenelse_5:
; ---------Endif-----------
; --------------BeginInstanceof----------[60, 10]+-----
	LEA 23(GB), R0	; loading method table of D
	LEA 21(GB), R1	; loading method table of C
	CMP R1, R0
	BEQ instanceOf_Object6	; si les deux classes sont les mêmes , on retourne immédiatement true
	LOAD 12(GB), R2	; loading c into memory
loopbegin6:
	CMP R0, R2
	BEQ instanceOf_Object6	; loopend
	LOAD 0(R2), R2
	CMP #null, R2
	BEQ endfalse6
	BRA loopbegin6
instanceOf_Object6:
	LOAD #1, R0
	BRA endtrue6
endfalse6:
	LOAD #0, R0
endtrue6:
	LOAD R0, R2
; --------------EndInstanceof----------[60, 10]-----
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
; ---------Startif-----------[60, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else6
	WSTR "instanceof fonctionne c is not  instanceof D"
	WNL
	BRA end_ifthenelse_6
else6:
	WSTR "problem with code"
	WNL
end_ifthenelse_6:
; ---------Endif-----------
	HALT
; -------------------------------------
;        Classes
; -------------------------------------
; ---------------------------------------------------
; ----------------- class : A -------------------
; ---------------------------------------------------
; ------------Init method for class = A--------
init.A:
	RTS
; ---------------------------------------------------
; ----------------- class : B -------------------
; ---------------------------------------------------
; ------------Init method for class = B--------
init.B:
	TSTO #3
	BOV stack_overflow_error
	LOAD -2(LB), R0	; Placing the current class = B adresse in the the stack before calling parent 
	PUSH R0	; Placing this = B into the stack
	BSR init.A	; Calling the initialisation method of parent classA
	SUBSP #1
	RTS
; ---------------------------------------------------
; ----------------- class : C -------------------
; ---------------------------------------------------
; ------------Init method for class = C--------
init.C:
	TSTO #3
	BOV stack_overflow_error
	LOAD -2(LB), R0	; Placing the current class = C adresse in the the stack before calling parent 
	PUSH R0	; Placing this = C into the stack
	BSR init.B	; Calling the initialisation method of parent classB
	SUBSP #1
	RTS
; ---------------------------------------------------
; ----------------- class : D -------------------
; ---------------------------------------------------
; ------------Init method for class = D--------
init.D:
	TSTO #3
	BOV stack_overflow_error
	LOAD -2(LB), R0	; Placing the current class = D adresse in the the stack before calling parent 
	PUSH R0	; Placing this = D into the stack
	BSR init.A	; Calling the initialisation method of parent classA
	SUBSP #1
	RTS
; ---------------------------------------------------
; ----------------- class : H -------------------
; ---------------------------------------------------
; ------------Init method for class = H--------
init.H:
	TSTO #3
	BOV stack_overflow_error
	LOAD -2(LB), R0	; Placing the current class = H adresse in the the stack before calling parent 
	PUSH R0	; Placing this = H into the stack
	BSR init.C	; Calling the initialisation method of parent classC
	SUBSP #1
	RTS
; -------------------------------------
;        Method equal
; -------------------------------------
; ------------------Start generateCodeForObjectEquals location:
code.Object.equals:
	LOAD -2(LB), R0
	CMP -3(LB), R0
	SEQ R0	; Comparaison this et paramètre d'equals
fin.Object.equals:
	RTS
init.Object:
	RTS
; -------------------------------------
;        Liste Erreur
; -------------------------------------
heap_overflow_error:
	WSTR "Error: heap_overflow_error"
	WNL
	ERROR
stack_overflow_error:
	WSTR "Error: stack_overflow_error"
	WNL
	ERROR
; end main program
