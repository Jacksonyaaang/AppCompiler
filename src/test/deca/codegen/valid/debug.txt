DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:38) - [MethodDefinition][setLabel] Initialising label value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with code.Object.equals
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:46) - verify program: start
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:52) - Register unit management unit not null
DEBUG fr.ensimag.deca.DecacCompiler.saveMainProgramState(DecacCompiler.java:128) - [DecacCompiler][saveMainProgramState] Saving state main program
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:36) - [ListDeclClass][verifyListClass] verify listClass pass 1: START
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:40) - [ListDeclClass][verifyListClass] verify listClass pass 1: END
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassMembers(ListDeclClass.java:48) - [ListDeclClass][verifyListClassMembers] verify listClass pass 2: START
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyListDeclField(ListDeclField.java:54) - [ListDeclField][verifyListDeclField]
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:91) - [DeclField][verifyDecleField] Verify a Field declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:91) - [DeclField][verifyDecleField] Verify a Field declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:32) - [ListDeclMethod][verifyListDeclMethod]
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : diag
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  diag
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : a
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter a into -3(LB)
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:136) - [DeclMethod][verifyDecleMethod] Method = diag does not exists, adding a new one to the local env with index 2
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyListDeclField(ListDeclField.java:54) - [ListDeclField][verifyListDeclField]
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:91) - [DeclField][verifyDecleField] Verify a Field declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:91) - [DeclField][verifyDecleField] Verify a Field declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:32) - [ListDeclMethod][verifyListDeclMethod]
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : diag
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  diag
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : a
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter a into -3(LB)
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:148) - [DeclMethod][verifyDecleMethod] Method = diag exists in the localenv, checking if it is a method that belongs to the current class
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:154) - [DeclMethod][verifyDecleMethod] Method = diag exists in the parent class,checking if our method matchs the one that is in the parent
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:167) - [DeclMethod][verifyDecleMethod] Method = diag exists in the parent class,and it was redefined exactly the way it was in the parent method, we used the index the index =2
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : sommeElements
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  sommeElements
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : a
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter a into -3(LB)
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : h
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter h into -4(LB)
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : t
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter t into -5(LB)
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:136) - [DeclMethod][verifyDecleMethod] Method = sommeElements does not exists, adding a new one to the local env with index 3
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : mult_elements
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  mult_elements
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : a
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter a into -3(LB)
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : t
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter t into -4(LB)
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:136) - [DeclMethod][verifyDecleMethod] Method = mult_elements does not exists, adding a new one to the local env with index 4
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassMembers(ListDeclClass.java:52) - [ListDeclClass][verifyListClassMembers] verify listClass pass 2: END
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassBody(ListDeclClass.java:59) - [ListDeclClass][verifyListClassBody] verify listClass pass 3: START
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyInitFields(ListDeclField.java:62) - [ListDeclField][verifyInitListDeclField]
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethodBody(ListDeclMethod.java:41) - [ListDeclMethod][verifyListDeclMethod]
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:190) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:128) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:163) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:190) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:128) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:163) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyInitFields(ListDeclField.java:62) - [ListDeclField][verifyInitListDeclField]
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:163) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments
DEBUG fr.ensimag.deca.tree.This.verifyExpr(This.java:57) - [This][verifyExpr]
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:78) - [Selection][verifyExpr] Class type is  Point3D
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethodBody(ListDeclMethod.java:41) - [ListDeclMethod][verifyListDeclMethod]
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:190) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:128) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:163) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:190) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:128) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:163) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:190) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:128) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:163) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:163) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:67) - [DeclVar] Saving method variable l into 1(LB)
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.Return.verifyInst(Return.java:38) - [Return][verifyInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:163) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:67) - [DeclVar] Saving method variable result into 1(LB)
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:190) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:128) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.This.verifyExpr(This.java:57) - [This][verifyExpr]
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:78) - [Selection][verifyExpr] Class type is  Point3D
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:163) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:190) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:128) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.This.verifyExpr(This.java:57) - [This][verifyExpr]
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:78) - [Selection][verifyExpr] Class type is  Point3D
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:163) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.This.verifyExpr(This.java:57) - [This][verifyExpr]
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:78) - [Selection][verifyExpr] Class type is  Point3D
DEBUG fr.ensimag.deca.tree.Return.verifyInst(Return.java:38) - [Return][verifyInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:163) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassBody(ListDeclClass.java:63) - [ListDeclClass][verifyListClassBody] verify listClass pass 3: END
DEBUG fr.ensimag.deca.DecacCompiler.setMainProgramState(DecacCompiler.java:115) - [DecacCompiler][setMainProgramState] Seeting main state program
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:38) - verify Main: start
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:163) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving y into 1(GB)
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:163) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving p into 2(GB)
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving p1 into 3(GB)
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving p2 into 4(GB)
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving p3 into 5(GB)
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:190) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:128) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:163) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:190) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:190) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:128) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:163) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:190) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:190) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:128) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:163) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:190) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:78) - [Selection][verifyExpr] Class type is  Point3D
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:190) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:128) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:78) - [Selection][verifyExpr] Class type is  Point3D
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:163) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:78) - [Selection][verifyExpr] Class type is  Point3D
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.FloatLiteral.verifyExpr(FloatLiteral.java:45) - [FloatLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:47) - verify Main: end
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:60) - verify program: end
DEBUG fr.ensimag.deca.DecacCompiler.setMainProgramState(DecacCompiler.java:115) - [DecacCompiler][setMainProgramState] Seeting main state program
DEBUG fr.ensimag.deca.tree.ListDeclClass.codeGenListClassTableau(ListDeclClass.java:67) - [ListDeclClass][codeGenListClassTableau] Code generation pass 1: START
DEBUG fr.ensimag.deca.tree.DeclClass.codeGenTableauDeMethod(DeclClass.java:67) - [DeclClass][codeGenTableauDeMethod] Generating the table method || ClassName =  Point2D // Super class  = Object
DEBUG fr.ensimag.deca.tree.DeclClass.codeGenTableauDeMethod(DeclClass.java:69) - [DeclClass][codeGenTableauDeMethod] Class definitions are : 
 Main class =  type defined at [10, 0], type=Point2D 
 Super class  = type (builtin), type=Object
DEBUG fr.ensimag.deca.tree.DeclClass.codeGenTableauDeMethod(DeclClass.java:76) - [DeclClass][codeGenTableauDeMethod] Current methode table adresses 
-----Start table Method Table----
type (builtin), type=Object -> 6(GB)
-----End table Method Table  ----

DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with code.Object.equals
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:38) - [MethodDefinition][setLabel] Initialising label value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with code.Point2D.diag
DEBUG fr.ensimag.deca.tree.DeclClass.codeGenTableauDeMethod(DeclClass.java:67) - [DeclClass][codeGenTableauDeMethod] Generating the table method || ClassName =  Point3D // Super class  = Point2D
DEBUG fr.ensimag.deca.tree.DeclClass.codeGenTableauDeMethod(DeclClass.java:69) - [DeclClass][codeGenTableauDeMethod] Class definitions are : 
 Main class =  type defined at [21, 0], type=Point3D 
 Super class  = type defined at [10, 0], type=Point2D
DEBUG fr.ensimag.deca.tree.DeclClass.codeGenTableauDeMethod(DeclClass.java:76) - [DeclClass][codeGenTableauDeMethod] Current methode table adresses 
-----Start table Method Table----
type defined at [10, 0], type=Point2D -> 8(GB)
type (builtin), type=Object -> 6(GB)
-----End table Method Table  ----

DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with code.Object.equals
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:38) - [MethodDefinition][setLabel] Initialising label value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with code.Point3D.diag
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:38) - [MethodDefinition][setLabel] Initialising label value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with code.Point3D.sommeElements
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:38) - [MethodDefinition][setLabel] Initialising label value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with code.Point3D.mult_elements
DEBUG fr.ensimag.deca.tree.ListDeclClass.codeGenListClassTableau(ListDeclClass.java:71) - [ListDeclClass][codeGenListClassTableau] Code generation pass 1: END
DEBUG fr.ensimag.deca.DecacCompiler.setMainProgramState(DecacCompiler.java:115) - [DecacCompiler][setMainProgramState] Seeting main state program
DEBUG fr.ensimag.deca.tree.ListDeclClass.codeGenListClassMethod(ListDeclClass.java:75) - [ListDeclClass][codeGenListClassMethod] Code generation pass 2 classes: START
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:38) - [MethodDefinition][setLabel] Initialising label value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with init.Point2D
INFO  fr.ensimag.deca.tree.DeclClass.codeGenMethodInitialisation(DeclClass.java:114) - [DeclClass][codeGenMethodInitialisation] Defining code initilization method
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclField.CodeGenListPlaceZeroInField(ListDeclField.java:69) - [ListDeclField][CodeGenListPlaceZeroInField] Placing Zero In All fields
DEBUG fr.ensimag.deca.tree.ListDeclField.CodeGenListInitializeField(ListDeclField.java:77) - [ListDeclField][CodeGenListInitializeField] Initializing the fields
DEBUG fr.ensimag.deca.tree.DeclClass.codeGenMethodInitialisation(DeclClass.java:143) - [DeclClass][codeGenMethodInitialisation] sizeStackMax = 0
DEBUG fr.ensimag.deca.tree.ListDeclMethod.codeGenListMethod(ListDeclMethod.java:49) - [ListDeclMethod][CodeGenListMethodProgram]
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.context.MethodDefinition.setEndLabel(MethodDefinition.java:55) - [MethodDefinition][setendLabel] Initialising endLabel value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setEndLabel(MethodDefinition.java:58) - [MethodDefinition][setendLabel] Trying to modify endLabel with fin.Point2D.diag
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:78) - [AbstractBinaryExpr][codeGenInst] generating code for abstact binary expression 
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:81) - [AbstractBinaryExpr][codeGenInst] Exploring Left
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.checkIfWeWorkWithFloatAndIfConvIsNeeded(AbstractBinaryExpr.java:116) - [AbstractBinaryExpr][checkIfWeWorkWithFloatAndIfConvIsNeeded] Checking if i am working with floats
DEBUG fr.ensimag.deca.tree.Identifier.codeGenInst(Identifier.java:58) - [Identifier][codeGenInst] Loading identifier into memory with name = x
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R3
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:65) - [Identifier][loadItemintoRegister] Loading x into the register R3
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:69) - [Identifier][loadItemintoRegister] Working with field x
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:84) -  [AbstractBinaryExpr][codeGenInst] Left register R3
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:88) - [AbstractBinaryExpr][codeGenInst] Exploiting an identifier with the adresse-3(LB)
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:26) - [Plus][executeBinaryOperation] generating code for int literal value [16, 12]
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:28) - [Plus][executeBinaryOperation] generating code for identifier [16, 12] ---x
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:30) - [Plus][executeBinaryOperation] generating code for Plus between: -3(LB) and R3
DEBUG fr.ensimag.deca.tree.Assign.codeGenInst(Assign.java:81) - [Assign][codeGenInst]Left operand in assign operation is field
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:78) - [AbstractBinaryExpr][codeGenInst] generating code for abstact binary expression 
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:81) - [AbstractBinaryExpr][codeGenInst] Exploring Left
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.checkIfWeWorkWithFloatAndIfConvIsNeeded(AbstractBinaryExpr.java:116) - [AbstractBinaryExpr][checkIfWeWorkWithFloatAndIfConvIsNeeded] Checking if i am working with floats
DEBUG fr.ensimag.deca.tree.Identifier.codeGenInst(Identifier.java:58) - [Identifier][codeGenInst] Loading identifier into memory with name = y
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R3
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:65) - [Identifier][loadItemintoRegister] Loading y into the register R3
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:69) - [Identifier][loadItemintoRegister] Working with field y
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:84) -  [AbstractBinaryExpr][codeGenInst] Left register R3
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:88) - [AbstractBinaryExpr][codeGenInst] Exploiting an identifier with the adresse-3(LB)
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:26) - [Plus][executeBinaryOperation] generating code for int literal value [17, 12]
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:28) - [Plus][executeBinaryOperation] generating code for identifier [17, 12] ---y
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:30) - [Plus][executeBinaryOperation] generating code for Plus between: -3(LB) and R3
DEBUG fr.ensimag.deca.tree.Assign.codeGenInst(Assign.java:81) - [Assign][codeGenInst]Left operand in assign operation is field
DEBUG fr.ensimag.deca.tree.DeclMethod.codeGenDeclMethod(DeclMethod.java:258) - [DeclClass][codeGenMethodInitialisation] sizeStackMax = 2
DEBUG fr.ensimag.deca.codegen.ListError.activeError(ListError.java:45) - ERROR is being made to value true stack_overflow_error
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:38) - [MethodDefinition][setLabel] Initialising label value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with init.Point3D
INFO  fr.ensimag.deca.tree.DeclClass.codeGenMethodInitialisation(DeclClass.java:114) - [DeclClass][codeGenMethodInitialisation] Defining code initilization method
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclField.CodeGenListPlaceZeroInField(ListDeclField.java:69) - [ListDeclField][CodeGenListPlaceZeroInField] Placing Zero In All fields
DEBUG fr.ensimag.deca.tree.ListDeclField.CodeGenListInitializeField(ListDeclField.java:77) - [ListDeclField][CodeGenListInitializeField] Initializing the fields
DEBUG fr.ensimag.deca.tree.DeclField.LoadAndReserveARegister(DeclField.java:162) - [DeclField][LoadAndReserveARegister]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.This.codeGenInst(This.java:40) - [This][codeGenInst] loading this into memory 
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R3
DEBUG fr.ensimag.deca.codegen.ListError.activeError(ListError.java:45) - ERROR is being made to value true deref_null_error
DEBUG fr.ensimag.deca.tree.DeclClass.codeGenMethodInitialisation(DeclClass.java:143) - [DeclClass][codeGenMethodInitialisation] sizeStackMax = 5
DEBUG fr.ensimag.deca.codegen.ListError.activeError(ListError.java:45) - ERROR is being made to value true stack_overflow_error
DEBUG fr.ensimag.deca.tree.ListDeclMethod.codeGenListMethod(ListDeclMethod.java:49) - [ListDeclMethod][CodeGenListMethodProgram]
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.context.MethodDefinition.setEndLabel(MethodDefinition.java:55) - [MethodDefinition][setendLabel] Initialising endLabel value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setEndLabel(MethodDefinition.java:58) - [MethodDefinition][setendLabel] Trying to modify endLabel with fin.Point3D.diag
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:78) - [AbstractBinaryExpr][codeGenInst] generating code for abstact binary expression 
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:81) - [AbstractBinaryExpr][codeGenInst] Exploring Left
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.checkIfWeWorkWithFloatAndIfConvIsNeeded(AbstractBinaryExpr.java:116) - [AbstractBinaryExpr][checkIfWeWorkWithFloatAndIfConvIsNeeded] Checking if i am working with floats
DEBUG fr.ensimag.deca.tree.Identifier.codeGenInst(Identifier.java:58) - [Identifier][codeGenInst] Loading identifier into memory with name = x
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R3
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:65) - [Identifier][loadItemintoRegister] Loading x into the register R3
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:69) - [Identifier][loadItemintoRegister] Working with field x
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:84) -  [AbstractBinaryExpr][codeGenInst] Left register R3
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:88) - [AbstractBinaryExpr][codeGenInst] Exploiting an identifier with the adresse-3(LB)
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:26) - [Plus][executeBinaryOperation] generating code for int literal value [28, 12]
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:28) - [Plus][executeBinaryOperation] generating code for identifier [28, 12] ---x
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:30) - [Plus][executeBinaryOperation] generating code for Plus between: -3(LB) and R3
DEBUG fr.ensimag.deca.tree.Assign.codeGenInst(Assign.java:81) - [Assign][codeGenInst]Left operand in assign operation is field
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:78) - [AbstractBinaryExpr][codeGenInst] generating code for abstact binary expression 
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:81) - [AbstractBinaryExpr][codeGenInst] Exploring Left
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.checkIfWeWorkWithFloatAndIfConvIsNeeded(AbstractBinaryExpr.java:116) - [AbstractBinaryExpr][checkIfWeWorkWithFloatAndIfConvIsNeeded] Checking if i am working with floats
DEBUG fr.ensimag.deca.tree.Identifier.codeGenInst(Identifier.java:58) - [Identifier][codeGenInst] Loading identifier into memory with name = y
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R3
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:65) - [Identifier][loadItemintoRegister] Loading y into the register R3
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:69) - [Identifier][loadItemintoRegister] Working with field y
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:84) -  [AbstractBinaryExpr][codeGenInst] Left register R3
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:88) - [AbstractBinaryExpr][codeGenInst] Exploiting an identifier with the adresse-3(LB)
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:26) - [Plus][executeBinaryOperation] generating code for int literal value [29, 12]
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:28) - [Plus][executeBinaryOperation] generating code for identifier [29, 12] ---y
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:30) - [Plus][executeBinaryOperation] generating code for Plus between: -3(LB) and R3
DEBUG fr.ensimag.deca.tree.Assign.codeGenInst(Assign.java:81) - [Assign][codeGenInst]Left operand in assign operation is field
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:78) - [AbstractBinaryExpr][codeGenInst] generating code for abstact binary expression 
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:81) - [AbstractBinaryExpr][codeGenInst] Exploring Left
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.checkIfWeWorkWithFloatAndIfConvIsNeeded(AbstractBinaryExpr.java:116) - [AbstractBinaryExpr][checkIfWeWorkWithFloatAndIfConvIsNeeded] Checking if i am working with floats
DEBUG fr.ensimag.deca.tree.Identifier.codeGenInst(Identifier.java:58) - [Identifier][codeGenInst] Loading identifier into memory with name = z
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R3
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:65) - [Identifier][loadItemintoRegister] Loading z into the register R3
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:69) - [Identifier][loadItemintoRegister] Working with field z
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:84) -  [AbstractBinaryExpr][codeGenInst] Left register R3
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:88) - [AbstractBinaryExpr][codeGenInst] Exploiting an identifier with the adresse-3(LB)
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:26) - [Plus][executeBinaryOperation] generating code for int literal value [30, 12]
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:28) - [Plus][executeBinaryOperation] generating code for identifier [30, 12] ---z
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:30) - [Plus][executeBinaryOperation] generating code for Plus between: -3(LB) and R3
DEBUG fr.ensimag.deca.tree.Assign.codeGenInst(Assign.java:81) - [Assign][codeGenInst]Left operand in assign operation is field
DEBUG fr.ensimag.deca.tree.DeclMethod.codeGenDeclMethod(DeclMethod.java:258) - [DeclClass][codeGenMethodInitialisation] sizeStackMax = 2
DEBUG fr.ensimag.deca.codegen.ListError.activeError(ListError.java:45) - ERROR is being made to value true stack_overflow_error
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.context.MethodDefinition.setEndLabel(MethodDefinition.java:55) - [MethodDefinition][setendLabel] Initialising endLabel value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setEndLabel(MethodDefinition.java:58) - [MethodDefinition][setendLabel] Trying to modify endLabel with fin.Point3D.sommeElements
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:78) - [AbstractBinaryExpr][codeGenInst] generating code for abstact binary expression 
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:81) - [AbstractBinaryExpr][codeGenInst] Exploring Left
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.checkIfWeWorkWithFloatAndIfConvIsNeeded(AbstractBinaryExpr.java:116) - [AbstractBinaryExpr][checkIfWeWorkWithFloatAndIfConvIsNeeded] Checking if i am working with floats
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:78) - [AbstractBinaryExpr][codeGenInst] generating code for abstact binary expression 
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:81) - [AbstractBinaryExpr][codeGenInst] Exploring Left
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.checkIfWeWorkWithFloatAndIfConvIsNeeded(AbstractBinaryExpr.java:116) - [AbstractBinaryExpr][checkIfWeWorkWithFloatAndIfConvIsNeeded] Checking if i am working with floats
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:78) - [AbstractBinaryExpr][codeGenInst] generating code for abstact binary expression 
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:81) - [AbstractBinaryExpr][codeGenInst] Exploring Left
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.checkIfWeWorkWithFloatAndIfConvIsNeeded(AbstractBinaryExpr.java:116) - [AbstractBinaryExpr][checkIfWeWorkWithFloatAndIfConvIsNeeded] Checking if i am working with floats
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:78) - [AbstractBinaryExpr][codeGenInst] generating code for abstact binary expression 
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:81) - [AbstractBinaryExpr][codeGenInst] Exploring Left
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.checkIfWeWorkWithFloatAndIfConvIsNeeded(AbstractBinaryExpr.java:116) - [AbstractBinaryExpr][checkIfWeWorkWithFloatAndIfConvIsNeeded] Checking if i am working with floats
DEBUG fr.ensimag.deca.tree.Identifier.codeGenInst(Identifier.java:58) - [Identifier][codeGenInst] Loading identifier into memory with name = a
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:65) - [Identifier][loadItemintoRegister] Loading a into the register R2
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:84) -  [AbstractBinaryExpr][codeGenInst] Left register R2
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:88) - [AbstractBinaryExpr][codeGenInst] Exploiting an identifier with the adresse-4(LB)
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:26) - [Plus][executeBinaryOperation] generating code for int literal value [33, 16]
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:28) - [Plus][executeBinaryOperation] generating code for identifier [33, 16] ---a
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:30) - [Plus][executeBinaryOperation] generating code for Plus between: -4(LB) and R2
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:84) -  [AbstractBinaryExpr][codeGenInst] Left register R2
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:88) - [AbstractBinaryExpr][codeGenInst] Exploiting an identifier with the adresse-5(LB)
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:26) - [Plus][executeBinaryOperation] generating code for int literal value [33, 16]
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:30) - [Plus][executeBinaryOperation] generating code for Plus between: -5(LB) and R2
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:84) -  [AbstractBinaryExpr][codeGenInst] Left register R2
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.rightOperandIdentifier(AbstractBinaryExpr.java:155) - [AbstractBinaryExpr][codeGenInst] Exploring Right
DEBUG fr.ensimag.deca.tree.Identifier.codeGenInst(Identifier.java:58) - [Identifier][codeGenInst] Loading identifier into memory with name = x
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R3
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:65) - [Identifier][loadItemintoRegister] Loading x into the register R3
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:69) - [Identifier][loadItemintoRegister] Working with field x
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.rightOperandIdentifier(AbstractBinaryExpr.java:157) - [AbstractBinaryExpr][rightOperandIdentifier] Right operation is placed in the following register  R3
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:26) - [Plus][executeBinaryOperation] generating code for int literal value [33, 16]
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:30) - [Plus][executeBinaryOperation] generating code for Plus between: R3 and R2
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:84) -  [AbstractBinaryExpr][codeGenInst] Left register R2
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.rightOperandIdentifier(AbstractBinaryExpr.java:155) - [AbstractBinaryExpr][codeGenInst] Exploring Right
DEBUG fr.ensimag.deca.tree.Identifier.codeGenInst(Identifier.java:58) - [Identifier][codeGenInst] Loading identifier into memory with name = y
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R3
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:65) - [Identifier][loadItemintoRegister] Loading y into the register R3
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:69) - [Identifier][loadItemintoRegister] Working with field y
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.rightOperandIdentifier(AbstractBinaryExpr.java:157) - [AbstractBinaryExpr][rightOperandIdentifier] Right operation is placed in the following register  R3
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:26) - [Plus][executeBinaryOperation] generating code for int literal value [33, 16]
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:30) - [Plus][executeBinaryOperation] generating code for Plus between: R3 and R2
DEBUG fr.ensimag.deca.tree.Identifier.codeGenInst(Identifier.java:58) - [Identifier][codeGenInst] Loading identifier into memory with name = l
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:65) - [Identifier][loadItemintoRegister] Loading l into the register R2
DEBUG fr.ensimag.deca.tree.DeclMethod.codeGenDeclMethod(DeclMethod.java:258) - [DeclClass][codeGenMethodInitialisation] sizeStackMax = 3
DEBUG fr.ensimag.deca.codegen.ListError.activeError(ListError.java:45) - ERROR is being made to value true stack_overflow_error
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.context.MethodDefinition.setEndLabel(MethodDefinition.java:55) - [MethodDefinition][setendLabel] Initialising endLabel value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setEndLabel(MethodDefinition.java:58) - [MethodDefinition][setendLabel] Trying to modify endLabel with fin.Point3D.mult_elements
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.Identifier.codeGenInst(Identifier.java:58) - [Identifier][codeGenInst] Loading identifier into memory with name = a
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R3
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:65) - [Identifier][loadItemintoRegister] Loading a into the register R3
DEBUG fr.ensimag.deca.tree.Assign.codeGenInst(Assign.java:99) - [Assign][codeGenInst]Left operand in assign operation is this.field
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:78) - [AbstractBinaryExpr][codeGenInst] generating code for abstact binary expression 
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:81) - [AbstractBinaryExpr][codeGenInst] Exploring Left
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.checkIfWeWorkWithFloatAndIfConvIsNeeded(AbstractBinaryExpr.java:116) - [AbstractBinaryExpr][checkIfWeWorkWithFloatAndIfConvIsNeeded] Checking if i am working with floats
DEBUG fr.ensimag.deca.tree.This.codeGenInst(This.java:40) - [This][codeGenInst] loading this into memory 
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R3
DEBUG fr.ensimag.deca.codegen.ListError.activeError(ListError.java:45) - ERROR is being made to value true deref_null_error
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:84) -  [AbstractBinaryExpr][codeGenInst] Left register R3
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.rightOperandIdentifier(AbstractBinaryExpr.java:155) - [AbstractBinaryExpr][codeGenInst] Exploring Right
DEBUG fr.ensimag.deca.tree.Identifier.codeGenInst(Identifier.java:58) - [Identifier][codeGenInst] Loading identifier into memory with name = t
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:271) - [Abstractexpr][LoadGencode]  Reserving an used register with the name R2
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:65) - [Identifier][loadItemintoRegister] Loading t into the register R2
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.rightOperandIdentifier(AbstractBinaryExpr.java:157) - [AbstractBinaryExpr][rightOperandIdentifier] Right operation is placed in the following register  R2
DEBUG fr.ensimag.deca.tree.Multiply.executeBinaryOperation(Multiply.java:27) - [Multiply][executeBinaryOperation] generating code for multiply between: R2 and R3
DEBUG fr.ensimag.deca.tree.Multiply.executeBinaryOperation(Multiply.java:29) - [Multiply][executeBinaryOperation] generating code for multiply between: R2 and R3
DEBUG fr.ensimag.deca.tree.Assign.codeGenInst(Assign.java:99) - [Assign][codeGenInst]Left operand in assign operation is this.field
DEBUG fr.ensimag.deca.tree.Identifier.codeGenInst(Identifier.java:58) - [Identifier][codeGenInst] Loading identifier into memory with name = result
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:65) - [Identifier][loadItemintoRegister] Loading result into the register R2
DEBUG fr.ensimag.deca.tree.DeclMethod.codeGenDeclMethod(DeclMethod.java:258) - [DeclClass][codeGenMethodInitialisation] sizeStackMax = 4
DEBUG fr.ensimag.deca.codegen.ListError.activeError(ListError.java:45) - ERROR is being made to value true stack_overflow_error
DEBUG fr.ensimag.deca.tree.ListDeclClass.codeGenListClassMethod(ListDeclClass.java:80) - [ListDeclClass][codeGenListClassMethod] Code generation pass 2 classes: END
DEBUG fr.ensimag.deca.DecacCompiler.setMainProgramState(DecacCompiler.java:115) - [DecacCompiler][setMainProgramState] Seeting main state program
DEBUG fr.ensimag.deca.tree.IntLiteral.codeGenInst(IntLiteral.java:39) - [IntLiteral][codeGenInst] generating code for int literal value 7
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.IntLiteral.loadItemintoRegister(IntLiteral.java:46) - [IntLiteral][loadItemintoRegister] loading 7 into memory at register R2
DEBUG fr.ensimag.deca.tree.IntLiteral.codeGenInst(IntLiteral.java:39) - [IntLiteral][codeGenInst] generating code for int literal value 19
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.IntLiteral.loadItemintoRegister(IntLiteral.java:46) - [IntLiteral][loadItemintoRegister] loading 19 into memory at register R2
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.New.codeGenInst(New.java:63) - [New][codeGenInst] generating new for the class = Point2D
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R3
DEBUG fr.ensimag.deca.tree.New.loadItemintoRegister(New.java:72) - [New][loadItemintoRegister] loading new of calss =  Point2D into memory at register R3
DEBUG fr.ensimag.deca.codegen.ListError.activeError(ListError.java:45) - ERROR is being made to value true heap_overflow_error
DEBUG fr.ensimag.deca.tree.Assign.codeGenInst(Assign.java:63) - [Assign][codeGenInst]Left operand is =  p1
DEBUG fr.ensimag.deca.tree.Assign.codeGenInst(Assign.java:64) - [Assign][codeGenInst]Left is being stored at 3(GB)
DEBUG fr.ensimag.deca.tree.Assign.codeGenInst(Assign.java:67) - [Assign][codeGenInst] Assiging a value to p1
DEBUG fr.ensimag.deca.tree.Identifier.codeGenInst(Identifier.java:58) - [Identifier][codeGenInst] Loading identifier into memory with name = p1
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:65) - [Identifier][loadItemintoRegister] Loading p1 into the register R2
DEBUG fr.ensimag.deca.tree.IntLiteral.codeGenInst(IntLiteral.java:39) - [IntLiteral][codeGenInst] generating code for int literal value 1
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.IntLiteral.loadItemintoRegister(IntLiteral.java:46) - [IntLiteral][loadItemintoRegister] loading 1 into memory at register R2
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.codegen.ListError.activeError(ListError.java:45) - ERROR is being made to value true deref_null_error
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.New.codeGenInst(New.java:63) - [New][codeGenInst] generating new for the class = Point3D
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R3
DEBUG fr.ensimag.deca.tree.New.loadItemintoRegister(New.java:72) - [New][loadItemintoRegister] loading new of calss =  Point3D into memory at register R3
DEBUG fr.ensimag.deca.codegen.ListError.activeError(ListError.java:45) - ERROR is being made to value true heap_overflow_error
DEBUG fr.ensimag.deca.tree.Assign.codeGenInst(Assign.java:63) - [Assign][codeGenInst]Left operand is =  p3
DEBUG fr.ensimag.deca.tree.Assign.codeGenInst(Assign.java:64) - [Assign][codeGenInst]Left is being stored at 5(GB)
DEBUG fr.ensimag.deca.tree.Assign.codeGenInst(Assign.java:67) - [Assign][codeGenInst] Assiging a value to p3
DEBUG fr.ensimag.deca.tree.Identifier.codeGenInst(Identifier.java:58) - [Identifier][codeGenInst] Loading identifier into memory with name = p3
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:65) - [Identifier][loadItemintoRegister] Loading p3 into the register R2
DEBUG fr.ensimag.deca.tree.IntLiteral.codeGenInst(IntLiteral.java:39) - [IntLiteral][codeGenInst] generating code for int literal value 2
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.IntLiteral.loadItemintoRegister(IntLiteral.java:46) - [IntLiteral][loadItemintoRegister] loading 2 into memory at register R2
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.codegen.ListError.activeError(ListError.java:45) - ERROR is being made to value true deref_null_error
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.Identifier.codeGenInst(Identifier.java:58) - [Identifier][codeGenInst] Loading identifier into memory with name = p3
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R3
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:65) - [Identifier][loadItemintoRegister] Loading p3 into the register R3
DEBUG fr.ensimag.deca.tree.Assign.codeGenInst(Assign.java:63) - [Assign][codeGenInst]Left operand is =  p2
DEBUG fr.ensimag.deca.tree.Assign.codeGenInst(Assign.java:64) - [Assign][codeGenInst]Left is being stored at 4(GB)
DEBUG fr.ensimag.deca.tree.Assign.codeGenInst(Assign.java:67) - [Assign][codeGenInst] Assiging a value to p2
DEBUG fr.ensimag.deca.tree.Identifier.codeGenInst(Identifier.java:58) - [Identifier][codeGenInst] Loading identifier into memory with name = p2
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:65) - [Identifier][loadItemintoRegister] Loading p2 into the register R2
DEBUG fr.ensimag.deca.tree.IntLiteral.codeGenInst(IntLiteral.java:39) - [IntLiteral][codeGenInst] generating code for int literal value 3
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.IntLiteral.loadItemintoRegister(IntLiteral.java:46) - [IntLiteral][loadItemintoRegister] loading 3 into memory at register R2
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.codegen.ListError.activeError(ListError.java:45) - ERROR is being made to value true deref_null_error
DEBUG fr.ensimag.deca.tree.Identifier.codeGenInst(Identifier.java:58) - [Identifier][codeGenInst] Loading identifier into memory with name = p3
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:65) - [Identifier][loadItemintoRegister] Loading p3 into the register R2
DEBUG fr.ensimag.deca.codegen.ListError.activeError(ListError.java:45) - ERROR is being made to value true deref_null_error
DEBUG fr.ensimag.deca.tree.AbstractExpr.codeGenPrint(AbstractExpr.java:226) - [AbstractExpr][codeGenPrint]Method has been visited wity type int
DEBUG fr.ensimag.deca.tree.AbstractExpr.codeGenPrint(AbstractExpr.java:228) - [AbstractExpr][codeGenPrint] Priting an int
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.IntLiteral.codeGenInst(IntLiteral.java:39) - [IntLiteral][codeGenInst] generating code for int literal value 15
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:266) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R3
DEBUG fr.ensimag.deca.tree.IntLiteral.loadItemintoRegister(IntLiteral.java:46) - [IntLiteral][loadItemintoRegister] loading 15 into memory at register R3
DEBUG fr.ensimag.deca.tree.Identifier.codeGenInst(Identifier.java:58) - [Identifier][codeGenInst] Loading identifier into memory with name = p3
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:271) - [Abstractexpr][LoadGencode]  Reserving an used register with the name R2
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:65) - [Identifier][loadItemintoRegister] Loading p3 into the register R2
class fr.ensimag.deca.tree.Selection cannot be cast to class fr.ensimag.deca.tree.Identifier (fr.ensimag.deca.tree.Selection and fr.ensimag.deca.tree.Identifier are in unnamed module of loader 'app')
; -------------------------------------
;        Method Table
; -------------------------------------
	LOAD #null, R0
	STORE R0, 6(GB)
	LOAD code.Object.equals, R0
	STORE R0, 7(GB)
	LEA 6(GB), R0
	STORE R0, 8(GB)
	LOAD code.Object.equals, R0
	STORE R0, 9(GB)
	LOAD code.Point2D.diag, R0
	STORE R0, 10(GB)
	LEA 8(GB), R0
	STORE R0, 11(GB)
	LOAD code.Object.equals, R0
	STORE R0, 12(GB)
	LOAD code.Point3D.diag, R0
	STORE R0, 13(GB)
	LOAD code.Point3D.sommeElements, R0
	STORE R0, 14(GB)
	LOAD code.Point3D.mult_elements, R0
	STORE R0, 15(GB)
; -------------------------------------
;        Main program
; -------------------------------------
; Beginning of main instructions:
	LOAD #7, R2	; loading 7 into memory
	STORE R2, 1(GB)	; Initializing the variable y and loading it into memory
	LOAD #19, R2	; loading 19 into memory
	STORE R2, 2(GB)	; Initializing the variable p and loading it into memory
; --------BeginAssignOp--------[51, 4]-----
; --------StartNew--------[51, 9]-----
	NEW #3, R3
	BOV heap_overflow_error
	LEA 8(GB), R0
	STORE R0, 0(R3)
	PUSH R3
	BSR init.Point2D
	POP R3
; --------EndNew--------[51, 9]-----
	STORE R3, 3(GB)	;  Assiging a value to p1
	LOAD R3, R2	;  Return value of the assignement of =p1and storing it into R2
; --------EndAssignOp--------[51, 4]-----
	ADDSP #2
	LOAD 3(GB), R2	; loading p1 into memory
	STORE R2, 0(SP)
	LOAD #1, R2	; loading 1 into memory
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #2
	LOAD R0, R2
; --------BeginAssignOp--------[53, 4]-----
; --------StartNew--------[53, 9]-----
	NEW #5, R3
	BOV heap_overflow_error
	LEA 11(GB), R0
	STORE R0, 0(R3)
	PUSH R3
	BSR init.Point3D
	POP R3
; --------EndNew--------[53, 9]-----
	STORE R3, 5(GB)	;  Assiging a value to p3
	LOAD R3, R2	;  Return value of the assignement of =p3and storing it into R2
; --------EndAssignOp--------[53, 4]-----
	ADDSP #2
	LOAD 5(GB), R2	; loading p3 into memory
	STORE R2, 0(SP)
	LOAD #2, R2	; loading 2 into memory
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #2
	LOAD R0, R2
; --------BeginAssignOp--------[55, 4]-----
	LOAD 5(GB), R3	; loading p3 into memory
	STORE R3, 4(GB)	;  Assiging a value to p2
	LOAD R3, R2	;  Return value of the assignement of =p2and storing it into R2
; --------EndAssignOp--------[55, 4]-----
	ADDSP #2
	LOAD 4(GB), R2	; loading p2 into memory
	STORE R2, 0(SP)
	LOAD #3, R2	; loading 3 into memory
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #2
	LOAD R0, R2
	WSTR "p3.z = "
	LOAD 5(GB), R2	; loading p3 into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 3(R2), R2	; Loading the field z into a register 
	LOAD R2, R1
	WINT
	WNL
; --------BeginAssignOp--------[58, 4]-----
	LOAD #15, R3	; loading 15 into memory
	PUSH R2
	LOAD 5(GB), R2	; loading p3 into memory
	STORE R3, 2(R2)	; Saving field  y into memory
	POP R2

; -------------------------------------
;        Method Table
; -------------------------------------
	LOAD #null, R0
	STORE R0, 6(GB)
	LOAD code.Object.equals, R0
	STORE R0, 7(GB)
	LEA 6(GB), R0
	STORE R0, 8(GB)
	LOAD code.Object.equals, R0
	STORE R0, 9(GB)
	LOAD code.Point2D.diag, R0
	STORE R0, 10(GB)
	LEA 8(GB), R0
	STORE R0, 11(GB)
	LOAD code.Object.equals, R0
	STORE R0, 12(GB)
	LOAD code.Point3D.diag, R0
	STORE R0, 13(GB)
	LOAD code.Point3D.sommeElements, R0
	STORE R0, 14(GB)
	LOAD code.Point3D.mult_elements, R0
	STORE R0, 15(GB)
; -------------------------------------
;        Main program
; -------------------------------------
; Beginning of main instructions:
	LOAD #7, R2	; loading 7 into memory
	STORE R2, 1(GB)	; Initializing the variable y and loading it into memory
	LOAD #19, R2	; loading 19 into memory
	STORE R2, 2(GB)	; Initializing the variable p and loading it into memory
; --------BeginAssignOp--------[51, 4]-----
; --------StartNew--------[51, 9]-----
	NEW #3, R3
	BOV heap_overflow_error
	LEA 8(GB), R0
	STORE R0, 0(R3)
	PUSH R3
	BSR init.Point2D
	POP R3
; --------EndNew--------[51, 9]-----
	STORE R3, 3(GB)	;  Assiging a value to p1
	LOAD R3, R2	;  Return value of the assignement of =p1and storing it into R2
; --------EndAssignOp--------[51, 4]-----
	ADDSP #2
	LOAD 3(GB), R2	; loading p1 into memory
	STORE R2, 0(SP)
	LOAD #1, R2	; loading 1 into memory
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #2
	LOAD R0, R2
; --------BeginAssignOp--------[53, 4]-----
; --------StartNew--------[53, 9]-----
	NEW #5, R3
	BOV heap_overflow_error
	LEA 11(GB), R0
	STORE R0, 0(R3)
	PUSH R3
	BSR init.Point3D
	POP R3
; --------EndNew--------[53, 9]-----
	STORE R3, 5(GB)	;  Assiging a value to p3
	LOAD R3, R2	;  Return value of the assignement of =p3and storing it into R2
; --------EndAssignOp--------[53, 4]-----
	ADDSP #2
	LOAD 5(GB), R2	; loading p3 into memory
	STORE R2, 0(SP)
	LOAD #2, R2	; loading 2 into memory
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #2
	LOAD R0, R2
; --------BeginAssignOp--------[55, 4]-----
	LOAD 5(GB), R3	; loading p3 into memory
	STORE R3, 4(GB)	;  Assiging a value to p2
	LOAD R3, R2	;  Return value of the assignement of =p2and storing it into R2
; --------EndAssignOp--------[55, 4]-----
	ADDSP #2
	LOAD 4(GB), R2	; loading p2 into memory
	STORE R2, 0(SP)
	LOAD #3, R2	; loading 3 into memory
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #2
	LOAD R0, R2
	WSTR "p3.z = "
	LOAD 5(GB), R2	; loading p3 into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 3(R2), R2	; Loading the field z into a register 
	LOAD R2, R1
	WINT
	WNL
; --------BeginAssignOp--------[58, 4]-----
	LOAD #15, R3	; loading 15 into memory
	PUSH R2
	LOAD 5(GB), R2	; loading p3 into memory
	STORE R3, 2(R2)	; Saving field  y into memory
	POP R2

