	TSTO #19
	BOV stack_overflow_error
	ADDSP #15
; start main program
; -------------------------------------
;        Method Table
; -------------------------------------
	LOAD #null, R0
	STORE R0, 6(GB)
	LOAD code.Object.equals, R0
	STORE R0, 7(GB)
	LEA 6(GB), R0
	STORE R0, 8(GB)
	LOAD code.Object.equals, R0
	STORE R0, 9(GB)
	LOAD code.Point2D.diag, R0
	STORE R0, 10(GB)
	LEA 8(GB), R0
	STORE R0, 11(GB)
	LOAD code.Object.equals, R0
	STORE R0, 12(GB)
	LOAD code.Point3D.diag, R0
	STORE R0, 13(GB)
	LOAD code.Point3D.sommeElements, R0
	STORE R0, 14(GB)
	LOAD code.Point3D.mult_elements, R0
	STORE R0, 15(GB)
; -------------------------------------
;        Main program
; -------------------------------------
; Beginning of main instructions:
	LOAD #7, R2	; loading 7 into memory
	STORE R2, 1(GB)	; Initializing the variable y and loading it into memory
	LOAD #19, R2	; loading 19 into memory
	STORE R2, 2(GB)	; Initializing the variable p and loading it into memory
; --------BeginAssignOp--------[53, 4]-----
; --------StartNew--------[53, 9]-----
; [New][loadItemintoRegister] loading new of calss =  Point2D into memory at register R3
	NEW #3, R3
	BOV heap_overflow_error
	LEA 8(GB), R0
	STORE R0, 0(R3)
	PUSH R3
	BSR init.Point2D
	POP R3
; --------EndNew--------[53, 9]-----
	STORE R3, 3(GB)	;  Assiging a value to p1
	LOAD R3, R2	;  Return value of the assignement of =p1and storing it into R2
; --------EndAssignOp--------[53, 4]-----
; --------BeginMethodCall--------[54, 4]-----
	ADDSP #2
	LOAD 3(GB), R2	; loading p1 into memory
	STORE R2, 0(SP)
	LOAD #1, R2	; loading 1 into memory
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 2(R2)
	LOAD R0, R2
	SUBSP #2
; --------EndMethodCall--------[54, 4]-----
; --------BeginAssignOp--------[55, 4]-----
; --------StartNew--------[55, 9]-----
; [New][loadItemintoRegister] loading new of calss =  Point3D into memory at register R3
	NEW #5, R3
	BOV heap_overflow_error
	LEA 11(GB), R0
	STORE R0, 0(R3)
	PUSH R3
	BSR init.Point3D
	POP R3
; --------EndNew--------[55, 9]-----
	STORE R3, 5(GB)	;  Assiging a value to p3
	LOAD R3, R2	;  Return value of the assignement of =p3and storing it into R2
; --------EndAssignOp--------[55, 4]-----
; --------BeginMethodCall--------[56, 4]-----
	ADDSP #2
	LOAD 5(GB), R2	; loading p3 into memory
	STORE R2, 0(SP)
	LOAD #2, R2	; loading 2 into memory
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 2(R2)
	LOAD R0, R2
	SUBSP #2
; --------EndMethodCall--------[56, 4]-----
; --------BeginAssignOp--------[57, 4]-----
	LOAD 5(GB), R3	; loading p3 into memory
	STORE R3, 4(GB)	;  Assiging a value to p2
	LOAD R3, R2	;  Return value of the assignement of =p2and storing it into R2
; --------EndAssignOp--------[57, 4]-----
; --------BeginMethodCall--------[58, 4]-----
	ADDSP #2
	LOAD 4(GB), R2	; loading p2 into memory
	STORE R2, 0(SP)
	LOAD #3, R2	; loading 3 into memory
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 2(R2)
	LOAD R0, R2
	SUBSP #2
; --------EndMethodCall--------[58, 4]-----
	WSTR "p3.z = "
; --------BeginSelection--------[59, 23]-----
	LOAD 5(GB), R2	; loading p3 into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 3(R2), R2	; Loading the field z into a register 
; --------BeginSelection--------[59, 23]-----
	LOAD R2, R1
	WINT
	WNL
; --------BeginAssignOp--------[60, 4]-----
	LOAD #15, R3	; loading 15 into memory
	PUSH R2
	LOAD 5(GB), R2	; loading p3 into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	STORE R3, 2(R2)	; Saving field  y into memory
	POP R2
	LOAD R3, R2	;  Return value of the assignement of =yand storing it into R2
; --------EndAssignOp--------[60, 4]-----
	WSTR "p3.y = "
; --------BeginSelection--------[61, 23]-----
	LOAD 5(GB), R2	; loading p3 into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 2(R2), R2	; Loading the field y into a register 
; --------BeginSelection--------[61, 23]-----
	LOAD R2, R1
	WINT
	WNL
	WSTR "sommeElements = "
; --------BeginMethodCall--------[62, 32]-----
	ADDSP #4
	LOAD 5(GB), R2	; loading p3 into memory
	STORE R2, 0(SP)
	LOAD 1(GB), R2	; loading y into memory
	STORE R2, -1(SP)
	LOAD 2(GB), R2	; loading p into memory
	STORE R2, -2(SP)
	LOAD #8, R2	; loading 8 into memory
	STORE R2, -3(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 3(R2)
	LOAD R0, R2
	SUBSP #4
; --------EndMethodCall--------[62, 32]-----
	LOAD R2, R1
	WINT
	WNL
	WSTR "mult_elements = "
; --------BeginMethodCall--------[63, 32]-----
	ADDSP #3
	LOAD 5(GB), R2	; loading p3 into memory
	STORE R2, 0(SP)
	LOAD 1(GB), R2	; loading y into memory
	STORE R2, -1(SP)
	LOAD #0x1.0p3, R2	; loading 8.0 into memory
	STORE R2, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 4(R2)
	LOAD R0, R2
	SUBSP #3
; --------EndMethodCall--------[63, 32]-----
	LOAD R2, R1
	WINT
	WNL
	HALT
; -------------------------------------
;        Classes
; -------------------------------------
; ---------------------------------------------------
; ----------------- class : Point2D -------------------
; ---------------------------------------------------
; ------------Init method for class = Point2D--------
init.Point2D:
	LOAD #0, R0	; loading 0  into memory to initialize field to 0
	LOAD -2(LB), R1	; loading class (this) into memory when working with field x
	STORE R0, 1(R1)	; Saving field  x into memory
	LOAD #0, R0	; loading 0  into memory to initialize field to 0
	LOAD -2(LB), R1	; loading class (this) into memory when working with field y
	STORE R0, 2(R1)	; Saving field  y into memory
	RTS
; ------------Code for method : diag with label =  code.Point2D.diag--------
code.Point2D.diag:
	TSTO #2
	BOV stack_overflow_error
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------BeginAssignOp--------[18, 8]-----
; --------StartBinaryOp--------[18, 12]-----
	LOAD -2(LB), R3	; loading the class of the field x into memory
	LOAD 1(R3), R3	; loading x into memory
	ADD -3(LB), R3
; --------EndBinaryOp--------[18, 12]-----
	LOAD -2(LB), R2	; loading parent class =  Point2D into memory when working with field x
	STORE R3, 1(R2)	; Saving field  x into memory
	LOAD R3, R2	;  Return value of the assignement of =xand storing it into R2
; --------EndAssignOp--------[18, 8]-----
; --------BeginAssignOp--------[19, 8]-----
; --------StartBinaryOp--------[19, 12]-----
	LOAD -2(LB), R3	; loading the class of the field y into memory
	LOAD 2(R3), R3	; loading y into memory
	ADD -3(LB), R3
; --------EndBinaryOp--------[19, 12]-----
	LOAD -2(LB), R2	; loading parent class =  Point2D into memory when working with field y
	STORE R3, 2(R2)	; Saving field  y into memory
	LOAD R3, R2	;  Return value of the assignement of =yand storing it into R2
; --------EndAssignOp--------[19, 8]-----
fin.Point2D.diag:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ---------------------------------------------------
; ----------------- class : Point3D -------------------
; ---------------------------------------------------
; ------------Init method for class = Point3D--------
init.Point3D:
	TSTO #5
	BOV stack_overflow_error
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
	LOAD -2(LB), R0	; Placing the current class = Point3D adresse in the the stack before calling parent 
	PUSH R0	; Placing this = Point3D into the stack
	BSR init.Point2D	; Calling the initialisation method of parent classPoint2D
	SUBSP #1
	LOAD #0, R0	; loading 0  into memory to initialize field to 0
	LOAD -2(LB), R1	; loading class (this) into memory when working with field z
	STORE R0, 3(R1)	; Saving field  z into memory
	LOAD #0, R0	; loading 0  into memory to initialize field to 0
	LOAD -2(LB), R1	; loading class (this) into memory when working with field e
	STORE R0, 4(R1)	; Saving field  e into memory
	LOAD -2(LB), R2	; [codeGenDelField][initialization] loading class (this) into memory when working with field e
; --------BeginSelection--------[25, 12]-----
	LOAD -2(LB), R3
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 3(R3), R3	; Loading the field z into a register 
; --------BeginSelection--------[25, 12]-----
	STORE R3, 4(R2)	; Initializing the field e and loading it into memory
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : diag with label =  code.Point3D.diag--------
code.Point3D.diag:
	TSTO #2
	BOV stack_overflow_error
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------BeginAssignOp--------[30, 8]-----
; --------StartBinaryOp--------[30, 12]-----
	LOAD -2(LB), R3	; loading the class of the field x into memory
	LOAD 1(R3), R3	; loading x into memory
	ADD -3(LB), R3
; --------EndBinaryOp--------[30, 12]-----
	LOAD -2(LB), R2	; loading parent class =  Point2D into memory when working with field x
	STORE R3, 1(R2)	; Saving field  x into memory
	LOAD R3, R2	;  Return value of the assignement of =xand storing it into R2
; --------EndAssignOp--------[30, 8]-----
; --------BeginAssignOp--------[31, 8]-----
; --------StartBinaryOp--------[31, 12]-----
	LOAD -2(LB), R3	; loading the class of the field y into memory
	LOAD 2(R3), R3	; loading y into memory
	ADD -3(LB), R3
; --------EndBinaryOp--------[31, 12]-----
	LOAD -2(LB), R2	; loading parent class =  Point2D into memory when working with field y
	STORE R3, 2(R2)	; Saving field  y into memory
	LOAD R3, R2	;  Return value of the assignement of =yand storing it into R2
; --------EndAssignOp--------[31, 8]-----
; --------BeginAssignOp--------[32, 8]-----
; --------StartBinaryOp--------[32, 12]-----
	LOAD -2(LB), R3	; loading the class of the field z into memory
	LOAD 3(R3), R3	; loading z into memory
	ADD -3(LB), R3
; --------EndBinaryOp--------[32, 12]-----
	LOAD -2(LB), R2	; loading parent class =  Point3D into memory when working with field z
	STORE R3, 3(R2)	; Saving field  z into memory
	LOAD R3, R2	;  Return value of the assignement of =zand storing it into R2
; --------EndAssignOp--------[32, 8]-----
fin.Point3D.diag:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : sommeElements with label =  code.Point3D.sommeElements--------
code.Point3D.sommeElements:
	TSTO #3
	BOV stack_overflow_error
	ADDSP #1
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------StartBinaryOp--------[35, 16]-----
; --------StartBinaryOp--------[35, 16]-----
; --------StartBinaryOp--------[35, 16]-----
; --------StartBinaryOp--------[35, 16]-----
	LOAD -3(LB), R2	; loading a into memory
	ADD -4(LB), R2
; --------EndBinaryOp--------[35, 16]-----
	ADD -5(LB), R2
; --------EndBinaryOp--------[35, 16]-----
	LOAD -2(LB), R3	; loading the class of the field x into memory
	LOAD 1(R3), R3	; loading x into memory
	ADD R3, R2
; --------EndBinaryOp--------[35, 16]-----
	LOAD -2(LB), R3	; loading the class of the field y into memory
	LOAD 2(R3), R3	; loading y into memory
	ADD R3, R2
; --------EndBinaryOp--------[35, 16]-----
	STORE R2, 1(LB)	; Initializing the variable l and loading it into memory
	LOAD 1(LB), R2	; loading l into memory
	LOAD R2, R0
	BRA fin.Point3D.sommeElements
	WSTR "Error: La méthode code.Point3D.sommeElements doit retourner un element"
	WNL
	ERROR
fin.Point3D.sommeElements:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : mult_elements with label =  code.Point3D.mult_elements--------
code.Point3D.mult_elements:
	TSTO #4
	BOV stack_overflow_error
	ADDSP #1
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------BeginAssignOp--------[41, 8]-----
	LOAD -3(LB), R3	; loading a into memory
	LOAD -2(LB), R2	; loading parent class =  Point3D into memory when working with field e
	STORE R3, 4(R2)	; Saving field  e into memory
	LOAD R3, R2	;  Return value of the assignement of this . = e and storing it into R2
; --------EndAssignOp--------[41, 8]-----
; --------BeginAssignOp--------[42, 8]-----
; --------StartBinaryOp--------[42, 17]-----
; --------BeginSelection--------[42, 17]-----
	LOAD -2(LB), R3
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 4(R3), R3	; Loading the field e into a register 
; --------BeginSelection--------[42, 17]-----
	PUSH R2
	LOAD -4(LB), R2	; loading t into memory
	INT R2, R2
	MUL R2, R3
	POP R2
; --------EndBinaryOp--------[42, 17]-----
	STORE R3, 1(LB)	;  Assiging a value to result
	LOAD R3, R2	;  Return value of the assignement of =resultand storing it into R2
; --------EndAssignOp--------[42, 8]-----
	LOAD 1(LB), R2	; loading result into memory
	LOAD R2, R0
	BRA fin.Point3D.mult_elements
	WSTR "Error: La méthode code.Point3D.mult_elements doit retourner un element"
	WNL
	ERROR
fin.Point3D.mult_elements:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; -------------------------------------
;        Method equal
; -------------------------------------
; ------------------Start generateCodeForObjectEquals location:
code.Object.equals:
	LOAD -2(LB), R0
	CMP -3(LB), R0
	SEQ R0	; Comparaison this et paramètre d'equals
fin.Object.equals:
	RTS
init.Object:
	RTS
; -------------------------------------
;        Liste Erreur
; -------------------------------------
deref_null_error:
	WSTR "Error: deref_null_error"
	WNL
	ERROR
heap_overflow_error:
	WSTR "Error: heap_overflow_error"
	WNL
	ERROR
stack_overflow_error:
	WSTR "Error: stack_overflow_error"
	WNL
	ERROR
; end main program
