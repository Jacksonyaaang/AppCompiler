	TSTO #13
	BOV stack_overflow_error
	ADDSP #10
; start main program
; -------------------------------------
;        Method Table
; -------------------------------------
	LOAD #null, R0
	STORE R0, 3(GB)
	LOAD code.Object.equals, R0
	STORE R0, 4(GB)
	LEA 3(GB), R0
	STORE R0, 5(GB)
	LOAD code.Object.equals, R0
	STORE R0, 6(GB)
	LOAD code.B.f, R0
	STORE R0, 7(GB)
	LEA 3(GB), R0
	STORE R0, 8(GB)
	LOAD code.Object.equals, R0
	STORE R0, 9(GB)
	LOAD code.A.f, R0
	STORE R0, 10(GB)
; -------------------------------------
;        Main program
; -------------------------------------
; Beginning of main instructions:
; --------StartNew--------[22, 8]-----
; [New][loadItemintoRegister] loading new of calss =  B into memory at register R2
	NEW #2, R2
	BOV heap_overflow_error
	LEA 5(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.B
	POP R2
; --------EndNew--------[22, 8]-----
	STORE R2, 1(GB)	; Initializing the variable b and loading it into memory
; --------StartNew--------[23, 12]-----
; [New][loadItemintoRegister] loading new of calss =  A into memory at register R2
	NEW #2, R2
	BOV heap_overflow_error
	LEA 8(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.A
	POP R2
; --------EndNew--------[23, 12]-----
	STORE R2, 2(GB)	; Initializing the variable a1 and loading it into memory
; --------BeginAssignOp--------[25, 4]-----
	LOAD #null, R3	; loading 0 into the register for null expr
	STORE R3, 1(GB)	;  Assiging a value to b
	LOAD R3, R2	;  Return value of the assignement of =band storing it into R2
; --------EndAssignOp--------[25, 4]-----
	HALT
; -------------------------------------
;        Classes
; -------------------------------------
; ---------------------------------------------------
; ----------------- class : B -------------------
; ---------------------------------------------------
; ------------Init method for class = B--------
init.B:
	LOAD #0, R0	; loading 0  into memory to initialize field to 0
	LOAD -2(LB), R1	; loading class (this) into memory when working with field x
	STORE R0, 1(R1)	; Saving field  x into memory
	RTS
; ------------Code for method : f with label =  code.B.f--------
code.B.f:
;  ---------ClassBodyCodeGeneration------
	WSTR "Error: La méthode code.B.f doit retourner un element"
	WNL
	ERROR
fin.B.f:
	RTS
; ---------------------------------------------------
; ----------------- class : A -------------------
; ---------------------------------------------------
; ------------Init method for class = A--------
init.A:
	LOAD #0, R0	; loading 0  into memory to initialize field to 0
	LOAD -2(LB), R1	; loading class (this) into memory when working with field b
	STORE R0, 1(R1)	; Saving field  b into memory
	RTS
; ------------Code for method : f with label =  code.A.f--------
code.A.f:
;  ---------ClassBodyCodeGeneration------
	WSTR "Error: La méthode code.A.f doit retourner un element"
	WNL
	ERROR
fin.A.f:
	RTS
; -------------------------------------
;        Method equal
; -------------------------------------
; ------------------Start generateCodeForObjectEquals location:
code.Object.equals:
	LOAD -2(LB), R0
	CMP -3(LB), R0
	SEQ R0	; Comparaison this et paramètre d'equals
fin.Object.equals:
	RTS
init.Object:
	RTS
; -------------------------------------
;        Liste Erreur
; -------------------------------------
heap_overflow_error:
	WSTR "Error: heap_overflow_error"
	WNL
	ERROR
stack_overflow_error:
	WSTR "Error: stack_overflow_error"
	WNL
	ERROR
; end main program
