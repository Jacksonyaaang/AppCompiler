	TSTO #12
	BOV stack_overflow_error
	ADDSP #12
; start main program
; Main program
; Beginning of main instructions:
	LOAD #2, R2	; loading 2 into memory
	STORE R2, 1(GB)	; Initializing the variable x and loading it into memory
	LOAD #2, R2	; loading 2 into memory
	STORE R2, 2(GB)	; Initializing the variable y and loading it into memory
	LOAD #2, R2	; loading 2 into memory
	STORE R2, 3(GB)	; Initializing the variable z and loading it into memory
	LOAD #2, R2	; loading 2 into memory
	STORE R2, 4(GB)	; Initializing the variable h and loading it into memory
	LOAD #2, R2	; loading 2 into memory
	STORE R2, 5(GB)	; Initializing the variable v and loading it into memory
	LOAD #1, R2	; loading true into memory
	STORE R2, 6(GB)	; Initializing the variable b1 and loading it into memory
	LOAD #1, R2	; loading true into memory
	STORE R2, 7(GB)	; Initializing the variable b2 and loading it into memory
	LOAD #0, R2	; loading false into memory
	STORE R2, 8(GB)	; Initializing the variable b3 and loading it into memory
	LOAD #0, R2	; loading false into memory
	STORE R2, 9(GB)	; Initializing the variable b4 and loading it into memory
; --------StartAND--------[20, 7]-----
; --------StartAND--------[20, 8]-----
; --------StartBinaryOp--------[20, 8]-----
	LOAD 1(GB), R2	; loading x into memory
	LOAD #2, R3	; loading 2 into memory
	CMP R3, R2	; Comparing registers for LowerOrEqual operation 
	SLE R2	; Placing LowerOrEqual result into the register  
; --------EndBinaryOp--------[20, 8]-----
	CMP #0, R2	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_2	; [AND] checking if the first element is false
; --------StartOr--------[20, 17]-----
; --------StartBinaryOp--------[20, 17]-----
	LOAD 2(GB), R3	; loading y into memory
	CMP 3(GB), R3	; Comparing registers for NotEquals operation 
	SNE R3	; Placing NotEquals result into the register  
; --------EndBinaryOp--------[20, 17]-----
	CMP #1, R3	; [Or]Comparing in the left branch 
	BEQ End_Or_Id_3	; [Or] checking if the first element is false
; --------StartBinaryOp--------[20, 27]-----
	PUSH R2
	LOAD 4(GB), R2	; loading h into memory
	CMP 5(GB), R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[20, 27]-----
	CMP #0, R2	; [Or]Comparing in the right branch 
	BEQ End_Or_Id_3	; [OR] checking if the second element is true 
	LOAD #1, R3	; Or is true , We place the value 1 in the return Register
	POP R2
End_Or_Id_3:
; --------EndOr--------[20, 17]-----
	CMP #0, R3	; [AND]Comparing in the right branch 
	BNE AND_Success_id2	; [AND] checking if the first element is true
End_And_False_Id_2:
	LOAD #0, R2	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id2	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id2:
QUIT_AND_Called_When_Fail_id2:
; --------EndAND--------[20, 8]-----
	CMP #0, R2	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_1	; [AND] checking if the first element is false
; --------StartAND--------[20, 36]-----
; --------StartAND--------[20, 36]-----
; --------StartAND--------[20, 36]-----
; --------StartAND--------[20, 36]-----
; --------StartAND--------[20, 36]-----
; --------StartAND--------[20, 37]-----
; --------StartBinaryOp--------[20, 37]-----
	LOAD #3, R3	; loading 3 into memory
	CMP 1(GB), R3	; Comparing registers for Greater operation 
	SGT R3	; Placing Greater result into the register  
; --------EndBinaryOp--------[20, 37]-----
	CMP #0, R3	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_9	; [AND] checking if the first element is false
; --------StartBinaryOp--------[20, 44]-----
	PUSH R2
	LOAD #0x1.4p1, R2	; loading 2.5 into memory
	PUSH R3
	LOAD 2(GB), R3	; loading y into memory
	FLOAT R3, R3	; Doing an unary minus
	CMP R3, R2	; Comparing registers for Greater operation 
	SGT R2	; Placing Greater result into the register  
	POP R3
; --------EndBinaryOp--------[20, 44]-----
	CMP #0, R2	; [AND]Comparing in the right branch 
	BNE AND_Success_id9	; [AND] checking if the first element is true
End_And_False_Id_9:
	LOAD #0, R3	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id9	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id9:
	POP R2
QUIT_AND_Called_When_Fail_id9:
; --------EndAND--------[20, 37]-----
	CMP #0, R3	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_8	; [AND] checking if the first element is false
; --------StartAND--------[20, 56]-----
; --------StartBinaryOp--------[20, 56]-----
	PUSH R2
	LOAD #0x1.0p1, R2	; loading 2.0 into memory
	PUSH R3
	LOAD 2(GB), R3	; loading y into memory
	FLOAT R3, R3	; Doing an unary minus
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
	POP R3
; --------EndBinaryOp--------[20, 56]-----
	CMP #0, R2	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_10	; [AND] checking if the first element is false
; --------StartBinaryOp--------[20, 66]-----
	PUSH R3
	LOAD 5(GB), R3	; loading v into memory
	CMP 4(GB), R3	; Comparing registers for Equals operation 
	SEQ R3	; Placing Equals result into the register  
; --------EndBinaryOp--------[20, 66]-----
	CMP #0, R3	; [AND]Comparing in the right branch 
	BNE AND_Success_id10	; [AND] checking if the first element is true
End_And_False_Id_10:
	LOAD #0, R2	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id10	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id10:
	POP R3
QUIT_AND_Called_When_Fail_id10:
; --------EndAND--------[20, 56]-----
	CMP #0, R2	; [AND]Comparing in the right branch 
	BNE AND_Success_id8	; [AND] checking if the first element is true
End_And_False_Id_8:
	LOAD #0, R3	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id8	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id8:
	POP R2
QUIT_AND_Called_When_Fail_id8:
; --------EndAND--------[20, 36]-----
	CMP #0, R3	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_7	; [AND] checking if the first element is false
	PUSH R2
	LOAD 6(GB), R2	; loading b1 into memory
	CMP #0, R2	; [AND]Comparing in the right branch 
	BNE AND_Success_id7	; [AND] checking if the first element is true
End_And_False_Id_7:
	LOAD #0, R3	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id7	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id7:
	POP R2
QUIT_AND_Called_When_Fail_id7:
; --------EndAND--------[20, 36]-----
	CMP #0, R3	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_6	; [AND] checking if the first element is false
	PUSH R2
	LOAD 7(GB), R2	; loading b2 into memory
	CMP #0, R2	; [AND]Comparing in the right branch 
	BNE AND_Success_id6	; [AND] checking if the first element is true
End_And_False_Id_6:
	LOAD #0, R3	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id6	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id6:
	POP R2
QUIT_AND_Called_When_Fail_id6:
; --------EndAND--------[20, 36]-----
	CMP #0, R3	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_5	; [AND] checking if the first element is false
	PUSH R2
	LOAD 8(GB), R2	; loading b3 into memory
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; [AND]Comparing in the right branch 
	BNE AND_Success_id5	; [AND] checking if the first element is true
End_And_False_Id_5:
	LOAD #0, R3	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id5	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id5:
	POP R2
QUIT_AND_Called_When_Fail_id5:
; --------EndAND--------[20, 36]-----
	CMP #0, R3	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_4	; [AND] checking if the first element is false
	PUSH R2
	LOAD 9(GB), R2	; loading b4 into memory
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; [AND]Comparing in the right branch 
	BNE AND_Success_id4	; [AND] checking if the first element is true
End_And_False_Id_4:
	LOAD #0, R3	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id4	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id4:
	POP R2
QUIT_AND_Called_When_Fail_id4:
; --------EndAND--------[20, 36]-----
	CMP #0, R3	; [AND]Comparing in the right branch 
	BNE AND_Success_id1	; [AND] checking if the first element is true
End_And_False_Id_1:
	LOAD #0, R2	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id1	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id1:
QUIT_AND_Called_When_Fail_id1:
; --------EndAND--------[20, 7]-----
; ---------Startif-----------[20, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else1
	WSTR "bool val = true"
	WNL
	BRA end_ifthenelse_1
else1:
	WSTR "Problem with code"
	WNL
end_ifthenelse_1:
; ---------Endif-----------
; --------StartAND--------[26, 7]-----
; --------StartAND--------[26, 8]-----
; --------StartBinaryOp--------[26, 8]-----
	LOAD 1(GB), R2	; loading x into memory
	LOAD #5, R3	; loading 5 into memory
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[26, 8]-----
	CMP #0, R2	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_12	; [AND] checking if the first element is false
; --------StartOr--------[26, 16]-----
; --------StartBinaryOp--------[26, 16]-----
	LOAD 2(GB), R3	; loading y into memory
	CMP 3(GB), R3	; Comparing registers for NotEquals operation 
	SNE R3	; Placing NotEquals result into the register  
; --------EndBinaryOp--------[26, 16]-----
	CMP #1, R3	; [Or]Comparing in the left branch 
	BEQ End_Or_Id_13	; [Or] checking if the first element is false
; --------StartBinaryOp--------[26, 26]-----
	PUSH R2
	LOAD 4(GB), R2	; loading h into memory
	CMP 5(GB), R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[26, 26]-----
	CMP #0, R2	; [Or]Comparing in the right branch 
	BEQ End_Or_Id_13	; [OR] checking if the second element is true 
	LOAD #1, R3	; Or is true , We place the value 1 in the return Register
	POP R2
End_Or_Id_13:
; --------EndOr--------[26, 16]-----
	CMP #0, R3	; [AND]Comparing in the right branch 
	BNE AND_Success_id12	; [AND] checking if the first element is true
End_And_False_Id_12:
	LOAD #0, R2	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id12	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id12:
QUIT_AND_Called_When_Fail_id12:
; --------EndAND--------[26, 8]-----
	CMP #0, R2	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_11	; [AND] checking if the first element is false
; --------StartAND--------[26, 35]-----
; --------StartAND--------[26, 35]-----
; --------StartAND--------[26, 35]-----
; --------StartAND--------[26, 35]-----
; --------StartAND--------[26, 35]-----
; --------StartAND--------[26, 36]-----
; --------StartBinaryOp--------[26, 36]-----
	LOAD #3, R3	; loading 3 into memory
	CMP 1(GB), R3	; Comparing registers for Greater operation 
	SGT R3	; Placing Greater result into the register  
; --------EndBinaryOp--------[26, 36]-----
	CMP #0, R3	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_19	; [AND] checking if the first element is false
; --------StartBinaryOp--------[26, 43]-----
	PUSH R2
	LOAD #0x1.4p1, R2	; loading 2.5 into memory
	PUSH R3
	LOAD 2(GB), R3	; loading y into memory
	FLOAT R3, R3	; Doing an unary minus
	CMP R3, R2	; Comparing registers for Greater operation 
	SGT R2	; Placing Greater result into the register  
	POP R3
; --------EndBinaryOp--------[26, 43]-----
	CMP #0, R2	; [AND]Comparing in the right branch 
	BNE AND_Success_id19	; [AND] checking if the first element is true
End_And_False_Id_19:
	LOAD #0, R3	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id19	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id19:
	POP R2
QUIT_AND_Called_When_Fail_id19:
; --------EndAND--------[26, 36]-----
	CMP #0, R3	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_18	; [AND] checking if the first element is false
; --------StartAND--------[26, 55]-----
; --------StartBinaryOp--------[26, 55]-----
	PUSH R2
	LOAD #0x1.0p1, R2	; loading 2.0 into memory
	PUSH R3
	LOAD 2(GB), R3	; loading y into memory
	FLOAT R3, R3	; Doing an unary minus
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
	POP R3
; --------EndBinaryOp--------[26, 55]-----
	CMP #0, R2	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_20	; [AND] checking if the first element is false
; --------StartBinaryOp--------[26, 65]-----
	PUSH R3
	LOAD 5(GB), R3	; loading v into memory
	FLOAT R3, R3	; Doing an unary minus
	PUSH R2
	LOAD #0x1.4p2, R2	; loading 5.0 into memory
	CMP R2, R3	; Comparing registers for Lower operation 
	SLT R3	; Placing Lower result into the register  
	POP R2
; --------EndBinaryOp--------[26, 65]-----
	CMP #0, R3	; [AND]Comparing in the right branch 
	BNE AND_Success_id20	; [AND] checking if the first element is true
End_And_False_Id_20:
	LOAD #0, R2	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id20	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id20:
	POP R3
QUIT_AND_Called_When_Fail_id20:
; --------EndAND--------[26, 55]-----
	CMP #0, R2	; [AND]Comparing in the right branch 
	BNE AND_Success_id18	; [AND] checking if the first element is true
End_And_False_Id_18:
	LOAD #0, R3	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id18	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id18:
	POP R2
QUIT_AND_Called_When_Fail_id18:
; --------EndAND--------[26, 35]-----
	CMP #0, R3	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_17	; [AND] checking if the first element is false
	PUSH R2
	LOAD 6(GB), R2	; loading b1 into memory
	CMP #0, R2	; [AND]Comparing in the right branch 
	BNE AND_Success_id17	; [AND] checking if the first element is true
End_And_False_Id_17:
	LOAD #0, R3	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id17	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id17:
	POP R2
QUIT_AND_Called_When_Fail_id17:
; --------EndAND--------[26, 35]-----
	CMP #0, R3	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_16	; [AND] checking if the first element is false
	PUSH R2
	LOAD 7(GB), R2	; loading b2 into memory
	CMP #0, R2	; [AND]Comparing in the right branch 
	BNE AND_Success_id16	; [AND] checking if the first element is true
End_And_False_Id_16:
	LOAD #0, R3	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id16	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id16:
	POP R2
QUIT_AND_Called_When_Fail_id16:
; --------EndAND--------[26, 35]-----
	CMP #0, R3	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_15	; [AND] checking if the first element is false
	PUSH R2
	LOAD 8(GB), R2	; loading b3 into memory
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; [AND]Comparing in the right branch 
	BNE AND_Success_id15	; [AND] checking if the first element is true
End_And_False_Id_15:
	LOAD #0, R3	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id15	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id15:
	POP R2
QUIT_AND_Called_When_Fail_id15:
; --------EndAND--------[26, 35]-----
	CMP #0, R3	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_14	; [AND] checking if the first element is false
	PUSH R2
	LOAD 9(GB), R2	; loading b4 into memory
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
	CMP #0, R2	; [AND]Comparing in the right branch 
	BNE AND_Success_id14	; [AND] checking if the first element is true
End_And_False_Id_14:
	LOAD #0, R3	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id14	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id14:
	POP R2
QUIT_AND_Called_When_Fail_id14:
; --------EndAND--------[26, 35]-----
	CMP #0, R3	; [AND]Comparing in the right branch 
	BNE AND_Success_id11	; [AND] checking if the first element is true
End_And_False_Id_11:
	LOAD #0, R2	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id11	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id11:
QUIT_AND_Called_When_Fail_id11:
; --------EndAND--------[26, 7]-----
; ---------Startif-----------[26, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else2
	WSTR "bool val = true"
	WNL
	BRA end_ifthenelse_2
else2:
	WSTR "Problem with code"
	WNL
end_ifthenelse_2:
; ---------Endif-----------
	HALT
stack_overflow_error:
	WSTR "Error: stack_overflow_error"
	WNL
	ERROR
; end main program
