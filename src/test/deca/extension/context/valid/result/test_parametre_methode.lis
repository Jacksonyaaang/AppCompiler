DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:38) - [MethodDefinition][setLabel] Initialising label value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with code.Object.equals
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:46) - verify program: start
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:48) - Register unit management unit is null
DEBUG fr.ensimag.deca.DecacCompiler.saveMainProgramState(DecacCompiler.java:128) - [DecacCompiler][saveMainProgramState] Saving state main program
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:36) - [ListDeclClass][verifyListClass] verify listClass pass 1: START
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:40) - [ListDeclClass][verifyListClass] verify listClass pass 1: END
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassMembers(ListDeclClass.java:48) - [ListDeclClass][verifyListClassMembers] verify listClass pass 2: START
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyListDeclField(ListDeclField.java:54) - [ListDeclField][verifyListDeclField]
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:32) - [ListDeclMethod][verifyListDeclMethod]
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : sommeFloatFloat1D
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  sommeFloatFloat1D
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : table1
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter table1 into -3(LB)
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : table2
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter table2 into -4(LB)
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:136) - [DeclMethod][verifyDecleMethod] Method = sommeFloatFloat1D does not exists, adding a new one to the local env with index 2
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : setFloat1DTable
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  setFloat1DTable
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : table
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter table into -3(LB)
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : value
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter value into -4(LB)
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:136) - [DeclMethod][verifyDecleMethod] Method = setFloat1DTable does not exists, adding a new one to the local env with index 3
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassMembers(ListDeclClass.java:52) - [ListDeclClass][verifyListClassMembers] verify listClass pass 2: END
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassBody(ListDeclClass.java:59) - [ListDeclClass][verifyListClassBody] verify listClass pass 3: START
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyInitFields(ListDeclField.java:62) - [ListDeclField][verifyInitListDeclField]
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethodBody(ListDeclMethod.java:41) - [ListDeclMethod][verifyListDeclMethod]
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [4, 28]
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:67) - [DeclVar] Saving method variable tableIterator into 1(LB)
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.IfThenElse.verifyInst(IfThenElse.java:48) - [IfThenElse][verifyInst] Verify the condition and the instructions of the if then else
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyCondition(AbstractExpr.java:260) - [AbstractExpr][verifyInst] Verify the condition of a While or ifEhenElse
DEBUG fr.ensimag.deca.tree.AbstractOpCmp.verifyExpr(AbstractOpCmp.java:33) - [AbstractOpCmp][verifyExpr] Verify the comparison expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractOpCmp.verifyExpr(AbstractOpCmp.java:45) - [AbstractOpCmp][verifyExpr] verify type left operand:int
DEBUG fr.ensimag.deca.tree.AbstractOpCmp.verifyExpr(AbstractOpCmp.java:46) - [AbstractOpCmp][verifyExpr] verify type right operand:int
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.While.verifyInst(While.java:72) - [While][verifyInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyCondition(AbstractExpr.java:260) - [AbstractExpr][verifyInst] Verify the condition of a While or ifEhenElse
DEBUG fr.ensimag.deca.tree.AbstractOpCmp.verifyExpr(AbstractOpCmp.java:33) - [AbstractOpCmp][verifyExpr] Verify the comparison expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractOpCmp.verifyExpr(AbstractOpCmp.java:45) - [AbstractOpCmp][verifyExpr] verify type left operand:int
DEBUG fr.ensimag.deca.tree.AbstractOpCmp.verifyExpr(AbstractOpCmp.java:46) - [AbstractOpCmp][verifyExpr] verify type right operand:int
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [7, 40]
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = float expected type is float
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = float expected type is float
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [8, 32]
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [15, 28]
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:67) - [DeclVar] Saving method variable tableIterator into 1(LB)
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.While.verifyInst(While.java:72) - [While][verifyInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyCondition(AbstractExpr.java:260) - [AbstractExpr][verifyInst] Verify the condition of a While or ifEhenElse
DEBUG fr.ensimag.deca.tree.AbstractOpCmp.verifyExpr(AbstractOpCmp.java:33) - [AbstractOpCmp][verifyExpr] Verify the comparison expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractOpCmp.verifyExpr(AbstractOpCmp.java:45) - [AbstractOpCmp][verifyExpr] verify type left operand:int
DEBUG fr.ensimag.deca.tree.AbstractOpCmp.verifyExpr(AbstractOpCmp.java:46) - [AbstractOpCmp][verifyExpr] verify type right operand:int
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [17, 35]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = float expected type is float
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = float expected type is float
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [18, 28]
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassBody(ListDeclClass.java:63) - [ListDeclClass][verifyListClassBody] verify listClass pass 3: END
DEBUG fr.ensimag.deca.DecacCompiler.setMainProgramState(DecacCompiler.java:115) - [DecacCompiler][setMainProgramState] Seeting main state program
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:38) - verify Main: start
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [25, 30]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.New.verifyExpr(New.java:51) - [New][verifyExpr] returned type for new is  = MatriceSommeFloat
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = MatriceSommeFloat expected type is MatriceSommeFloat
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving somme into 1(GB)
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [26, 16]
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = float[] expected type is float[]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = float[] expected type is float[]
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving g into 2(GB)
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [27, 16]
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = float[] expected type is float[]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = float[] expected type is float[]
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving h into 3(GB)
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.FloatLiteral.verifyExpr(FloatLiteral.java:45) - [FloatLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.FloatLiteral.verifyExpr(FloatLiteral.java:45) - [FloatLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:42) - verify Main: end
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:60) - verify program: end
`> [2, 0] Program
   +> [2, 0] ListDeclClass [List with 1 elements]
   |  []> [2, 0] DeclClass
   |      +> [2, 6] Identifier (MatriceSommeFloat)
   |      |  definition: type defined at [2, 0], type=MatriceSommeFloat
   |      +> [builtin] Identifier (Object)
   |      |  definition: type (builtin), type=Object
   |      +> ListDeclField [List with 0 elements]
   |      `> ListDeclMethod [List with 2 elements]
   |         []> [3, 4] DeclMethod
   |         ||  +> [3, 4] Identifier (void)
   |         ||  |  definition: type (builtin), type=void
   |         ||  +> [3, 9] Identifier (sommeFloatFloat1D)
   |         ||  |  definition: method defined at [3, 4], type=void
   |         ||  +> [3, 27] ListDeclParam [List with 2 elements]
   |         ||  |  []> [3, 27] DeclParam
   |         ||  |  ||  +> [3, 27] Identifier (float[])
   |         ||  |  ||  |  definition: type (builtin), type=float[]
   |         ||  |  ||  `> [3, 35] Identifier (table1)
   |         ||  |  ||     definition: parameter defined at [3, 27], type=float[]
   |         ||  |  []> [3, 43] DeclParam
   |         ||  |      +> [3, 43] Identifier (float[])
   |         ||  |      |  definition: type (builtin), type=float[]
   |         ||  |      `> [3, 51] Identifier (table2)
   |         ||  |         definition: parameter defined at [3, 43], type=float[]
   |         ||  `> [3, 58] MethodBody
   |         ||     +> ListDeclVar [List with 1 elements]
   |         ||     |  []> [4, 12] DeclVar
   |         ||     |      +> [4, 8] Identifier (int)
   |         ||     |      |  definition: type (builtin), type=int
   |         ||     |      +> [4, 12] Identifier (tableIterator)
   |         ||     |      |  definition: variable defined at [4, 12], type=int
   |         ||     |      `> [4, 28] Initialization
   |         ||     |         `> [4, 28] Int (0)
   |         ||     |            type: int
   |         ||     `> ListInst [List with 1 elements]
   |         ||        []> [5, 8] IfThenElse
   |         ||            +> [5, 12] Equals
   |         ||            |  type: boolean
   |         ||            |  +> [5, 12] Selection
   |         ||            |  |  type: int
   |         ||            |  |  +> [5, 12] Identifier (table1)
   |         ||            |  |  |  definition: parameter defined at [3, 27], type=float[]
   |         ||            |  |  `> [5, 19] Identifier (size1D)
   |         ||            |  |     definition: field (builtin), type=int
   |         ||            |  `> [5, 29] Selection
   |         ||            |     type: int
   |         ||            |     +> [5, 29] Identifier (table2)
   |         ||            |     |  definition: parameter defined at [3, 43], type=float[]
   |         ||            |     `> [5, 36] Identifier (size1D)
   |         ||            |        definition: field (builtin), type=int
   |         ||            +> ListInst [List with 1 elements]
   |         ||            |  []> [6, 19] While
   |         ||            |      +> [6, 19] Lower
   |         ||            |      |  type: boolean
   |         ||            |      |  +> [6, 19] Identifier (tableIterator)
   |         ||            |      |  |  definition: variable defined at [4, 12], type=int
   |         ||            |      |  `> [6, 35] Selection
   |         ||            |      |     type: int
   |         ||            |      |     +> [6, 35] Identifier (table1)
   |         ||            |      |     |  definition: parameter defined at [3, 27], type=float[]
   |         ||            |      |     `> [6, 42] Identifier (size1D)
   |         ||            |      |        definition: field (builtin), type=int
   |         ||            |      `> ListInst [List with 2 elements]
   |         ||            |         []> [7, 16] Assign
   |         ||            |         ||  type: float
   |         ||            |         ||  +> [7, 16] TableGetElement
   |         ||            |         ||  |  type: float[]
   |         ||            |         ||  |  +> [7, 16] Identifier (table1)
   |         ||            |         ||  |  |  definition: parameter defined at [3, 27], type=float[]
   |         ||            |         ||  |  `> ListExpr [List with 1 elements]
   |         ||            |         ||  |     []> [7, 23] Identifier (tableIterator)
   |         ||            |         ||  |         definition: variable defined at [4, 12], type=int
   |         ||            |         ||  `> [7, 40] Plus
   |         ||            |         ||     type: float
   |         ||            |         ||     +> [7, 40] TableGetElement
   |         ||            |         ||     |  type: float
   |         ||            |         ||     |  +> [7, 40] Identifier (table1)
   |         ||            |         ||     |  |  definition: parameter defined at [3, 27], type=float[]
   |         ||            |         ||     |  `> ListExpr [List with 1 elements]
   |         ||            |         ||     |     []> [7, 47] Identifier (tableIterator)
   |         ||            |         ||     |         definition: variable defined at [4, 12], type=int
   |         ||            |         ||     `> [7, 64] TableGetElement
   |         ||            |         ||        type: float
   |         ||            |         ||        +> [7, 64] Identifier (table2)
   |         ||            |         ||        |  definition: parameter defined at [3, 43], type=float[]
   |         ||            |         ||        `> ListExpr [List with 1 elements]
   |         ||            |         ||           []> [7, 71] Identifier (tableIterator)
   |         ||            |         ||               definition: variable defined at [4, 12], type=int
   |         ||            |         []> [8, 16] Assign
   |         ||            |             type: int
   |         ||            |             +> [8, 16] Identifier (tableIterator)
   |         ||            |             |  definition: variable defined at [4, 12], type=int
   |         ||            |             `> [8, 32] Plus
   |         ||            |                type: int
   |         ||            |                +> [8, 32] Identifier (tableIterator)
   |         ||            |                |  definition: variable defined at [4, 12], type=int
   |         ||            |                `> [8, 48] Int (1)
   |         ||            |                   type: int
   |         ||            `> ListInst [List with 0 elements]
   |         []> [14, 4] DeclMethod
   |             +> [14, 4] Identifier (void)
   |             |  definition: type (builtin), type=void
   |             +> [14, 9] Identifier (setFloat1DTable)
   |             |  definition: method defined at [14, 4], type=void
   |             +> [14, 25] ListDeclParam [List with 2 elements]
   |             |  []> [14, 25] DeclParam
   |             |  ||  +> [14, 25] Identifier (float[])
   |             |  ||  |  definition: type (builtin), type=float[]
   |             |  ||  `> [14, 33] Identifier (table)
   |             |  ||     definition: parameter defined at [14, 25], type=float[]
   |             |  []> [14, 40] DeclParam
   |             |      +> [14, 40] Identifier (float)
   |             |      |  definition: type (builtin), type=float
   |             |      `> [14, 46] Identifier (value)
   |             |         definition: parameter defined at [14, 40], type=float
   |             `> [14, 52] MethodBody
   |                +> ListDeclVar [List with 1 elements]
   |                |  []> [15, 12] DeclVar
   |                |      +> [15, 8] Identifier (int)
   |                |      |  definition: type (builtin), type=int
   |                |      +> [15, 12] Identifier (tableIterator)
   |                |      |  definition: variable defined at [15, 12], type=int
   |                |      `> [15, 28] Initialization
   |                |         `> [15, 28] Int (0)
   |                |            type: int
   |                `> ListInst [List with 1 elements]
   |                   []> [16, 15] While
   |                       +> [16, 15] Lower
   |                       |  type: boolean
   |                       |  +> [16, 15] Identifier (tableIterator)
   |                       |  |  definition: variable defined at [15, 12], type=int
   |                       |  `> [16, 31] Selection
   |                       |     type: int
   |                       |     +> [16, 31] Identifier (table)
   |                       |     |  definition: parameter defined at [14, 25], type=float[]
   |                       |     `> [16, 37] Identifier (size1D)
   |                       |        definition: field (builtin), type=int
   |                       `> ListInst [List with 2 elements]
   |                          []> [17, 12] Assign
   |                          ||  type: float
   |                          ||  +> [17, 12] TableGetElement
   |                          ||  |  type: float[]
   |                          ||  |  +> [17, 12] Identifier (table)
   |                          ||  |  |  definition: parameter defined at [14, 25], type=float[]
   |                          ||  |  `> ListExpr [List with 1 elements]
   |                          ||  |     []> [17, 18] Identifier (tableIterator)
   |                          ||  |         definition: variable defined at [15, 12], type=int
   |                          ||  `> [17, 35] Identifier (value)
   |                          ||     definition: parameter defined at [14, 40], type=float
   |                          []> [18, 12] Assign
   |                              type: int
   |                              +> [18, 12] Identifier (tableIterator)
   |                              |  definition: variable defined at [15, 12], type=int
   |                              `> [18, 28] Plus
   |                                 type: int
   |                                 +> [18, 28] Identifier (tableIterator)
   |                                 |  definition: variable defined at [15, 12], type=int
   |                                 `> [18, 44] Int (1)
   |                                    type: int
   `> [24, 0] Main
      +> ListDeclVar [List with 3 elements]
      |  []> [25, 22] DeclVar
      |  ||  +> [25, 4] Identifier (MatriceSommeFloat)
      |  ||  |  definition: type defined at [2, 0], type=MatriceSommeFloat
      |  ||  +> [25, 22] Identifier (somme)
      |  ||  |  definition: variable defined at [25, 22], type=MatriceSommeFloat
      |  ||  `> [25, 30] Initialization
      |  ||     `> [25, 30] New
      |  ||        type: MatriceSommeFloat
      |  ||        `> [25, 34] Identifier (MatriceSommeFloat)
      |  ||           definition: type defined at [2, 0], type=MatriceSommeFloat
      |  []> [26, 12] DeclVar
      |  ||  +> [26, 4] Identifier (float[])
      |  ||  |  definition: type (builtin), type=float[]
      |  ||  +> [26, 12] Identifier (g)
      |  ||  |  definition: variable defined at [26, 12], type=float[]
      |  ||  `> [26, 16] Initialization
      |  ||     `> [26, 16] NewTable
      |  ||        type: float[]
      |  ||        +> [26, 16] Identifier (float[])
      |  ||        |  definition: type (builtin), type=float[]
      |  ||        +> ListExpr [List with 1 elements]
      |  ||        |  []> [26, 26] Int (5)
      |  ||        |      type: int
      |  []> [27, 12] DeclVar
      |      +> [27, 4] Identifier (float[])
      |      |  definition: type (builtin), type=float[]
      |      +> [27, 12] Identifier (h)
      |      |  definition: variable defined at [27, 12], type=float[]
      |      `> [27, 16] Initialization
      |         `> [27, 16] NewTable
      |            type: float[]
      |            +> [27, 16] Identifier (float[])
      |            |  definition: type (builtin), type=float[]
      |            +> ListExpr [List with 1 elements]
      |            |  []> [27, 26] Int (5)
      |            |      type: int
      `> ListInst [List with 3 elements]
         []> [28, 4] MethodCall
         ||  type: void
         ||  +> [28, 4] Identifier (somme)
         ||  |  definition: variable defined at [25, 22], type=MatriceSommeFloat
         ||  +> [28, 10] Identifier (setFloat1DTable)
         ||  |  definition: method defined at [14, 4], type=void
         ||  `> ListExpr [List with 2 elements]
         ||     []> [28, 26] Identifier (g)
         ||     ||  definition: variable defined at [26, 12], type=float[]
         ||     []> [28, 28] Float (3.0)
         ||         type: float
         []> [29, 4] MethodCall
         ||  type: void
         ||  +> [29, 4] Identifier (somme)
         ||  |  definition: variable defined at [25, 22], type=MatriceSommeFloat
         ||  +> [29, 10] Identifier (setFloat1DTable)
         ||  |  definition: method defined at [14, 4], type=void
         ||  `> ListExpr [List with 2 elements]
         ||     []> [29, 26] Identifier (h)
         ||     ||  definition: variable defined at [27, 12], type=float[]
         ||     []> [29, 28] Float (5.0)
         ||         type: float
         []> [30, 4] MethodCall
             type: void
             +> [30, 4] Identifier (somme)
             |  definition: variable defined at [25, 22], type=MatriceSommeFloat
             +> [30, 10] Identifier (sommeFloatFloat1D)
             |  definition: method defined at [3, 4], type=void
             `> ListExpr [List with 2 elements]
                []> [30, 28] Identifier (g)
                ||  definition: variable defined at [26, 12], type=float[]
                []> [30, 30] Identifier (h)
                    definition: variable defined at [27, 12], type=float[]
