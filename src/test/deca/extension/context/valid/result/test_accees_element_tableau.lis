DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:38) - [MethodDefinition][setLabel] Initialising label value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with code.Object.equals
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:46) - verify program: start
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:48) - Register unit management unit is null
DEBUG fr.ensimag.deca.DecacCompiler.saveMainProgramState(DecacCompiler.java:128) - [DecacCompiler][saveMainProgramState] Saving state main program
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:36) - [ListDeclClass][verifyListClass] verify listClass pass 1: START
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:40) - [ListDeclClass][verifyListClass] verify listClass pass 1: END
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassMembers(ListDeclClass.java:48) - [ListDeclClass][verifyListClassMembers] verify listClass pass 2: START
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassMembers(ListDeclClass.java:52) - [ListDeclClass][verifyListClassMembers] verify listClass pass 2: END
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassBody(ListDeclClass.java:59) - [ListDeclClass][verifyListClassBody] verify listClass pass 3: START
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassBody(ListDeclClass.java:63) - [ListDeclClass][verifyListClassBody] verify listClass pass 3: END
DEBUG fr.ensimag.deca.DecacCompiler.setMainProgramState(DecacCompiler.java:115) - [DecacCompiler][setMainProgramState] Seeting main state program
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:38) - verify Main: start
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int[] expected type is int[]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int[] expected type is int[]
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving tableauInt into 1(GB)
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int[][] expected type is float[]
`> [11, 0] Program
   +> ListDeclClass [List with 0 elements]
   `> [11, 0] Main
      +> ListDeclVar [List with 3 elements]
      |  []> [12, 10] DeclVar
      |  ||  +> [12, 4] Identifier (int[])
      |  ||  |  definition: type (builtin), type=int[]
      |  ||  +> [12, 10] Identifier (tableauInt)
      |  ||  |  definition: variable defined at [12, 10], type=int[]
      |  ||  `> [12, 23] Initialization
      |  ||     `> [12, 23] NewTable
      |  ||        type: int[]
      |  ||        +> [12, 23] Identifier (int[])
      |  ||        |  definition: type (builtin), type=int[]
      |  ||        +> ListExpr [List with 1 elements]
      |  ||        |  []> [12, 31] Int (5)
      |  ||        |      type: int
      |  []> [13, 12] DeclVar
      |  ||  +> [13, 4] Identifier (float[])
      |  ||  |  definition: type (builtin), type=float[]
      |  ||  +> [13, 12] Identifier (tableauFloat)
      |  ||  `> [13, 27] Initialization
      |  ||     `> [13, 27] NewTable
      |  ||        type: int[][]
      |  ||        +> [13, 27] Identifier (int[][])
      |  ||        |  definition: type (builtin), type=int[][]
      |  ||        +> ListExpr [List with 2 elements]
      |  ||        |  []> [13, 35] Int (5)
      |  ||        |  ||  type: int
      |  ||        |  []> [13, 38] Int (5)
      |  ||        |      type: int
      |  []> [14, 8] DeclVar
      |      +> [14, 4] Identifier (int)
      |      +> [14, 8] Identifier (x)
      |      `> NoInitialization
      `> ListInst [List with 3 elements]
         []> [15, 4] Assign
         ||  +> [15, 4] TableGetElement
         ||  |  +> [15, 4] Identifier (tableauInt)
         ||  |  `> ListExpr [List with 1 elements]
         ||  |     []> [15, 15] Int (3)
         ||  `> [15, 20] Int (10)
         []> [16, 4] Assign
         ||  +> [16, 4] TableGetElement
         ||  |  +> [16, 4] Identifier (tableauFloat)
         ||  |  `> ListExpr [List with 2 elements]
         ||  |     []> [16, 17] Int (3)
         ||  |     []> [16, 20] Int (2)
         ||  `> [16, 25] Int (20)
         []> [17, 4] Assign
             +> [17, 4] Identifier (x)
             `> [17, 8] Multiply
                +> [17, 13] Cast
                |  +> [17, 9] Identifier (int)
                |  `> [17, 14] TableGetElement
                |     +> [17, 14] Identifier (tableauFloat)
                |     `> ListExpr [List with 2 elements]
                |        []> [17, 27] Int (3)
                |        []> [17, 30] Int (2)
                `> [17, 35] Int (2)
src/test/deca/extension/context/valid/test_accees_element_tableau.deca:13:27: Not expected type
