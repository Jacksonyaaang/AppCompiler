DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:38) - [MethodDefinition][setLabel] Initialising label value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with code.Object.equals
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:46) - verify program: start
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:48) - Register unit management unit is null
DEBUG fr.ensimag.deca.DecacCompiler.saveMainProgramState(DecacCompiler.java:128) - [DecacCompiler][saveMainProgramState] Saving state main program
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:36) - [ListDeclClass][verifyListClass] verify listClass pass 1: START
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:40) - [ListDeclClass][verifyListClass] verify listClass pass 1: END
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassMembers(ListDeclClass.java:48) - [ListDeclClass][verifyListClassMembers] verify listClass pass 2: START
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyListDeclField(ListDeclField.java:54) - [ListDeclField][verifyListDeclField]
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:91) - [DeclField][verifyDecleField] Verify a Field declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:91) - [DeclField][verifyDecleField] Verify a Field declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:32) - [ListDeclMethod][verifyListDeclMethod]
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : diag
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  diag
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : a
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter a into -3(LB)
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:136) - [DeclMethod][verifyDecleMethod] Method = diag does not exists, adding a new one to the local env with index 2
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyListDeclField(ListDeclField.java:54) - [ListDeclField][verifyListDeclField]
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:91) - [DeclField][verifyDecleField] Verify a Field declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:32) - [ListDeclMethod][verifyListDeclMethod]
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : diag
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  diag
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : a
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter a into -3(LB)
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:148) - [DeclMethod][verifyDecleMethod] Method = diag exists in the localenv, checking if it is a method that belongs to the current class
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:154) - [DeclMethod][verifyDecleMethod] Method = diag exists in the parent class,checking if our method matchs the one that is in the parent
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:167) - [DeclMethod][verifyDecleMethod] Method = diag exists in the parent class,and it was redefined exactly the way it was in the parent method, we used the index the index =2
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassMembers(ListDeclClass.java:52) - [ListDeclClass][verifyListClassMembers] verify listClass pass 2: END
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassBody(ListDeclClass.java:59) - [ListDeclClass][verifyListClassBody] verify listClass pass 3: START
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyInitFields(ListDeclField.java:62) - [ListDeclField][verifyInitListDeclField]
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethodBody(ListDeclMethod.java:41) - [ListDeclMethod][verifyListDeclMethod]
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [15, 12]
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [16, 12]
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyInitFields(ListDeclField.java:62) - [ListDeclField][verifyInitListDeclField]
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethodBody(ListDeclMethod.java:41) - [ListDeclMethod][verifyListDeclMethod]
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [23, 12]
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [24, 12]
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [25, 12]
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassBody(ListDeclClass.java:63) - [ListDeclClass][verifyListClassBody] verify listClass pass 3: END
DEBUG fr.ensimag.deca.DecacCompiler.setMainProgramState(DecacCompiler.java:115) - [DecacCompiler][setMainProgramState] Seeting main state program
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:38) - verify Main: start
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [30, 22]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.New.verifyExpr(New.java:51) - [New][verifyExpr] returned type for new is  = Point2D
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = Point2D expected type is Point2D
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving point2d into 1(GB)
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [31, 30]
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = Object[][] expected type is Object[][]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = Object[][] expected type is Object[][]
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving tableauObjet into 2(GB)
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving listeDePoint2d into 3(GB)
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [33, 21]
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = Point2D[][] expected type is Point2D[][]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = Point2D[][] expected type is Point2D[][]
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:42) - verify Main: end
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:60) - verify program: end
`> [9, 0] Program
   +> [20, 0] ListDeclClass [List with 2 elements]
   |  []> [9, 0] DeclClass
   |  ||  +> [9, 6] Identifier (Point2D)
   |  ||  |  definition: type defined at [9, 0], type=Point2D
   |  ||  +> [builtin] Identifier (Object)
   |  ||  |  definition: type (builtin), type=Object
   |  ||  +> ListDeclField [List with 2 elements]
   |  ||  |  []> [10, 8]  [visibility=PUBLIC]  DeclField
   |  ||  |  ||  +> [10, 4] Identifier (int)
   |  ||  |  ||  |  definition: type (builtin), type=int
   |  ||  |  ||  +> [10, 8] Identifier (x)
   |  ||  |  ||  |  definition: field defined at [10, 8], type=int
   |  ||  |  ||  `> NoInitialization
   |  ||  |  []> [11, 8]  [visibility=PUBLIC]  DeclField
   |  ||  |      +> [11, 4] Identifier (int)
   |  ||  |      |  definition: type (builtin), type=int
   |  ||  |      +> [11, 8] Identifier (y)
   |  ||  |      |  definition: field defined at [11, 8], type=int
   |  ||  |      `> NoInitialization
   |  ||  `> ListDeclMethod [List with 1 elements]
   |  ||     []> [14, 4] DeclMethod
   |  ||         +> [14, 4] Identifier (void)
   |  ||         |  definition: type (builtin), type=void
   |  ||         +> [14, 9] Identifier (diag)
   |  ||         |  definition: method defined at [14, 4], type=void
   |  ||         +> [14, 14] ListDeclParam [List with 1 elements]
   |  ||         |  []> [14, 14] DeclParam
   |  ||         |      +> [14, 14] Identifier (int)
   |  ||         |      |  definition: type (builtin), type=int
   |  ||         |      `> [14, 18] Identifier (a)
   |  ||         |         definition: parameter defined at [14, 14], type=int
   |  ||         `> [14, 21] MethodBody
   |  ||            +> ListDeclVar [List with 0 elements]
   |  ||            `> ListInst [List with 2 elements]
   |  ||               []> [15, 8] Assign
   |  ||               ||  type: int
   |  ||               ||  +> [15, 8] Identifier (x)
   |  ||               ||  |  definition: field defined at [10, 8], type=int
   |  ||               ||  `> [15, 12] Plus
   |  ||               ||     type: int
   |  ||               ||     +> [15, 12] Identifier (x)
   |  ||               ||     |  definition: field defined at [10, 8], type=int
   |  ||               ||     `> [15, 16] Identifier (a)
   |  ||               ||        definition: parameter defined at [14, 14], type=int
   |  ||               []> [16, 8] Assign
   |  ||                   type: int
   |  ||                   +> [16, 8] Identifier (y)
   |  ||                   |  definition: field defined at [11, 8], type=int
   |  ||                   `> [16, 12] Plus
   |  ||                      type: int
   |  ||                      +> [16, 12] Identifier (y)
   |  ||                      |  definition: field defined at [11, 8], type=int
   |  ||                      `> [16, 16] Identifier (a)
   |  ||                         definition: parameter defined at [14, 14], type=int
   |  []> [20, 0] DeclClass
   |      +> [20, 6] Identifier (Point3D)
   |      |  definition: type defined at [20, 0], type=Point3D
   |      +> [20, 22] Identifier (Point2D)
   |      |  definition: type defined at [9, 0], type=Point2D
   |      +> ListDeclField [List with 1 elements]
   |      |  []> [21, 8]  [visibility=PUBLIC]  DeclField
   |      |      +> [21, 4] Identifier (int)
   |      |      |  definition: type (builtin), type=int
   |      |      +> [21, 8] Identifier (z)
   |      |      |  definition: field defined at [21, 8], type=int
   |      |      `> NoInitialization
   |      `> ListDeclMethod [List with 1 elements]
   |         []> [22, 4] DeclMethod
   |             +> [22, 4] Identifier (void)
   |             |  definition: type (builtin), type=void
   |             +> [22, 9] Identifier (diag)
   |             |  definition: method defined at [22, 4], type=void
   |             +> [22, 14] ListDeclParam [List with 1 elements]
   |             |  []> [22, 14] DeclParam
   |             |      +> [22, 14] Identifier (int)
   |             |      |  definition: type (builtin), type=int
   |             |      `> [22, 18] Identifier (a)
   |             |         definition: parameter defined at [22, 14], type=int
   |             `> [22, 21] MethodBody
   |                +> ListDeclVar [List with 0 elements]
   |                `> ListInst [List with 3 elements]
   |                   []> [23, 8] Assign
   |                   ||  type: int
   |                   ||  +> [23, 8] Identifier (x)
   |                   ||  |  definition: field defined at [10, 8], type=int
   |                   ||  `> [23, 12] Plus
   |                   ||     type: int
   |                   ||     +> [23, 12] Identifier (x)
   |                   ||     |  definition: field defined at [10, 8], type=int
   |                   ||     `> [23, 16] Identifier (a)
   |                   ||        definition: parameter defined at [22, 14], type=int
   |                   []> [24, 8] Assign
   |                   ||  type: int
   |                   ||  +> [24, 8] Identifier (y)
   |                   ||  |  definition: field defined at [11, 8], type=int
   |                   ||  `> [24, 12] Plus
   |                   ||     type: int
   |                   ||     +> [24, 12] Identifier (y)
   |                   ||     |  definition: field defined at [11, 8], type=int
   |                   ||     `> [24, 16] Identifier (a)
   |                   ||        definition: parameter defined at [22, 14], type=int
   |                   []> [25, 8] Assign
   |                       type: int
   |                       +> [25, 8] Identifier (z)
   |                       |  definition: field defined at [21, 8], type=int
   |                       `> [25, 12] Plus
   |                          type: int
   |                          +> [25, 12] Identifier (z)
   |                          |  definition: field defined at [21, 8], type=int
   |                          `> [25, 16] Identifier (a)
   |                             definition: parameter defined at [22, 14], type=int
   `> [29, 0] Main
      +> ListDeclVar [List with 3 elements]
      |  []> [30, 12] DeclVar
      |  ||  +> [30, 4] Identifier (Point2D)
      |  ||  |  definition: type defined at [9, 0], type=Point2D
      |  ||  +> [30, 12] Identifier (point2d)
      |  ||  |  definition: variable defined at [30, 12], type=Point2D
      |  ||  `> [30, 22] Initialization
      |  ||     `> [30, 22] New
      |  ||        type: Point2D
      |  ||        `> [30, 26] Identifier (Point2D)
      |  ||           definition: type defined at [9, 0], type=Point2D
      |  []> [31, 15] DeclVar
      |  ||  +> [31, 4] Identifier (Object[][])
      |  ||  |  definition: type (builtin), type=Object[][]
      |  ||  +> [31, 15] Identifier (tableauObjet)
      |  ||  |  definition: variable defined at [31, 15], type=Object[][]
      |  ||  `> [31, 30] Initialization
      |  ||     `> [31, 30] NewTable
      |  ||        type: Object[][]
      |  ||        +> [31, 30] Identifier (Object[][])
      |  ||        |  definition: type (builtin), type=Object[][]
      |  ||        +> ListExpr [List with 2 elements]
      |  ||        |  []> [31, 41] Int (1)
      |  ||        |  ||  type: int
      |  ||        |  []> [31, 44] Int (2)
      |  ||        |      type: int
      |  []> [32, 16] DeclVar
      |      +> [32, 4] Identifier (Point2D[][])
      |      |  definition: type (builtin), type=Point2D[][]
      |      +> [32, 16] Identifier (listeDePoint2d)
      |      |  definition: variable defined at [32, 16], type=Point2D[][]
      |      `> NoInitialization
      `> ListInst [List with 1 elements]
         []> [33, 4] Assign
             type: Point2D[][]
             +> [33, 4] Identifier (listeDePoint2d)
             |  definition: variable defined at [32, 16], type=Point2D[][]
             `> [33, 21] NewTable
                type: Point2D[][]
                +> [33, 21] Identifier (Point2D[][])
                |  definition: type (builtin), type=Point2D[][]
                +> ListExpr [List with 2 elements]
                |  []> [33, 33] Int (9)
                |  ||  type: int
                |  []> [33, 36] Int (4)
                |      type: int
