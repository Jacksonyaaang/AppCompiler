// Description:
//  test de features variées: classe fille, usage de méthode dans une méthode, attribut du type de sa propre classe
//  , polymorphisme, réécriture et redéfinitions ect...          
//
// Resultats:
//  
// 
// Historique:
//    cree le 15/01/2023


class A3{
     int x;
    void A3(int i){
        this.x=i;
    }
     int getX(){
        return this.x;
    }
     void setX(int i){
        this.x=i;
    }
     String toString(){
        return "x="+this.x  ;
    }
     int setgetX(int i){
        this.setX(i);
        return this.getX();
    }
     void QuiSuisJe(){
        println("Je suis un attribut de la classe A3");
    }
}
class B3 extends A3{
    float z;
    B3 successeur;
    void  B3(int i, float f){
        this.x=i;
        this.z=f;
    }
     void QuiSuisJe(){
        println("Je suis un attribut de la classe A3");
    }
    String QuiSuisJe(String nom){
        return test;
    }
    
    float getZ(){
        return this.z;
    }

    /* void setZ(return z){
        this.x=i;
    } */
}

{
    A3 a = new A3();
    float z1;
    B3 b;
    int y=a.x;
    B3 b2=new ACORRIGER();
    println(a.getX());
    println(y);
    a.setX(2);
    println(a.getX());
    println(y);
    println(a.toString());
    println(a.setgetX(18));
    a.QuiSuisJe();
    b.QuiSuisJe();
    Strinb.QuiSuisJe("b");
    println(b.QuiSuisJe("b"));
    b2.successeur=null;
    b.successeur=b2;
    z1=b.successeur.z;
    //println(z1);
    if(a.instanceOf(A3)){
        println("instanceOf reconnait l'appartenance");
    }
    else{
        println("instanceOf ne reconnait pas l'appartenance");
    }
    if(b.instanceOf(A3)){
        println("instanceOf reconnait la non appartenance");
    }
    else{
        println("instanceOf ne reconnait pas la non appartenance");
    }

    b2 = (B3) (b) ;
    y=b2.x;
    println(b2.x);
    A a = null;
    boolean a = B instaceof A; 
}

