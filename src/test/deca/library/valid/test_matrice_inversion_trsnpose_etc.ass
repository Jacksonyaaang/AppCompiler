	TSTO #68
	BOV stack_overflow_error
	ADDSP #65
; start main program
; -------------------------------------
;        Method Table
; -------------------------------------
	LOAD #null, R0
	STORE R0, 6(GB)
	LOAD code.Object.equals, R0
	STORE R0, 7(GB)
	LEA 6(GB), R0
	STORE R0, 8(GB)
	LOAD code.Object.equals, R0
	STORE R0, 9(GB)
	LOAD code.Math.setInt1DTable, R0
	STORE R0, 10(GB)
	LOAD code.Math.setInt2DTable, R0
	STORE R0, 11(GB)
	LOAD code.Math.setFloat1DTable, R0
	STORE R0, 12(GB)
	LOAD code.Math.setFloat2DTable, R0
	STORE R0, 13(GB)
	LOAD code.Math.printInt1DTable, R0
	STORE R0, 14(GB)
	LOAD code.Math.printInt2DTable, R0
	STORE R0, 15(GB)
	LOAD code.Math.printFloat1DTable, R0
	STORE R0, 16(GB)
	LOAD code.Math.printFloat2DTable, R0
	STORE R0, 17(GB)
	LOAD code.Math.copyIntInt1DTable, R0
	STORE R0, 18(GB)
	LOAD code.Math.copyIntInt2DTable, R0
	STORE R0, 19(GB)
	LOAD code.Math.copyFloatFloat1DTable, R0
	STORE R0, 20(GB)
	LOAD code.Math.copyFloatFloat2DTable, R0
	STORE R0, 21(GB)
	LOAD code.Math.copyFloatInt1DTable, R0
	STORE R0, 22(GB)
	LOAD code.Math.copyFloatInt2DTable, R0
	STORE R0, 23(GB)
	LOAD code.Math.copyIntFloat1DTable, R0
	STORE R0, 24(GB)
	LOAD code.Math.copyIntFloat2DTable, R0
	STORE R0, 25(GB)
	LOAD code.Math.dimensionIncompatible, R0
	STORE R0, 26(GB)
	LOAD code.Math.throwError, R0
	STORE R0, 27(GB)
	LEA 8(GB), R0
	STORE R0, 28(GB)
	LOAD code.Object.equals, R0
	STORE R0, 29(GB)
	LOAD code.Math.setInt1DTable, R0
	STORE R0, 30(GB)
	LOAD code.Math.setInt2DTable, R0
	STORE R0, 31(GB)
	LOAD code.Math.setFloat1DTable, R0
	STORE R0, 32(GB)
	LOAD code.Math.setFloat2DTable, R0
	STORE R0, 33(GB)
	LOAD code.Math.printInt1DTable, R0
	STORE R0, 34(GB)
	LOAD code.Math.printInt2DTable, R0
	STORE R0, 35(GB)
	LOAD code.Math.printFloat1DTable, R0
	STORE R0, 36(GB)
	LOAD code.Math.printFloat2DTable, R0
	STORE R0, 37(GB)
	LOAD code.Math.copyIntInt1DTable, R0
	STORE R0, 38(GB)
	LOAD code.Math.copyIntInt2DTable, R0
	STORE R0, 39(GB)
	LOAD code.Math.copyFloatFloat1DTable, R0
	STORE R0, 40(GB)
	LOAD code.Math.copyFloatFloat2DTable, R0
	STORE R0, 41(GB)
	LOAD code.Math.copyFloatInt1DTable, R0
	STORE R0, 42(GB)
	LOAD code.Math.copyFloatInt2DTable, R0
	STORE R0, 43(GB)
	LOAD code.Math.copyIntFloat1DTable, R0
	STORE R0, 44(GB)
	LOAD code.Math.copyIntFloat2DTable, R0
	STORE R0, 45(GB)
	LOAD code.Math.dimensionIncompatible, R0
	STORE R0, 46(GB)
	LOAD code.Math.throwError, R0
	STORE R0, 47(GB)
	LOAD code.Det.bareissIntDeterminant, R0
	STORE R0, 48(GB)
	LOAD code.Det.bareissFloatDeterminant, R0
	STORE R0, 49(GB)
	LEA 6(GB), R0
	STORE R0, 50(GB)
	LOAD code.Object.equals, R0
	STORE R0, 51(GB)
	LOAD code.MatrixTraitement.triangleSupInt, R0
	STORE R0, 52(GB)
	LOAD code.MatrixTraitement.triangleSupFloat, R0
	STORE R0, 53(GB)
	LOAD code.MatrixTraitement.triangleInfInt, R0
	STORE R0, 54(GB)
	LOAD code.MatrixTraitement.triangleInfFloat, R0
	STORE R0, 55(GB)
	LOAD code.MatrixTraitement.transposeMatrixInt, R0
	STORE R0, 56(GB)
	LOAD code.MatrixTraitement.transposeMatrixFloat, R0
	STORE R0, 57(GB)
	LOAD code.MatrixTraitement.flattenMatrixInt, R0
	STORE R0, 58(GB)
	LOAD code.MatrixTraitement.flattenMatrixFloat, R0
	STORE R0, 59(GB)
	LOAD code.MatrixTraitement.helperInversionFloat, R0
	STORE R0, 60(GB)
	LOAD code.MatrixTraitement.helperInversionInt, R0
	STORE R0, 61(GB)
	LOAD code.MatrixTraitement.inversionInt, R0
	STORE R0, 62(GB)
	LOAD code.MatrixTraitement.inversionFloat, R0
	STORE R0, 63(GB)
	LOAD code.MatrixTraitement.dimensionIncompatible, R0
	STORE R0, 64(GB)
	LOAD code.MatrixTraitement.throwError, R0
	STORE R0, 65(GB)
; -------------------------------------
;        Main program
; -------------------------------------
; Beginning of main instructions:
; --------StartNew--------[5, 30]-----
; [New][loadItemintoRegister] loading new of calss =  MatrixTraitement into memory at register R2
	NEW #1, R2
	BOV heap_overflow_error
	LEA 50(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.MatrixTraitement
	POP R2
; --------EndNew--------[5, 30]-----
	STORE R2, 1(GB)	; Initializing the variable mm and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(GB)	; Initializing the variable itrX and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 3(GB)	; Initializing the variable itrY and loading it into memory
; --------StartNewTable--------[24, 29]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  float[][] into memory at register R2
	LOAD #3, R3	; loading 3 into memory
	CMP #1, R3
	BLT int_allocation_table_must_be_strictly_positive
	PUSH R2
	LOAD #3, R2	; loading 3 into memory
	CMP #1, R2
	BLT int_allocation_table_must_be_strictly_positive
	LOAD R3, R1
	MUL R2, R1
	ADD #2, R1
	NEW R1, R0
	BOV heap_overflow_error
	STORE R3, 0(R0)
	STORE R2, 1(R0)
	POP R2
	LOAD R0, R2
; --------EndNewTable--------[24, 29]-----
	STORE R2, 4(GB)	; Initializing the variable matInver and loading it into memory
; --------BeginAssignOp--------[65, 8]-----
	LOAD #1, R3	; loading 1 into memory
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[65, 8]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	PUSH R2
	LOAD #0, R2	; loading 0 into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD #0, R3	; loading 0 into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 4(GB), R1	; [saving] loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[65, 8]-----
; --------EndAssignOp--------[65, 8]-----
; --------BeginAssignOp--------[66, 8]-----
	LOAD #2, R3	; loading 2 into memory
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[66, 8]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	PUSH R2
	LOAD #0, R2	; loading 0 into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD #1, R3	; loading 1 into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 4(GB), R1	; [saving] loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[66, 8]-----
; --------EndAssignOp--------[66, 8]-----
; --------BeginAssignOp--------[67, 8]-----
	LOAD #3, R3	; loading 3 into memory
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[67, 8]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	PUSH R2
	LOAD #0, R2	; loading 0 into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD #2, R3	; loading 2 into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 4(GB), R1	; [saving] loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[67, 8]-----
; --------EndAssignOp--------[67, 8]-----
; --------BeginAssignOp--------[68, 8]-----
	LOAD #0, R3	; loading 0 into memory
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[68, 8]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD #0, R3	; loading 0 into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 4(GB), R1	; [saving] loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[68, 8]-----
; --------EndAssignOp--------[68, 8]-----
; --------BeginAssignOp--------[69, 8]-----
	LOAD #1, R3	; loading 1 into memory
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[69, 8]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD #1, R3	; loading 1 into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 4(GB), R1	; [saving] loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[69, 8]-----
; --------EndAssignOp--------[69, 8]-----
; --------BeginAssignOp--------[70, 8]-----
	LOAD #4, R3	; loading 4 into memory
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[70, 8]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD #2, R3	; loading 2 into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 4(GB), R1	; [saving] loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[70, 8]-----
; --------EndAssignOp--------[70, 8]-----
; --------BeginAssignOp--------[71, 8]-----
	LOAD #5, R3	; loading 5 into memory
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[71, 8]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	PUSH R2
	LOAD #2, R2	; loading 2 into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD #0, R3	; loading 0 into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 4(GB), R1	; [saving] loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[71, 8]-----
; --------EndAssignOp--------[71, 8]-----
; --------BeginAssignOp--------[72, 8]-----
	LOAD #6, R3	; loading 6 into memory
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[72, 8]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	PUSH R2
	LOAD #2, R2	; loading 2 into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD #1, R3	; loading 1 into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 4(GB), R1	; [saving] loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[72, 8]-----
; --------EndAssignOp--------[72, 8]-----
; --------BeginAssignOp--------[73, 8]-----
	LOAD #4, R3	; loading 4 into memory
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[73, 8]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	PUSH R2
	LOAD #2, R2	; loading 2 into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD #2, R3	; loading 2 into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 4(GB), R1	; [saving] loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[73, 8]-----
; --------EndAssignOp--------[73, 8]-----
; --------BeginAssignOp--------[87, 8]-----
; --------BeginMethodCall--------[87, 21]-----
	ADDSP #2
	LOAD 1(GB), R3	; loading mm into memory
	STORE R3, 0(SP)
	LOAD 4(GB), R3	; loading matInver into memory
	STORE R3, -1(SP)
	LOAD 0(SP), R3
	CMP #null, R3	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R3), R3
	BSR 10(R3)
	LOAD R0, R3
	SUBSP #2
; --------EndMethodCall--------[87, 21]-----
	STORE R3, 5(GB)	;  Assiging a value to testMatInver
	LOAD R3, R2	;  Return value of the assignement of =testMatInverand storing it into R2
; --------EndAssignOp--------[87, 8]-----
; --------BeginAssignOp--------[90, 8]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 2(GB)	;  Assiging a value to itrX
	LOAD R3, R2	;  Return value of the assignement of =itrXand storing it into R2
; --------EndAssignOp--------[90, 8]-----
; --------BeginAssignOp--------[91, 8]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 3(GB)	;  Assiging a value to itrY
	LOAD R3, R2	;  Return value of the assignement of =itrYand storing it into R2
; --------EndAssignOp--------[91, 8]-----
	WSTR ""
	WNL
while_begin69:
; --------StartBinaryOp--------[108, 15]-----
	LOAD 2(GB), R2	; loading itrX into memory
; --------BeginSelection--------[108, 22]-----
	LOAD 5(GB), R3	; loading testMatInver into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[108, 22]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[108, 15]-----
	CMP #1, R2
	BNE while_end69
while_begin70:
; --------StartBinaryOp--------[109, 19]-----
	LOAD 3(GB), R2	; loading itrY into memory
; --------BeginSelection--------[109, 26]-----
	LOAD 5(GB), R3	; loading testMatInver into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[109, 26]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[109, 19]-----
	CMP #1, R2
	BNE while_end70
; --------StartGetTableElements--------[110, 22]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  testMatInver into memory at register R2
	LOAD 2(GB), R3	; loading itrX into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	PUSH R2
	LOAD 3(GB), R2	; loading itrY into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD 5(GB), R1	; loading testMatInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of testMatInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of testMatInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	MUL R0, R3
	ADD R2, R3
	LOAD 2(R1, R3), R0
	POP R2
	LOAD R0, R2
; --------EndGetTableElements--------[110, 22]-----
	LOAD R2, R1
	WFLOAT
	WSTR " "
; --------BeginAssignOp--------[112, 16]-----
; --------StartBinaryOp--------[112, 23]-----
	LOAD 3(GB), R3	; loading itrY into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[112, 23]-----
	STORE R3, 3(GB)	;  Assiging a value to itrY
	LOAD R3, R2	;  Return value of the assignement of =itrYand storing it into R2
; --------EndAssignOp--------[112, 16]-----
	BRA while_begin70
while_end70:
	WNL
; --------BeginAssignOp--------[115, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 3(GB)	;  Assiging a value to itrY
	LOAD R3, R2	;  Return value of the assignement of =itrYand storing it into R2
; --------EndAssignOp--------[115, 12]-----
; --------BeginAssignOp--------[116, 12]-----
; --------StartBinaryOp--------[116, 19]-----
	LOAD 2(GB), R3	; loading itrX into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[116, 19]-----
	STORE R3, 2(GB)	;  Assiging a value to itrX
	LOAD R3, R2	;  Return value of the assignement of =itrXand storing it into R2
; --------EndAssignOp--------[116, 12]-----
	BRA while_begin69
while_end69:
	HALT
; -------------------------------------
;        Classes
; -------------------------------------
; ---------------------------------------------------
; ----------------- class : Math -------------------
; ---------------------------------------------------
; ------------Init method for class = Math--------
init.Math:
	RTS
; ------------Code for method : setInt1DTable with label =  code.Math.setInt1DTable--------
code.Math.setInt1DTable:
	TSTO #4
	BOV stack_overflow_error
	ADDSP #1
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIterator and loading it into memory
while_begin1:
; --------StartBinaryOp--------[8, 15]-----
	LOAD 1(LB), R2	; loading tableIterator into memory
; --------BeginSelection--------[8, 31]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[8, 31]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[8, 15]-----
	CMP #1, R2
	BNE while_end1
; --------BeginAssignOp--------[9, 12]-----
	LOAD -4(LB), R3	; loading value into memory
; --------StartStoreTableElements--------[9, 12]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table the value in R3
	PUSH R2
	LOAD 1(LB), R2	; loading tableIterator into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading table into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD R2, R0
	POP R2
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[9, 12]-----
; --------EndAssignOp--------[9, 12]-----
; --------BeginAssignOp--------[10, 12]-----
; --------StartBinaryOp--------[10, 28]-----
	LOAD 1(LB), R3	; loading tableIterator into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[10, 28]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIterator
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorand storing it into R2
; --------EndAssignOp--------[10, 12]-----
	BRA while_begin1
while_end1:
fin.Math.setInt1DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : setInt2DTable with label =  code.Math.setInt2DTable--------
code.Math.setInt2DTable:
	TSTO #6
	BOV stack_overflow_error
	ADDSP #2
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIteratorX and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable tableIteratorY and loading it into memory
while_begin2:
; --------StartBinaryOp--------[17, 15]-----
	LOAD 2(LB), R2	; loading tableIteratorY into memory
; --------BeginSelection--------[17, 32]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[17, 32]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[17, 15]-----
	CMP #1, R2
	BNE while_end2
while_begin3:
; --------StartBinaryOp--------[18, 19]-----
	LOAD 1(LB), R2	; loading tableIteratorX into memory
; --------BeginSelection--------[18, 36]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[18, 36]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[18, 19]-----
	CMP #1, R2
	BNE while_end3
; --------BeginAssignOp--------[19, 16]-----
	LOAD -4(LB), R3	; loading value into memory
; --------StartStoreTableElements--------[19, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table the value in R3
	PUSH R2
	LOAD 1(LB), R2	; loading tableIteratorX into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 2(LB), R3	; loading tableIteratorY into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading table into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of table into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[19, 16]-----
; --------EndAssignOp--------[19, 16]-----
; --------BeginAssignOp--------[20, 16]-----
; --------StartBinaryOp--------[20, 33]-----
	LOAD 1(LB), R3	; loading tableIteratorX into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[20, 33]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[20, 16]-----
	BRA while_begin3
while_end3:
; --------BeginAssignOp--------[22, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[22, 12]-----
; --------BeginAssignOp--------[23, 12]-----
; --------StartBinaryOp--------[23, 29]-----
	LOAD 2(LB), R3	; loading tableIteratorY into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[23, 29]-----
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorY
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorYand storing it into R2
; --------EndAssignOp--------[23, 12]-----
	BRA while_begin2
while_end2:
fin.Math.setInt2DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : setFloat1DTable with label =  code.Math.setFloat1DTable--------
code.Math.setFloat1DTable:
	TSTO #4
	BOV stack_overflow_error
	ADDSP #1
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIterator and loading it into memory
while_begin4:
; --------StartBinaryOp--------[29, 15]-----
	LOAD 1(LB), R2	; loading tableIterator into memory
; --------BeginSelection--------[29, 31]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[29, 31]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[29, 15]-----
	CMP #1, R2
	BNE while_end4
; --------BeginAssignOp--------[30, 12]-----
	LOAD -4(LB), R3	; loading value into memory
; --------StartStoreTableElements--------[30, 12]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table the value in R3
	PUSH R2
	LOAD 1(LB), R2	; loading tableIterator into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading table into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD R2, R0
	POP R2
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[30, 12]-----
; --------EndAssignOp--------[30, 12]-----
; --------BeginAssignOp--------[31, 12]-----
; --------StartBinaryOp--------[31, 28]-----
	LOAD 1(LB), R3	; loading tableIterator into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[31, 28]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIterator
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorand storing it into R2
; --------EndAssignOp--------[31, 12]-----
	BRA while_begin4
while_end4:
fin.Math.setFloat1DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : setFloat2DTable with label =  code.Math.setFloat2DTable--------
code.Math.setFloat2DTable:
	TSTO #6
	BOV stack_overflow_error
	ADDSP #2
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIteratorX and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable tableIteratorY and loading it into memory
while_begin5:
; --------StartBinaryOp--------[38, 15]-----
	LOAD 2(LB), R2	; loading tableIteratorY into memory
; --------BeginSelection--------[38, 32]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[38, 32]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[38, 15]-----
	CMP #1, R2
	BNE while_end5
while_begin6:
; --------StartBinaryOp--------[39, 19]-----
	LOAD 1(LB), R2	; loading tableIteratorX into memory
; --------BeginSelection--------[39, 36]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[39, 36]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[39, 19]-----
	CMP #1, R2
	BNE while_end6
; --------BeginAssignOp--------[40, 16]-----
	LOAD -4(LB), R3	; loading value into memory
; --------StartStoreTableElements--------[40, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table the value in R3
	PUSH R2
	LOAD 1(LB), R2	; loading tableIteratorX into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 2(LB), R3	; loading tableIteratorY into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading table into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of table into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[40, 16]-----
; --------EndAssignOp--------[40, 16]-----
; --------BeginAssignOp--------[41, 16]-----
; --------StartBinaryOp--------[41, 33]-----
	LOAD 1(LB), R3	; loading tableIteratorX into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[41, 33]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[41, 16]-----
	BRA while_begin6
while_end6:
; --------BeginAssignOp--------[43, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[43, 12]-----
; --------BeginAssignOp--------[44, 12]-----
; --------StartBinaryOp--------[44, 29]-----
	LOAD 2(LB), R3	; loading tableIteratorY into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[44, 29]-----
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorY
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorYand storing it into R2
; --------EndAssignOp--------[44, 12]-----
	BRA while_begin5
while_end5:
fin.Math.setFloat2DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : printInt1DTable with label =  code.Math.printInt1DTable--------
code.Math.printInt1DTable:
	TSTO #4
	BOV stack_overflow_error
	ADDSP #1
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIterator and loading it into memory
	WSTR "--------------"
	WNL
	WSTR "Tableau1D = ["
	WNL
while_begin7:
; --------StartBinaryOp--------[52, 15]-----
	LOAD 1(LB), R2	; loading tableIterator into memory
; --------BeginSelection--------[52, 31]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[52, 31]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[52, 15]-----
	CMP #1, R2
	BNE while_end7
; --------StartGetTableElements--------[53, 18]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table into memory at register R2
	LOAD 1(LB), R3	; loading tableIterator into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading table into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1, R3), R0
	LOAD R0, R2
; --------EndGetTableElements--------[53, 18]-----
	LOAD R2, R1
	WINT
	WSTR " ,"
; --------BeginAssignOp--------[54, 12]-----
; --------StartBinaryOp--------[54, 28]-----
	LOAD 1(LB), R3	; loading tableIterator into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[54, 28]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIterator
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorand storing it into R2
; --------EndAssignOp--------[54, 12]-----
	BRA while_begin7
while_end7:
	WSTR "]"
	WSTR "--------------"
	WNL
fin.Math.printInt1DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : printInt2DTable with label =  code.Math.printInt2DTable--------
code.Math.printInt2DTable:
	TSTO #5
	BOV stack_overflow_error
	ADDSP #2
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIteratorX and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable tableIteratorY and loading it into memory
	WSTR "--------------"
	WNL
	WSTR "Tableau2D = ["
	WNL
while_begin8:
; --------StartBinaryOp--------[65, 15]-----
	LOAD 1(LB), R2	; loading tableIteratorX into memory
; --------BeginSelection--------[65, 32]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[65, 32]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[65, 15]-----
	CMP #1, R2
	BNE while_end8
while_begin9:
; --------StartBinaryOp--------[66, 19]-----
	LOAD 2(LB), R2	; loading tableIteratorY into memory
; --------BeginSelection--------[66, 36]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[66, 36]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[66, 19]-----
	CMP #1, R2
	BNE while_end9
; --------StartGetTableElements--------[67, 22]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table into memory at register R2
	LOAD 1(LB), R3	; loading tableIteratorX into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	PUSH R2
	LOAD 2(LB), R2	; loading tableIteratorY into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading table into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of table into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	MUL R0, R3
	ADD R2, R3
	LOAD 2(R1, R3), R0
	POP R2
	LOAD R0, R2
; --------EndGetTableElements--------[67, 22]-----
	LOAD R2, R1
	WINT
	WSTR " ,"
; --------BeginAssignOp--------[68, 16]-----
; --------StartBinaryOp--------[68, 33]-----
	LOAD 2(LB), R3	; loading tableIteratorY into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[68, 33]-----
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorY
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorYand storing it into R2
; --------EndAssignOp--------[68, 16]-----
	BRA while_begin9
while_end9:
	WSTR ""
	WNL
; --------BeginAssignOp--------[71, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorY
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorYand storing it into R2
; --------EndAssignOp--------[71, 12]-----
; --------BeginAssignOp--------[72, 12]-----
; --------StartBinaryOp--------[72, 29]-----
	LOAD 1(LB), R3	; loading tableIteratorX into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[72, 29]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[72, 12]-----
	BRA while_begin8
while_end8:
	WSTR "]"
	WSTR "--------------"
	WNL
fin.Math.printInt2DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : printFloat1DTable with label =  code.Math.printFloat1DTable--------
code.Math.printFloat1DTable:
	TSTO #4
	BOV stack_overflow_error
	ADDSP #1
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIterator and loading it into memory
	WSTR "--------------"
	WNL
	WSTR "Tableau1D = ["
	WNL
while_begin10:
; --------StartBinaryOp--------[82, 15]-----
	LOAD 1(LB), R2	; loading tableIterator into memory
; --------BeginSelection--------[82, 31]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[82, 31]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[82, 15]-----
	CMP #1, R2
	BNE while_end10
; --------StartGetTableElements--------[83, 18]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table into memory at register R2
	LOAD 1(LB), R3	; loading tableIterator into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading table into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1, R3), R0
	LOAD R0, R2
; --------EndGetTableElements--------[83, 18]-----
	LOAD R2, R1
	WFLOAT
	WSTR " ,"
; --------BeginAssignOp--------[84, 12]-----
; --------StartBinaryOp--------[84, 28]-----
	LOAD 1(LB), R3	; loading tableIterator into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[84, 28]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIterator
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorand storing it into R2
; --------EndAssignOp--------[84, 12]-----
	BRA while_begin10
while_end10:
	WSTR "]"
	WSTR "--------------"
	WNL
fin.Math.printFloat1DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : printFloat2DTable with label =  code.Math.printFloat2DTable--------
code.Math.printFloat2DTable:
	TSTO #5
	BOV stack_overflow_error
	ADDSP #2
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIteratorX and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable tableIteratorY and loading it into memory
	WSTR "--------------"
	WNL
	WSTR "Tableau2D = ["
	WNL
while_begin11:
; --------StartBinaryOp--------[95, 15]-----
	LOAD 1(LB), R2	; loading tableIteratorX into memory
; --------BeginSelection--------[95, 32]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[95, 32]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[95, 15]-----
	CMP #1, R2
	BNE while_end11
while_begin12:
; --------StartBinaryOp--------[96, 19]-----
	LOAD 2(LB), R2	; loading tableIteratorY into memory
; --------BeginSelection--------[96, 36]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[96, 36]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[96, 19]-----
	CMP #1, R2
	BNE while_end12
; --------StartGetTableElements--------[97, 22]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table into memory at register R2
	LOAD 1(LB), R3	; loading tableIteratorX into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	PUSH R2
	LOAD 2(LB), R2	; loading tableIteratorY into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading table into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of table into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	MUL R0, R3
	ADD R2, R3
	LOAD 2(R1, R3), R0
	POP R2
	LOAD R0, R2
; --------EndGetTableElements--------[97, 22]-----
	LOAD R2, R1
	WFLOAT
	WSTR " ,"
; --------BeginAssignOp--------[98, 16]-----
; --------StartBinaryOp--------[98, 33]-----
	LOAD 2(LB), R3	; loading tableIteratorY into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[98, 33]-----
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorY
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorYand storing it into R2
; --------EndAssignOp--------[98, 16]-----
	BRA while_begin12
while_end12:
	WSTR ""
	WNL
; --------BeginAssignOp--------[101, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorY
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorYand storing it into R2
; --------EndAssignOp--------[101, 12]-----
; --------BeginAssignOp--------[102, 12]-----
; --------StartBinaryOp--------[102, 29]-----
	LOAD 1(LB), R3	; loading tableIteratorX into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[102, 29]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[102, 12]-----
	BRA while_begin11
while_end11:
	WSTR "]"
	WSTR "--------------"
	WNL
fin.Math.printFloat2DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : copyIntInt1DTable with label =  code.Math.copyIntInt1DTable--------
code.Math.copyIntInt1DTable:
	TSTO #4
	BOV stack_overflow_error
	ADDSP #1
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable i and loading it into memory
; --------StartBinaryOp--------[110, 11]-----
; --------BeginSelection--------[110, 11]-----
	LOAD -4(LB), R2	; loading src into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[110, 11]-----
; --------BeginSelection--------[110, 24]-----
	LOAD -3(LB), R3	; loading dest into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[110, 24]-----
	CMP R3, R2	; Comparing registers for Greater operation 
	SGT R2	; Placing Greater result into the register  
; --------EndBinaryOp--------[110, 11]-----
; ---------Startif-----------[110, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else1
	WSTR "La taille du tableau copie doit être supérieure ou égale à la taille du tableau d'origine"
	WNL
; --------BeginMethodCall--------[112, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[112, 12]-----
	BRA end_ifthenelse_1
else1:
end_ifthenelse_1:
; ---------Endif-----------
while_begin13:
; --------StartBinaryOp--------[114, 14]-----
	LOAD 1(LB), R2	; loading i into memory
; --------BeginSelection--------[114, 18]-----
	LOAD -4(LB), R3	; loading src into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[114, 18]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[114, 14]-----
	CMP #1, R2
	BNE while_end13
; --------BeginAssignOp--------[115, 12]-----
; --------StartGetTableElements--------[115, 22]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  src into memory at register R3
	PUSH R2
	LOAD 1(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD -4(LB), R1	; loading src into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of src into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1, R2), R0
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[115, 22]-----
; --------StartStoreTableElements--------[115, 12]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  dest the value in R3
	PUSH R2
	LOAD 1(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading dest into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of dest into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD R2, R0
	POP R2
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[115, 12]-----
; --------EndAssignOp--------[115, 12]-----
; --------BeginAssignOp--------[116, 12]-----
; --------StartBinaryOp--------[116, 16]-----
	LOAD 1(LB), R3	; loading i into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[116, 16]-----
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[116, 12]-----
	BRA while_begin13
while_end13:
fin.Math.copyIntInt1DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : copyIntInt2DTable with label =  code.Math.copyIntInt2DTable--------
code.Math.copyIntInt2DTable:
	TSTO #6
	BOV stack_overflow_error
	ADDSP #2
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable i and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable j and loading it into memory
; --------StartOr--------[123, 11]-----
; --------StartBinaryOp--------[123, 11]-----
; --------BeginSelection--------[123, 11]-----
	LOAD -4(LB), R2	; loading src into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[123, 11]-----
; --------BeginSelection--------[123, 24]-----
	LOAD -3(LB), R3	; loading dest into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[123, 24]-----
	CMP R3, R2	; Comparing registers for Greater operation 
	SGT R2	; Placing Greater result into the register  
; --------EndBinaryOp--------[123, 11]-----
	CMP #1, R2	; [Or]Comparing in the left branch 
	BEQ End_Or_Id_1	; [Or] checking if the first element is false
; --------StartBinaryOp--------[123, 39]-----
; --------BeginSelection--------[123, 39]-----
	LOAD -4(LB), R3	; loading src into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[123, 39]-----
; --------BeginSelection--------[123, 52]-----
	PUSH R2
	LOAD -3(LB), R2	; loading dest into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R2), R2	; Loading the field size2D into a register 
; --------BeginSelection--------[123, 52]-----
	CMP R2, R3	; Comparing registers for Greater operation 
	SGT R3	; Placing Greater result into the register  
	POP R2
; --------EndBinaryOp--------[123, 39]-----
	CMP #0, R3	; [Or]Comparing in the right branch 
	BEQ End_Or_Id_1	; [OR] checking if the second element is true 
	LOAD #1, R2	; Or is true , We place the value 1 in the return Register
End_Or_Id_1:
; --------EndOr--------[123, 11]-----
; ---------Startif-----------[123, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else2
	WSTR "La taille du tableau copie doit être supérieure ou égale à la taille du tableau d'origine"
	WNL
; --------BeginMethodCall--------[125, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[125, 12]-----
	BRA end_ifthenelse_2
else2:
end_ifthenelse_2:
; ---------Endif-----------
while_begin14:
; --------StartBinaryOp--------[127, 15]-----
	LOAD 2(LB), R2	; loading j into memory
; --------BeginSelection--------[127, 19]-----
	LOAD -4(LB), R3	; loading src into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[127, 19]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[127, 15]-----
	CMP #1, R2
	BNE while_end14
while_begin15:
; --------StartBinaryOp--------[128, 19]-----
	LOAD 1(LB), R2	; loading i into memory
; --------BeginSelection--------[128, 23]-----
	LOAD -4(LB), R3	; loading src into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[128, 23]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[128, 19]-----
	CMP #1, R2
	BNE while_end15
; --------BeginAssignOp--------[129, 16]-----
; --------StartGetTableElements--------[129, 29]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  src into memory at register R3
	PUSH R2
	LOAD 1(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 2(LB), R3	; loading j into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -4(LB), R1	; loading src into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of src into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of src into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[129, 29]-----
; --------StartStoreTableElements--------[129, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  dest the value in R3
	PUSH R2
	LOAD 1(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 2(LB), R3	; loading j into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading dest into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of dest into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of dest into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[129, 16]-----
; --------EndAssignOp--------[129, 16]-----
; --------BeginAssignOp--------[130, 16]-----
; --------StartBinaryOp--------[130, 20]-----
	LOAD 1(LB), R3	; loading i into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[130, 20]-----
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[130, 16]-----
	BRA while_begin15
while_end15:
; --------BeginAssignOp--------[132, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[132, 12]-----
; --------BeginAssignOp--------[133, 12]-----
; --------StartBinaryOp--------[133, 16]-----
	LOAD 2(LB), R3	; loading j into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[133, 16]-----
	STORE R3, 2(LB)	;  Assiging a value to j
	LOAD R3, R2	;  Return value of the assignement of =jand storing it into R2
; --------EndAssignOp--------[133, 12]-----
	BRA while_begin14
while_end14:
fin.Math.copyIntInt2DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : copyFloatFloat1DTable with label =  code.Math.copyFloatFloat1DTable--------
code.Math.copyFloatFloat1DTable:
	TSTO #4
	BOV stack_overflow_error
	ADDSP #1
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable i and loading it into memory
; --------StartBinaryOp--------[139, 11]-----
; --------BeginSelection--------[139, 11]-----
	LOAD -4(LB), R2	; loading src into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[139, 11]-----
; --------BeginSelection--------[139, 24]-----
	LOAD -3(LB), R3	; loading dest into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[139, 24]-----
	CMP R3, R2	; Comparing registers for Greater operation 
	SGT R2	; Placing Greater result into the register  
; --------EndBinaryOp--------[139, 11]-----
; ---------Startif-----------[139, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else3
	WSTR "La taille du tableau copie doit être supérieure ou égale à la taille du tableau d'origine"
	WNL
; --------BeginMethodCall--------[141, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[141, 12]-----
	BRA end_ifthenelse_3
else3:
end_ifthenelse_3:
; ---------Endif-----------
while_begin16:
; --------StartBinaryOp--------[143, 14]-----
	LOAD 1(LB), R2	; loading i into memory
; --------BeginSelection--------[143, 18]-----
	LOAD -4(LB), R3	; loading src into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[143, 18]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[143, 14]-----
	CMP #1, R2
	BNE while_end16
; --------BeginAssignOp--------[144, 12]-----
; --------StartGetTableElements--------[144, 22]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  src into memory at register R3
	PUSH R2
	LOAD 1(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD -4(LB), R1	; loading src into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of src into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1, R2), R0
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[144, 22]-----
; --------StartStoreTableElements--------[144, 12]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  dest the value in R3
	PUSH R2
	LOAD 1(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading dest into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of dest into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD R2, R0
	POP R2
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[144, 12]-----
; --------EndAssignOp--------[144, 12]-----
; --------BeginAssignOp--------[145, 12]-----
; --------StartBinaryOp--------[145, 16]-----
	LOAD 1(LB), R3	; loading i into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[145, 16]-----
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[145, 12]-----
	BRA while_begin16
while_end16:
fin.Math.copyFloatFloat1DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : copyFloatFloat2DTable with label =  code.Math.copyFloatFloat2DTable--------
code.Math.copyFloatFloat2DTable:
	TSTO #6
	BOV stack_overflow_error
	ADDSP #2
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable i and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable j and loading it into memory
; --------StartOr--------[152, 11]-----
; --------StartBinaryOp--------[152, 11]-----
; --------BeginSelection--------[152, 11]-----
	LOAD -4(LB), R2	; loading src into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[152, 11]-----
; --------BeginSelection--------[152, 24]-----
	LOAD -3(LB), R3	; loading dest into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[152, 24]-----
	CMP R3, R2	; Comparing registers for Greater operation 
	SGT R2	; Placing Greater result into the register  
; --------EndBinaryOp--------[152, 11]-----
	CMP #1, R2	; [Or]Comparing in the left branch 
	BEQ End_Or_Id_2	; [Or] checking if the first element is false
; --------StartBinaryOp--------[152, 39]-----
; --------BeginSelection--------[152, 39]-----
	LOAD -4(LB), R3	; loading src into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[152, 39]-----
; --------BeginSelection--------[152, 52]-----
	PUSH R2
	LOAD -3(LB), R2	; loading dest into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R2), R2	; Loading the field size2D into a register 
; --------BeginSelection--------[152, 52]-----
	CMP R2, R3	; Comparing registers for Greater operation 
	SGT R3	; Placing Greater result into the register  
	POP R2
; --------EndBinaryOp--------[152, 39]-----
	CMP #0, R3	; [Or]Comparing in the right branch 
	BEQ End_Or_Id_2	; [OR] checking if the second element is true 
	LOAD #1, R2	; Or is true , We place the value 1 in the return Register
End_Or_Id_2:
; --------EndOr--------[152, 11]-----
; ---------Startif-----------[152, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else4
	WSTR "La taille du tableau copie doit être supérieure ou égale à la taille du tableau d'origine"
	WNL
; --------BeginMethodCall--------[154, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[154, 12]-----
	BRA end_ifthenelse_4
else4:
end_ifthenelse_4:
; ---------Endif-----------
while_begin17:
; --------StartBinaryOp--------[156, 15]-----
	LOAD 2(LB), R2	; loading j into memory
; --------BeginSelection--------[156, 19]-----
	LOAD -4(LB), R3	; loading src into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[156, 19]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[156, 15]-----
	CMP #1, R2
	BNE while_end17
while_begin18:
; --------StartBinaryOp--------[157, 19]-----
	LOAD 1(LB), R2	; loading i into memory
; --------BeginSelection--------[157, 23]-----
	LOAD -4(LB), R3	; loading src into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[157, 23]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[157, 19]-----
	CMP #1, R2
	BNE while_end18
; --------BeginAssignOp--------[158, 16]-----
; --------StartGetTableElements--------[158, 29]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  src into memory at register R3
	PUSH R2
	LOAD 1(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 2(LB), R3	; loading j into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -4(LB), R1	; loading src into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of src into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of src into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[158, 29]-----
; --------StartStoreTableElements--------[158, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  dest the value in R3
	PUSH R2
	LOAD 1(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 2(LB), R3	; loading j into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading dest into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of dest into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of dest into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[158, 16]-----
; --------EndAssignOp--------[158, 16]-----
; --------BeginAssignOp--------[159, 16]-----
; --------StartBinaryOp--------[159, 20]-----
	LOAD 1(LB), R3	; loading i into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[159, 20]-----
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[159, 16]-----
	BRA while_begin18
while_end18:
; --------BeginAssignOp--------[161, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[161, 12]-----
; --------BeginAssignOp--------[162, 12]-----
; --------StartBinaryOp--------[162, 16]-----
	LOAD 2(LB), R3	; loading j into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[162, 16]-----
	STORE R3, 2(LB)	;  Assiging a value to j
	LOAD R3, R2	;  Return value of the assignement of =jand storing it into R2
; --------EndAssignOp--------[162, 12]-----
	BRA while_begin17
while_end17:
fin.Math.copyFloatFloat2DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : copyFloatInt1DTable with label =  code.Math.copyFloatInt1DTable--------
code.Math.copyFloatInt1DTable:
	TSTO #4
	BOV stack_overflow_error
	ADDSP #1
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable i and loading it into memory
; --------StartBinaryOp--------[168, 11]-----
; --------BeginSelection--------[168, 11]-----
	LOAD -4(LB), R2	; loading src into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[168, 11]-----
; --------BeginSelection--------[168, 24]-----
	LOAD -3(LB), R3	; loading dest into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[168, 24]-----
	CMP R3, R2	; Comparing registers for Greater operation 
	SGT R2	; Placing Greater result into the register  
; --------EndBinaryOp--------[168, 11]-----
; ---------Startif-----------[168, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else5
	WSTR "La taille du tableau copie doit être supérieure ou égale à la taille du tableau d'origine"
	WNL
; --------BeginMethodCall--------[170, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[170, 12]-----
	BRA end_ifthenelse_5
else5:
end_ifthenelse_5:
; ---------Endif-----------
while_begin19:
; --------StartBinaryOp--------[172, 14]-----
	LOAD 1(LB), R2	; loading i into memory
; --------BeginSelection--------[172, 18]-----
	LOAD -4(LB), R3	; loading src into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[172, 18]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[172, 14]-----
	CMP #1, R2
	BNE while_end19
; --------BeginAssignOp--------[173, 12]-----
; --------StartGetTableElements--------[173, 30]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  src into memory at register R3
	PUSH R2
	LOAD 1(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD -4(LB), R1	; loading src into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of src into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1, R2), R0
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[173, 30]-----
	FLOAT R3, R3
; --------StartStoreTableElements--------[173, 12]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  dest the value in R3
	PUSH R2
	LOAD 1(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading dest into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of dest into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD R2, R0
	POP R2
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[173, 12]-----
; --------EndAssignOp--------[173, 12]-----
; --------BeginAssignOp--------[174, 12]-----
; --------StartBinaryOp--------[174, 16]-----
	LOAD 1(LB), R3	; loading i into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[174, 16]-----
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[174, 12]-----
	BRA while_begin19
while_end19:
fin.Math.copyFloatInt1DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : copyFloatInt2DTable with label =  code.Math.copyFloatInt2DTable--------
code.Math.copyFloatInt2DTable:
	TSTO #6
	BOV stack_overflow_error
	ADDSP #2
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable i and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable j and loading it into memory
; --------StartOr--------[181, 11]-----
; --------StartBinaryOp--------[181, 11]-----
; --------BeginSelection--------[181, 11]-----
	LOAD -4(LB), R2	; loading src into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[181, 11]-----
; --------BeginSelection--------[181, 24]-----
	LOAD -3(LB), R3	; loading dest into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[181, 24]-----
	CMP R3, R2	; Comparing registers for Greater operation 
	SGT R2	; Placing Greater result into the register  
; --------EndBinaryOp--------[181, 11]-----
	CMP #1, R2	; [Or]Comparing in the left branch 
	BEQ End_Or_Id_3	; [Or] checking if the first element is false
; --------StartBinaryOp--------[181, 39]-----
; --------BeginSelection--------[181, 39]-----
	LOAD -4(LB), R3	; loading src into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[181, 39]-----
; --------BeginSelection--------[181, 52]-----
	PUSH R2
	LOAD -3(LB), R2	; loading dest into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R2), R2	; Loading the field size2D into a register 
; --------BeginSelection--------[181, 52]-----
	CMP R2, R3	; Comparing registers for Greater operation 
	SGT R3	; Placing Greater result into the register  
	POP R2
; --------EndBinaryOp--------[181, 39]-----
	CMP #0, R3	; [Or]Comparing in the right branch 
	BEQ End_Or_Id_3	; [OR] checking if the second element is true 
	LOAD #1, R2	; Or is true , We place the value 1 in the return Register
End_Or_Id_3:
; --------EndOr--------[181, 11]-----
; ---------Startif-----------[181, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else6
	WSTR "La taille du tableau copie doit être supérieure ou égale à la taille du tableau d'origine"
	WNL
; --------BeginMethodCall--------[183, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[183, 12]-----
	BRA end_ifthenelse_6
else6:
end_ifthenelse_6:
; ---------Endif-----------
while_begin20:
; --------StartBinaryOp--------[185, 15]-----
	LOAD 2(LB), R2	; loading j into memory
; --------BeginSelection--------[185, 19]-----
	LOAD -4(LB), R3	; loading src into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[185, 19]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[185, 15]-----
	CMP #1, R2
	BNE while_end20
while_begin21:
; --------StartBinaryOp--------[186, 19]-----
	LOAD 1(LB), R2	; loading i into memory
; --------BeginSelection--------[186, 23]-----
	LOAD -4(LB), R3	; loading src into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[186, 23]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[186, 19]-----
	CMP #1, R2
	BNE while_end21
; --------BeginAssignOp--------[187, 16]-----
; --------StartGetTableElements--------[187, 37]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  src into memory at register R3
	PUSH R2
	LOAD 1(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 2(LB), R3	; loading j into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -4(LB), R1	; loading src into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of src into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of src into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[187, 37]-----
	FLOAT R3, R3
; --------StartStoreTableElements--------[187, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  dest the value in R3
	PUSH R2
	LOAD 1(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 2(LB), R3	; loading j into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading dest into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of dest into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of dest into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[187, 16]-----
; --------EndAssignOp--------[187, 16]-----
; --------BeginAssignOp--------[188, 16]-----
; --------StartBinaryOp--------[188, 20]-----
	LOAD 1(LB), R3	; loading i into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[188, 20]-----
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[188, 16]-----
	BRA while_begin21
while_end21:
; --------BeginAssignOp--------[190, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[190, 12]-----
; --------BeginAssignOp--------[191, 12]-----
; --------StartBinaryOp--------[191, 16]-----
	LOAD 2(LB), R3	; loading j into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[191, 16]-----
	STORE R3, 2(LB)	;  Assiging a value to j
	LOAD R3, R2	;  Return value of the assignement of =jand storing it into R2
; --------EndAssignOp--------[191, 12]-----
	BRA while_begin20
while_end20:
fin.Math.copyFloatInt2DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : copyIntFloat1DTable with label =  code.Math.copyIntFloat1DTable--------
code.Math.copyIntFloat1DTable:
	TSTO #4
	BOV stack_overflow_error
	ADDSP #1
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable i and loading it into memory
; --------StartBinaryOp--------[197, 11]-----
; --------BeginSelection--------[197, 11]-----
	LOAD -4(LB), R2	; loading src into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[197, 11]-----
; --------BeginSelection--------[197, 24]-----
	LOAD -3(LB), R3	; loading dest into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[197, 24]-----
	CMP R3, R2	; Comparing registers for Greater operation 
	SGT R2	; Placing Greater result into the register  
; --------EndBinaryOp--------[197, 11]-----
; ---------Startif-----------[197, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else7
	WSTR "La taille du tableau copie doit être supérieure ou égale à la taille du tableau d'origine"
	WNL
; --------BeginMethodCall--------[199, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[199, 12]-----
	BRA end_ifthenelse_7
else7:
end_ifthenelse_7:
; ---------Endif-----------
while_begin22:
; --------StartBinaryOp--------[201, 14]-----
	LOAD 1(LB), R2	; loading i into memory
; --------BeginSelection--------[201, 18]-----
	LOAD -4(LB), R3	; loading src into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[201, 18]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[201, 14]-----
	CMP #1, R2
	BNE while_end22
; --------BeginAssignOp--------[202, 12]-----
; --------StartGetTableElements--------[202, 28]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  src into memory at register R3
	PUSH R2
	LOAD 1(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD -4(LB), R1	; loading src into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of src into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1, R2), R0
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[202, 28]-----
; --------StartStoreTableElements--------[202, 12]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  dest the value in R3
	PUSH R2
	LOAD 1(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading dest into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of dest into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD R2, R0
	POP R2
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[202, 12]-----
; --------EndAssignOp--------[202, 12]-----
; --------BeginAssignOp--------[203, 12]-----
; --------StartBinaryOp--------[203, 16]-----
	LOAD 1(LB), R3	; loading i into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[203, 16]-----
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[203, 12]-----
	BRA while_begin22
while_end22:
fin.Math.copyIntFloat1DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : copyIntFloat2DTable with label =  code.Math.copyIntFloat2DTable--------
code.Math.copyIntFloat2DTable:
	TSTO #6
	BOV stack_overflow_error
	ADDSP #2
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable i and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable j and loading it into memory
; --------StartOr--------[210, 11]-----
; --------StartBinaryOp--------[210, 11]-----
; --------BeginSelection--------[210, 11]-----
	LOAD -4(LB), R2	; loading src into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[210, 11]-----
; --------BeginSelection--------[210, 24]-----
	LOAD -3(LB), R3	; loading dest into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[210, 24]-----
	CMP R3, R2	; Comparing registers for Greater operation 
	SGT R2	; Placing Greater result into the register  
; --------EndBinaryOp--------[210, 11]-----
	CMP #1, R2	; [Or]Comparing in the left branch 
	BEQ End_Or_Id_4	; [Or] checking if the first element is false
; --------StartBinaryOp--------[210, 39]-----
; --------BeginSelection--------[210, 39]-----
	LOAD -4(LB), R3	; loading src into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[210, 39]-----
; --------BeginSelection--------[210, 52]-----
	PUSH R2
	LOAD -3(LB), R2	; loading dest into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R2), R2	; Loading the field size2D into a register 
; --------BeginSelection--------[210, 52]-----
	CMP R2, R3	; Comparing registers for Greater operation 
	SGT R3	; Placing Greater result into the register  
	POP R2
; --------EndBinaryOp--------[210, 39]-----
	CMP #0, R3	; [Or]Comparing in the right branch 
	BEQ End_Or_Id_4	; [OR] checking if the second element is true 
	LOAD #1, R2	; Or is true , We place the value 1 in the return Register
End_Or_Id_4:
; --------EndOr--------[210, 11]-----
; ---------Startif-----------[210, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else8
	WSTR "La taille du tableau copie doit être supérieure ou égale à la taille du tableau d'origine"
	WNL
; --------BeginMethodCall--------[212, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[212, 12]-----
	BRA end_ifthenelse_8
else8:
end_ifthenelse_8:
; ---------Endif-----------
while_begin23:
; --------StartBinaryOp--------[214, 15]-----
	LOAD 2(LB), R2	; loading j into memory
; --------BeginSelection--------[214, 19]-----
	LOAD -4(LB), R3	; loading src into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[214, 19]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[214, 15]-----
	CMP #1, R2
	BNE while_end23
while_begin24:
; --------StartBinaryOp--------[215, 19]-----
	LOAD 1(LB), R2	; loading i into memory
; --------BeginSelection--------[215, 23]-----
	LOAD -4(LB), R3	; loading src into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[215, 23]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[215, 19]-----
	CMP #1, R2
	BNE while_end24
; --------BeginAssignOp--------[216, 16]-----
; --------StartGetTableElements--------[216, 35]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  src into memory at register R3
	PUSH R2
	LOAD 1(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 2(LB), R3	; loading j into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -4(LB), R1	; loading src into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of src into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of src into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[216, 35]-----
	INT R3, R3
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[216, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  dest the value in R3
	PUSH R2
	LOAD 1(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 2(LB), R3	; loading j into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading dest into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of dest into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of dest into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[216, 16]-----
; --------EndAssignOp--------[216, 16]-----
; --------BeginAssignOp--------[217, 16]-----
; --------StartBinaryOp--------[217, 20]-----
	LOAD 1(LB), R3	; loading i into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[217, 20]-----
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[217, 16]-----
	BRA while_begin24
while_end24:
; --------BeginAssignOp--------[219, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[219, 12]-----
; --------BeginAssignOp--------[220, 12]-----
; --------StartBinaryOp--------[220, 16]-----
	LOAD 2(LB), R3	; loading j into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[220, 16]-----
	STORE R3, 2(LB)	;  Assiging a value to j
	LOAD R3, R2	;  Return value of the assignement of =jand storing it into R2
; --------EndAssignOp--------[220, 12]-----
	BRA while_begin23
while_end23:
fin.Math.copyIntFloat2DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : dimensionIncompatible with label =  code.Math.dimensionIncompatible--------
code.Math.dimensionIncompatible:
	TSTO #2
	BOV stack_overflow_error
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	WSTR "Erreur de dimension"
	WNL
; --------BeginMethodCall--------[226, 8]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 19(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[226, 8]-----
fin.Math.dimensionIncompatible:
	POP R2	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : throwError with label =  code.Math.throwError--------
code.Math.throwError:
;  ---------ClassBodyAsmCodeGeneration------
ERROR 
fin.Math.throwError:
	RTS
; ---------------------------------------------------
; ----------------- class : Det -------------------
; ---------------------------------------------------
; ------------Init method for class = Det--------
init.Det:
	TSTO #3
	BOV stack_overflow_error
	LOAD -2(LB), R0	; Placing the current class = Det adresse in the the stack before calling parent 
	PUSH R0	; Placing this = Det into the stack
	BSR init.Math	; Calling the initialisation method of parent classMath
	SUBSP #1
	RTS
; ------------Code for method : bareissIntDeterminant with label =  code.Det.bareissIntDeterminant--------
code.Det.bareissIntDeterminant:
	TSTO #13
	BOV stack_overflow_error
	ADDSP #7
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------BeginSelection--------[5, 16]-----
	LOAD -3(LB), R2	; loading a into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[5, 16]-----
	STORE R2, 1(LB)	; Initializing the variable n and loading it into memory
	LOAD #1, R2	; loading 1 into memory
	FLOAT R2, R2	; Doing an unary minus
	STORE R2, 2(LB)	; Initializing the variable det and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 3(LB)	; Initializing the variable i and loading it into memory
; --------StartBinaryOp--------[13, 11]-----
; --------BeginSelection--------[13, 11]-----
	LOAD -3(LB), R2	; loading a into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[13, 11]-----
; --------BeginSelection--------[13, 23]-----
	LOAD -3(LB), R3	; loading a into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[13, 23]-----
	CMP R3, R2	; Comparing registers for NotEquals operation 
	SNE R2	; Placing NotEquals result into the register  
; --------EndBinaryOp--------[13, 11]-----
; ---------Startif-----------[13, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else9
	WSTR "La matrice doit être carrée pour le calcul du déterminant: "
; --------BeginSelection--------[14, 83]-----
	LOAD -3(LB), R2	; loading a into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[14, 83]-----
	LOAD R2, R1
	WINT
	WSTR " != "
; --------BeginSelection--------[14, 101]-----
	LOAD -3(LB), R3	; loading a into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[14, 101]-----
	LOAD R3, R1
	WINT
	WNL
; --------BeginMethodCall--------[15, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[15, 12]-----
	BRA end_ifthenelse_9
else9:
end_ifthenelse_9:
; ---------Endif-----------
; --------BeginAssignOp--------[17, 8]-----
; --------StartNewTable--------[17, 12]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  float[][] into memory at register R3
	PUSH R2
	LOAD 1(LB), R2	; loading n into memory
	CMP #1, R2
	BLT int_allocation_table_must_be_strictly_positive
	PUSH R3
	LOAD 1(LB), R3	; loading n into memory
	CMP #1, R3
	BLT int_allocation_table_must_be_strictly_positive
	LOAD R2, R1
	MUL R3, R1
	ADD #2, R1
	NEW R1, R0
	BOV heap_overflow_error
	STORE R2, 0(R0)
	STORE R3, 1(R0)
	POP R2
	POP R3
	LOAD R0, R3
; --------EndNewTable--------[17, 12]-----
	STORE R3, 7(LB)	;  Assiging a value to b
	LOAD R3, R2	;  Return value of the assignement of =band storing it into R2
; --------EndAssignOp--------[17, 8]-----
; --------BeginMethodCall--------[18, 8]-----
	ADDSP #3
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 7(LB), R2	; loading b into memory
	STORE R2, -1(SP)
	LOAD -3(LB), R2	; loading a into memory
	STORE R2, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 15(R2)
	LOAD R0, R2
	SUBSP #3
; --------EndMethodCall--------[18, 8]-----
while_begin25:
; --------StartBinaryOp--------[19, 15]-----
	LOAD 3(LB), R2	; loading i into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[19, 15]-----
	CMP #1, R2
	BNE while_end25
; --------StartBinaryOp--------[20, 16]-----
; --------StartGetTableElements--------[20, 16]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  a into memory at register R2
	LOAD 3(LB), R3	; loading i into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	PUSH R2
	LOAD 3(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading a into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of a into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of a into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	MUL R0, R3
	ADD R2, R3
	LOAD 2(R1, R3), R0
	POP R2
	LOAD R0, R2
; --------EndGetTableElements--------[20, 16]-----
	LOAD #0, R3	; loading 0 into memory
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[20, 16]-----
; ---------Startif-----------[20, 12]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else10
	LOAD #0, R2	; loading 0 into memory
	LOAD R2, R0
	BRA fin.Det.bareissIntDeterminant
	BRA end_ifthenelse_10
else10:
end_ifthenelse_10:
; ---------Endif-----------
; --------BeginAssignOp--------[23, 12]-----
; --------StartBinaryOp--------[23, 16]-----
	LOAD 3(LB), R3	; loading i into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[23, 16]-----
	STORE R3, 4(LB)	;  Assiging a value to j
	LOAD R3, R2	;  Return value of the assignement of =jand storing it into R2
; --------EndAssignOp--------[23, 12]-----
while_begin26:
; --------StartBinaryOp--------[24, 19]-----
	LOAD 4(LB), R2	; loading j into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[24, 19]-----
	CMP #1, R2
	BNE while_end26
; --------StartBinaryOp--------[25, 20]-----
; --------StartGetTableElements--------[25, 20]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  b into memory at register R2
	LOAD 3(LB), R3	; loading i into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	PUSH R2
	LOAD 3(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD 7(LB), R1	; loading b into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of b into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of b into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	MUL R0, R3
	ADD R2, R3
	LOAD 2(R1, R3), R0
	POP R2
	LOAD R0, R2
; --------EndGetTableElements--------[25, 20]-----
	LOAD #0x1.0c6f7ap-20, R3	; loading 1.0E-6 into memory
	CMP R3, R2	; Comparing registers for LowerOrEqual operation 
	SLE R2	; Placing LowerOrEqual result into the register  
; --------EndBinaryOp--------[25, 20]-----
; ---------Startif-----------[25, 16]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else11
	LOAD #0, R2	; loading 0 into memory
	LOAD R2, R0
	BRA fin.Det.bareissIntDeterminant
	BRA end_ifthenelse_11
else11:
end_ifthenelse_11:
; ---------Endif-----------
; --------BeginAssignOp--------[28, 16]-----
; --------StartBinaryOp--------[28, 20]-----
; --------StartGetTableElements--------[28, 20]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  b into memory at register R3
	PUSH R2
	LOAD 4(LB), R2	; loading j into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 3(LB), R3	; loading i into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 7(LB), R1	; loading b into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of b into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of b into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[28, 20]-----
; --------StartGetTableElements--------[28, 30]-----
	PUSH R2
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  b into memory at register R2
	PUSH R3
	LOAD 3(LB), R3	; loading i into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	PUSH R2
	LOAD 3(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD 7(LB), R1	; loading b into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of b into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of b into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	MUL R0, R3
	ADD R2, R3
	LOAD 2(R1, R3), R0
	POP R2
	POP R3
	LOAD R0, R2
; --------EndGetTableElements--------[28, 30]-----
	DIV R2, R3
	BOV overflow_error	; Checking for overflow since the operation is between two floats 
	POP R2
; --------EndBinaryOp--------[28, 20]-----
	STORE R3, 6(LB)	;  Assiging a value to t
	LOAD R3, R2	;  Return value of the assignement of =tand storing it into R2
; --------EndAssignOp--------[28, 16]-----
; --------BeginAssignOp--------[29, 16]-----
	LOAD 3(LB), R3	; loading i into memory
	STORE R3, 5(LB)	;  Assiging a value to k
	LOAD R3, R2	;  Return value of the assignement of =kand storing it into R2
; --------EndAssignOp--------[29, 16]-----
while_begin27:
; --------StartBinaryOp--------[30, 23]-----
	LOAD 5(LB), R2	; loading k into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[30, 23]-----
	CMP #1, R2
	BNE while_end27
; --------BeginAssignOp--------[32, 20]-----
; --------StartBinaryOp--------[32, 30]-----
; --------StartGetTableElements--------[32, 30]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  b into memory at register R3
	PUSH R2
	LOAD 4(LB), R2	; loading j into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 5(LB), R3	; loading k into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 7(LB), R1	; loading b into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of b into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of b into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[32, 30]-----
; --------StartBinaryOp--------[32, 40]-----
	PUSH R2
	LOAD 6(LB), R2	; loading t into memory
; --------StartGetTableElements--------[32, 44]-----
	PUSH R3
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  b into memory at register R3
	PUSH R2
	LOAD 3(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 5(LB), R3	; loading k into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 7(LB), R1	; loading b into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of b into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of b into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[32, 44]-----
	MUL R3, R2
	BOV overflow_error	; Checking for overflow since the operation is between two floats 
	POP R3
; --------EndBinaryOp--------[32, 40]-----
	SUB R2, R3
	BOV overflow_error	; Checking for overflow since the operation is between two floats 
	POP R2
; --------EndBinaryOp--------[32, 30]-----
; --------StartStoreTableElements--------[32, 20]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  b the value in R3
	PUSH R2
	LOAD 4(LB), R2	; loading j into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 5(LB), R3	; loading k into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 7(LB), R1	; [saving] loading b into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of b into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of b into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[32, 20]-----
; --------EndAssignOp--------[32, 20]-----
; --------BeginAssignOp--------[33, 20]-----
; --------StartBinaryOp--------[33, 24]-----
	LOAD 5(LB), R3	; loading k into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[33, 24]-----
	STORE R3, 5(LB)	;  Assiging a value to k
	LOAD R3, R2	;  Return value of the assignement of =kand storing it into R2
; --------EndAssignOp--------[33, 20]-----
	BRA while_begin27
while_end27:
; --------BeginAssignOp--------[35, 16]-----
; --------StartBinaryOp--------[35, 20]-----
	LOAD 4(LB), R3	; loading j into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[35, 20]-----
	STORE R3, 4(LB)	;  Assiging a value to j
	LOAD R3, R2	;  Return value of the assignement of =jand storing it into R2
; --------EndAssignOp--------[35, 16]-----
	BRA while_begin26
while_end26:
; --------BeginAssignOp--------[37, 12]-----
; --------StartBinaryOp--------[37, 18]-----
	LOAD 2(LB), R3	; loading det into memory
; --------StartGetTableElements--------[37, 24]-----
	PUSH R2
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  b into memory at register R2
	PUSH R3
	LOAD 3(LB), R3	; loading i into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	PUSH R2
	LOAD 3(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD 7(LB), R1	; loading b into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of b into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of b into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	MUL R0, R3
	ADD R2, R3
	LOAD 2(R1, R3), R0
	POP R2
	POP R3
	LOAD R0, R2
; --------EndGetTableElements--------[37, 24]-----
	MUL R2, R3
	BOV overflow_error	; Checking for overflow since the operation is between two floats 
	POP R2
; --------EndBinaryOp--------[37, 18]-----
	STORE R3, 2(LB)	;  Assiging a value to det
	LOAD R3, R2	;  Return value of the assignement of =detand storing it into R2
; --------EndAssignOp--------[37, 12]-----
; --------BeginAssignOp--------[38, 12]-----
; --------StartBinaryOp--------[38, 16]-----
	LOAD 3(LB), R3	; loading i into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[38, 16]-----
	STORE R3, 3(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[38, 12]-----
	BRA while_begin25
while_end25:
	LOAD 2(LB), R2	; loading det into memory
	INT R2, R2
	LOAD R2, R0
	BRA fin.Det.bareissIntDeterminant
	WSTR "Error: La méthode code.Det.bareissIntDeterminant doit retourner un element"
	WNL
	ERROR
fin.Det.bareissIntDeterminant:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : bareissFloatDeterminant with label =  code.Det.bareissFloatDeterminant--------
code.Det.bareissFloatDeterminant:
	TSTO #13
	BOV stack_overflow_error
	ADDSP #7
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------BeginSelection--------[43, 16]-----
	LOAD -3(LB), R2	; loading a into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[43, 16]-----
	STORE R2, 1(LB)	; Initializing the variable n and loading it into memory
	LOAD #1, R2	; loading 1 into memory
	FLOAT R2, R2	; Doing an unary minus
	STORE R2, 2(LB)	; Initializing the variable det and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 3(LB)	; Initializing the variable i and loading it into memory
; --------StartBinaryOp--------[51, 11]-----
; --------BeginSelection--------[51, 11]-----
	LOAD -3(LB), R2	; loading a into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[51, 11]-----
; --------BeginSelection--------[51, 23]-----
	LOAD -3(LB), R3	; loading a into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[51, 23]-----
	CMP R3, R2	; Comparing registers for NotEquals operation 
	SNE R2	; Placing NotEquals result into the register  
; --------EndBinaryOp--------[51, 11]-----
; ---------Startif-----------[51, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else12
	WSTR "La matrice doit être carrée pour le calcul du déterminant: "
; --------BeginSelection--------[52, 83]-----
	LOAD -3(LB), R2	; loading a into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[52, 83]-----
	LOAD R2, R1
	WINT
	WSTR " != "
; --------BeginSelection--------[52, 101]-----
	LOAD -3(LB), R3	; loading a into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[52, 101]-----
	LOAD R3, R1
	WINT
	WNL
; --------BeginMethodCall--------[53, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[53, 12]-----
	BRA end_ifthenelse_12
else12:
end_ifthenelse_12:
; ---------Endif-----------
; --------BeginAssignOp--------[55, 8]-----
; --------StartNewTable--------[55, 12]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  float[][] into memory at register R3
	PUSH R2
	LOAD 1(LB), R2	; loading n into memory
	CMP #1, R2
	BLT int_allocation_table_must_be_strictly_positive
	PUSH R3
	LOAD 1(LB), R3	; loading n into memory
	CMP #1, R3
	BLT int_allocation_table_must_be_strictly_positive
	LOAD R2, R1
	MUL R3, R1
	ADD #2, R1
	NEW R1, R0
	BOV heap_overflow_error
	STORE R2, 0(R0)
	STORE R3, 1(R0)
	POP R2
	POP R3
	LOAD R0, R3
; --------EndNewTable--------[55, 12]-----
	STORE R3, 7(LB)	;  Assiging a value to b
	LOAD R3, R2	;  Return value of the assignement of =band storing it into R2
; --------EndAssignOp--------[55, 8]-----
; --------BeginMethodCall--------[56, 8]-----
	ADDSP #3
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 7(LB), R2	; loading b into memory
	STORE R2, -1(SP)
	LOAD -3(LB), R2	; loading a into memory
	STORE R2, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 13(R2)
	LOAD R0, R2
	SUBSP #3
; --------EndMethodCall--------[56, 8]-----
while_begin28:
; --------StartBinaryOp--------[57, 15]-----
	LOAD 3(LB), R2	; loading i into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[57, 15]-----
	CMP #1, R2
	BNE while_end28
; --------StartBinaryOp--------[58, 16]-----
; --------StartGetTableElements--------[58, 16]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  a into memory at register R2
	LOAD 3(LB), R3	; loading i into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	PUSH R2
	LOAD 3(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading a into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of a into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of a into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	MUL R0, R3
	ADD R2, R3
	LOAD 2(R1, R3), R0
	POP R2
	LOAD R0, R2
; --------EndGetTableElements--------[58, 16]-----
	LOAD #0, R3	; loading 0 into memory
	FLOAT R3, R3	; Doing an unary minus
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[58, 16]-----
; ---------Startif-----------[58, 12]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else13
	LOAD #0x0.0p0, R2	; loading 0.0 into memory
	LOAD R2, R0
	BRA fin.Det.bareissFloatDeterminant
	BRA end_ifthenelse_13
else13:
end_ifthenelse_13:
; ---------Endif-----------
; --------BeginAssignOp--------[61, 12]-----
; --------StartBinaryOp--------[61, 16]-----
	LOAD 3(LB), R3	; loading i into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[61, 16]-----
	STORE R3, 4(LB)	;  Assiging a value to j
	LOAD R3, R2	;  Return value of the assignement of =jand storing it into R2
; --------EndAssignOp--------[61, 12]-----
while_begin29:
; --------StartBinaryOp--------[62, 19]-----
	LOAD 4(LB), R2	; loading j into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[62, 19]-----
	CMP #1, R2
	BNE while_end29
; --------StartBinaryOp--------[63, 20]-----
; --------StartGetTableElements--------[63, 20]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  b into memory at register R2
	LOAD 3(LB), R3	; loading i into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	PUSH R2
	LOAD 3(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD 7(LB), R1	; loading b into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of b into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of b into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	MUL R0, R3
	ADD R2, R3
	LOAD 2(R1, R3), R0
	POP R2
	LOAD R0, R2
; --------EndGetTableElements--------[63, 20]-----
	LOAD #0x1.0c6f7ap-20, R3	; loading 1.0E-6 into memory
	CMP R3, R2	; Comparing registers for LowerOrEqual operation 
	SLE R2	; Placing LowerOrEqual result into the register  
; --------EndBinaryOp--------[63, 20]-----
; ---------Startif-----------[63, 16]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else14
	LOAD #0x0.0p0, R2	; loading 0.0 into memory
	LOAD R2, R0
	BRA fin.Det.bareissFloatDeterminant
	BRA end_ifthenelse_14
else14:
end_ifthenelse_14:
; ---------Endif-----------
; --------BeginAssignOp--------[66, 16]-----
; --------StartBinaryOp--------[66, 20]-----
; --------StartGetTableElements--------[66, 20]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  b into memory at register R3
	PUSH R2
	LOAD 4(LB), R2	; loading j into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 3(LB), R3	; loading i into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 7(LB), R1	; loading b into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of b into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of b into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[66, 20]-----
; --------StartGetTableElements--------[66, 30]-----
	PUSH R2
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  b into memory at register R2
	PUSH R3
	LOAD 3(LB), R3	; loading i into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	PUSH R2
	LOAD 3(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD 7(LB), R1	; loading b into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of b into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of b into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	MUL R0, R3
	ADD R2, R3
	LOAD 2(R1, R3), R0
	POP R2
	POP R3
	LOAD R0, R2
; --------EndGetTableElements--------[66, 30]-----
	DIV R2, R3
	BOV overflow_error	; Checking for overflow since the operation is between two floats 
	POP R2
; --------EndBinaryOp--------[66, 20]-----
	STORE R3, 6(LB)	;  Assiging a value to t
	LOAD R3, R2	;  Return value of the assignement of =tand storing it into R2
; --------EndAssignOp--------[66, 16]-----
; --------BeginAssignOp--------[67, 16]-----
	LOAD 3(LB), R3	; loading i into memory
	STORE R3, 5(LB)	;  Assiging a value to k
	LOAD R3, R2	;  Return value of the assignement of =kand storing it into R2
; --------EndAssignOp--------[67, 16]-----
while_begin30:
; --------StartBinaryOp--------[68, 23]-----
	LOAD 5(LB), R2	; loading k into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[68, 23]-----
	CMP #1, R2
	BNE while_end30
; --------BeginAssignOp--------[70, 20]-----
; --------StartBinaryOp--------[70, 30]-----
; --------StartGetTableElements--------[70, 30]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  b into memory at register R3
	PUSH R2
	LOAD 4(LB), R2	; loading j into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 5(LB), R3	; loading k into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 7(LB), R1	; loading b into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of b into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of b into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[70, 30]-----
; --------StartBinaryOp--------[70, 40]-----
	PUSH R2
	LOAD 6(LB), R2	; loading t into memory
; --------StartGetTableElements--------[70, 44]-----
	PUSH R3
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  b into memory at register R3
	PUSH R2
	LOAD 3(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 5(LB), R3	; loading k into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 7(LB), R1	; loading b into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of b into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of b into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[70, 44]-----
	MUL R3, R2
	BOV overflow_error	; Checking for overflow since the operation is between two floats 
	POP R3
; --------EndBinaryOp--------[70, 40]-----
	SUB R2, R3
	BOV overflow_error	; Checking for overflow since the operation is between two floats 
	POP R2
; --------EndBinaryOp--------[70, 30]-----
; --------StartStoreTableElements--------[70, 20]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  b the value in R3
	PUSH R2
	LOAD 4(LB), R2	; loading j into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 5(LB), R3	; loading k into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 7(LB), R1	; [saving] loading b into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of b into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of b into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[70, 20]-----
; --------EndAssignOp--------[70, 20]-----
; --------BeginAssignOp--------[71, 20]-----
; --------StartBinaryOp--------[71, 24]-----
	LOAD 5(LB), R3	; loading k into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[71, 24]-----
	STORE R3, 5(LB)	;  Assiging a value to k
	LOAD R3, R2	;  Return value of the assignement of =kand storing it into R2
; --------EndAssignOp--------[71, 20]-----
	BRA while_begin30
while_end30:
; --------BeginAssignOp--------[73, 16]-----
; --------StartBinaryOp--------[73, 20]-----
	LOAD 4(LB), R3	; loading j into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[73, 20]-----
	STORE R3, 4(LB)	;  Assiging a value to j
	LOAD R3, R2	;  Return value of the assignement of =jand storing it into R2
; --------EndAssignOp--------[73, 16]-----
	BRA while_begin29
while_end29:
; --------BeginAssignOp--------[75, 12]-----
; --------StartBinaryOp--------[75, 18]-----
	LOAD 2(LB), R3	; loading det into memory
; --------StartGetTableElements--------[75, 24]-----
	PUSH R2
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  b into memory at register R2
	PUSH R3
	LOAD 3(LB), R3	; loading i into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	PUSH R2
	LOAD 3(LB), R2	; loading i into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD 7(LB), R1	; loading b into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of b into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of b into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	MUL R0, R3
	ADD R2, R3
	LOAD 2(R1, R3), R0
	POP R2
	POP R3
	LOAD R0, R2
; --------EndGetTableElements--------[75, 24]-----
	MUL R2, R3
	BOV overflow_error	; Checking for overflow since the operation is between two floats 
	POP R2
; --------EndBinaryOp--------[75, 18]-----
	STORE R3, 2(LB)	;  Assiging a value to det
	LOAD R3, R2	;  Return value of the assignement of =detand storing it into R2
; --------EndAssignOp--------[75, 12]-----
; --------BeginAssignOp--------[76, 12]-----
; --------StartBinaryOp--------[76, 16]-----
	LOAD 3(LB), R3	; loading i into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[76, 16]-----
	STORE R3, 3(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[76, 12]-----
	BRA while_begin28
while_end28:
	LOAD 2(LB), R2	; loading det into memory
	LOAD R2, R0
	BRA fin.Det.bareissFloatDeterminant
	WSTR "Error: La méthode code.Det.bareissFloatDeterminant doit retourner un element"
	WNL
	ERROR
fin.Det.bareissFloatDeterminant:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ---------------------------------------------------
; ----------------- class : MatrixTraitement -------------------
; ---------------------------------------------------
; ------------Init method for class = MatrixTraitement--------
init.MatrixTraitement:
	RTS
; ------------Code for method : triangleSupInt with label =  code.MatrixTraitement.triangleSupInt--------
code.MatrixTraitement.triangleSupInt:
	TSTO #9
	BOV stack_overflow_error
	ADDSP #4
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------BeginSelection--------[7, 19]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[7, 19]-----
	STORE R2, 1(LB)	; Initializing the variable size and loading it into memory
; --------StartNewTable--------[8, 25]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  int[][] into memory at register R2
	LOAD 1(LB), R3	; loading size into memory
	CMP #1, R3
	BLT int_allocation_table_must_be_strictly_positive
	PUSH R2
	LOAD 1(LB), R2	; loading size into memory
	CMP #1, R2
	BLT int_allocation_table_must_be_strictly_positive
	LOAD R3, R1
	MUL R2, R1
	ADD #2, R1
	NEW R1, R0
	BOV heap_overflow_error
	STORE R3, 0(R0)
	STORE R2, 1(R0)
	POP R2
	LOAD R0, R2
; --------EndNewTable--------[8, 25]-----
	STORE R2, 2(LB)	; Initializing the variable result and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 3(LB)	; Initializing the variable itrRow and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 4(LB)	; Initializing the variable itrCol and loading it into memory
; --------StartBinaryOp--------[12, 12]-----
	LOAD 1(LB), R2	; loading size into memory
; --------BeginSelection--------[12, 18]-----
	LOAD -3(LB), R3	; loading mat into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[12, 18]-----
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[12, 12]-----
; ---------Startif-----------[12, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else15
while_begin31:
; --------StartBinaryOp--------[13, 19]-----
	LOAD 3(LB), R2	; loading itrRow into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[13, 19]-----
	CMP #1, R2
	BNE while_end31
while_begin32:
; --------StartBinaryOp--------[14, 23]-----
	LOAD 4(LB), R2	; loading itrCol into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[14, 23]-----
	CMP #1, R2
	BNE while_end32
; --------StartBinaryOp--------[15, 24]-----
	LOAD 4(LB), R2	; loading itrCol into memory
	CMP 3(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[15, 24]-----
; ---------Startif-----------[15, 20]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else16
; --------BeginAssignOp--------[16, 24]-----
	LOAD #0, R3	; loading 0 into memory
; --------StartStoreTableElements--------[16, 24]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  result the value in R3
	PUSH R2
	LOAD 3(LB), R2	; loading itrRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 4(LB), R3	; loading itrCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R1	; [saving] loading result into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of result into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of result into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[16, 24]-----
; --------EndAssignOp--------[16, 24]-----
	BRA end_ifthenelse_16
else16:
; --------BeginAssignOp--------[18, 24]-----
; --------StartGetTableElements--------[18, 47]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  mat into memory at register R3
	PUSH R2
	LOAD 3(LB), R2	; loading itrRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 4(LB), R3	; loading itrCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading mat into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of mat into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of mat into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[18, 47]-----
; --------StartStoreTableElements--------[18, 24]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  result the value in R3
	PUSH R2
	LOAD 3(LB), R2	; loading itrRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 4(LB), R3	; loading itrCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R1	; [saving] loading result into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of result into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of result into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[18, 24]-----
; --------EndAssignOp--------[18, 24]-----
end_ifthenelse_16:
; ---------Endif-----------
; --------BeginAssignOp--------[21, 20]-----
; --------StartBinaryOp--------[21, 27]-----
	LOAD 4(LB), R3	; loading itrCol into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[21, 27]-----
	STORE R3, 4(LB)	;  Assiging a value to itrCol
	LOAD R3, R2	;  Return value of the assignement of =itrColand storing it into R2
; --------EndAssignOp--------[21, 20]-----
	BRA while_begin32
while_end32:
; --------BeginAssignOp--------[23, 16]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 4(LB)	;  Assiging a value to itrCol
	LOAD R3, R2	;  Return value of the assignement of =itrColand storing it into R2
; --------EndAssignOp--------[23, 16]-----
; --------BeginAssignOp--------[24, 16]-----
; --------StartBinaryOp--------[24, 23]-----
	LOAD 3(LB), R3	; loading itrRow into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[24, 23]-----
	STORE R3, 3(LB)	;  Assiging a value to itrRow
	LOAD R3, R2	;  Return value of the assignement of =itrRowand storing it into R2
; --------EndAssignOp--------[24, 16]-----
	BRA while_begin31
while_end31:
	BRA end_ifthenelse_15
else15:
; --------BeginMethodCall--------[27, 12]-----
	ADDSP #3
	LOAD -2(LB), R2
	STORE R2, 0(SP)
; --------BeginSelection--------[27, 34]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[27, 34]-----
	STORE R2, -1(SP)
; --------BeginSelection--------[27, 46]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R2), R2	; Loading the field size2D into a register 
; --------BeginSelection--------[27, 46]-----
	STORE R2, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 14(R2)
	LOAD R0, R2
	SUBSP #3
; --------EndMethodCall--------[27, 12]-----
end_ifthenelse_15:
; ---------Endif-----------
	LOAD 2(LB), R2	; loading result into memory
	LOAD R2, R0
	BRA fin.MatrixTraitement.triangleSupInt
	WSTR "Error: La méthode code.MatrixTraitement.triangleSupInt doit retourner un element"
	WNL
	ERROR
fin.MatrixTraitement.triangleSupInt:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : triangleSupFloat with label =  code.MatrixTraitement.triangleSupFloat--------
code.MatrixTraitement.triangleSupFloat:
	TSTO #9
	BOV stack_overflow_error
	ADDSP #4
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------BeginSelection--------[34, 19]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[34, 19]-----
	STORE R2, 1(LB)	; Initializing the variable size and loading it into memory
; --------StartNewTable--------[35, 27]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  float[][] into memory at register R2
	LOAD 1(LB), R3	; loading size into memory
	CMP #1, R3
	BLT int_allocation_table_must_be_strictly_positive
	PUSH R2
	LOAD 1(LB), R2	; loading size into memory
	CMP #1, R2
	BLT int_allocation_table_must_be_strictly_positive
	LOAD R3, R1
	MUL R2, R1
	ADD #2, R1
	NEW R1, R0
	BOV heap_overflow_error
	STORE R3, 0(R0)
	STORE R2, 1(R0)
	POP R2
	LOAD R0, R2
; --------EndNewTable--------[35, 27]-----
	STORE R2, 2(LB)	; Initializing the variable result and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 3(LB)	; Initializing the variable itrRow and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 4(LB)	; Initializing the variable itrCol and loading it into memory
; --------StartBinaryOp--------[39, 12]-----
	LOAD 1(LB), R2	; loading size into memory
; --------BeginSelection--------[39, 18]-----
	LOAD -3(LB), R3	; loading mat into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[39, 18]-----
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[39, 12]-----
; ---------Startif-----------[39, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else17
while_begin33:
; --------StartBinaryOp--------[40, 19]-----
	LOAD 3(LB), R2	; loading itrRow into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[40, 19]-----
	CMP #1, R2
	BNE while_end33
while_begin34:
; --------StartBinaryOp--------[41, 23]-----
	LOAD 4(LB), R2	; loading itrCol into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[41, 23]-----
	CMP #1, R2
	BNE while_end34
; --------StartBinaryOp--------[42, 24]-----
	LOAD 4(LB), R2	; loading itrCol into memory
	CMP 3(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[42, 24]-----
; ---------Startif-----------[42, 20]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else18
; --------BeginAssignOp--------[43, 24]-----
	LOAD #0, R3	; loading 0 into memory
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[43, 24]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  result the value in R3
	PUSH R2
	LOAD 3(LB), R2	; loading itrRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 4(LB), R3	; loading itrCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R1	; [saving] loading result into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of result into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of result into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[43, 24]-----
; --------EndAssignOp--------[43, 24]-----
	BRA end_ifthenelse_18
else18:
; --------BeginAssignOp--------[45, 24]-----
; --------StartGetTableElements--------[45, 47]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  mat into memory at register R3
	PUSH R2
	LOAD 3(LB), R2	; loading itrRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 4(LB), R3	; loading itrCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading mat into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of mat into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of mat into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[45, 47]-----
; --------StartStoreTableElements--------[45, 24]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  result the value in R3
	PUSH R2
	LOAD 3(LB), R2	; loading itrRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 4(LB), R3	; loading itrCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R1	; [saving] loading result into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of result into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of result into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[45, 24]-----
; --------EndAssignOp--------[45, 24]-----
end_ifthenelse_18:
; ---------Endif-----------
; --------BeginAssignOp--------[48, 20]-----
; --------StartBinaryOp--------[48, 27]-----
	LOAD 4(LB), R3	; loading itrCol into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[48, 27]-----
	STORE R3, 4(LB)	;  Assiging a value to itrCol
	LOAD R3, R2	;  Return value of the assignement of =itrColand storing it into R2
; --------EndAssignOp--------[48, 20]-----
	BRA while_begin34
while_end34:
; --------BeginAssignOp--------[50, 16]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 4(LB)	;  Assiging a value to itrCol
	LOAD R3, R2	;  Return value of the assignement of =itrColand storing it into R2
; --------EndAssignOp--------[50, 16]-----
; --------BeginAssignOp--------[51, 16]-----
; --------StartBinaryOp--------[51, 23]-----
	LOAD 3(LB), R3	; loading itrRow into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[51, 23]-----
	STORE R3, 3(LB)	;  Assiging a value to itrRow
	LOAD R3, R2	;  Return value of the assignement of =itrRowand storing it into R2
; --------EndAssignOp--------[51, 16]-----
	BRA while_begin33
while_end33:
	BRA end_ifthenelse_17
else17:
; --------BeginMethodCall--------[54, 12]-----
	ADDSP #3
	LOAD -2(LB), R2
	STORE R2, 0(SP)
; --------BeginSelection--------[54, 34]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[54, 34]-----
	STORE R2, -1(SP)
; --------BeginSelection--------[54, 46]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R2), R2	; Loading the field size2D into a register 
; --------BeginSelection--------[54, 46]-----
	STORE R2, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 14(R2)
	LOAD R0, R2
	SUBSP #3
; --------EndMethodCall--------[54, 12]-----
end_ifthenelse_17:
; ---------Endif-----------
	LOAD 2(LB), R2	; loading result into memory
	LOAD R2, R0
	BRA fin.MatrixTraitement.triangleSupFloat
	WSTR "Error: La méthode code.MatrixTraitement.triangleSupFloat doit retourner un element"
	WNL
	ERROR
fin.MatrixTraitement.triangleSupFloat:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : triangleInfInt with label =  code.MatrixTraitement.triangleInfInt--------
code.MatrixTraitement.triangleInfInt:
	TSTO #9
	BOV stack_overflow_error
	ADDSP #4
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------BeginSelection--------[63, 19]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[63, 19]-----
	STORE R2, 1(LB)	; Initializing the variable size and loading it into memory
; --------StartNewTable--------[64, 25]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  int[][] into memory at register R2
	LOAD 1(LB), R3	; loading size into memory
	CMP #1, R3
	BLT int_allocation_table_must_be_strictly_positive
	PUSH R2
	LOAD 1(LB), R2	; loading size into memory
	CMP #1, R2
	BLT int_allocation_table_must_be_strictly_positive
	LOAD R3, R1
	MUL R2, R1
	ADD #2, R1
	NEW R1, R0
	BOV heap_overflow_error
	STORE R3, 0(R0)
	STORE R2, 1(R0)
	POP R2
	LOAD R0, R2
; --------EndNewTable--------[64, 25]-----
	STORE R2, 2(LB)	; Initializing the variable result and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 3(LB)	; Initializing the variable itrRow and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 4(LB)	; Initializing the variable itrCol and loading it into memory
; --------StartBinaryOp--------[68, 12]-----
	LOAD 1(LB), R2	; loading size into memory
; --------BeginSelection--------[68, 18]-----
	LOAD -3(LB), R3	; loading mat into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[68, 18]-----
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[68, 12]-----
; ---------Startif-----------[68, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else19
while_begin35:
; --------StartBinaryOp--------[69, 19]-----
	LOAD 3(LB), R2	; loading itrRow into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[69, 19]-----
	CMP #1, R2
	BNE while_end35
while_begin36:
; --------StartBinaryOp--------[70, 23]-----
	LOAD 4(LB), R2	; loading itrCol into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[70, 23]-----
	CMP #1, R2
	BNE while_end36
; --------StartBinaryOp--------[71, 24]-----
	LOAD 4(LB), R2	; loading itrCol into memory
	CMP 3(LB), R2	; Comparing registers for LowerOrEqual operation 
	SLE R2	; Placing LowerOrEqual result into the register  
; --------EndBinaryOp--------[71, 24]-----
; ---------Startif-----------[71, 20]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else20
; --------BeginAssignOp--------[72, 24]-----
; --------StartGetTableElements--------[72, 47]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  mat into memory at register R3
	PUSH R2
	LOAD 3(LB), R2	; loading itrRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 4(LB), R3	; loading itrCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading mat into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of mat into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of mat into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[72, 47]-----
; --------StartStoreTableElements--------[72, 24]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  result the value in R3
	PUSH R2
	LOAD 3(LB), R2	; loading itrRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 4(LB), R3	; loading itrCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R1	; [saving] loading result into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of result into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of result into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[72, 24]-----
; --------EndAssignOp--------[72, 24]-----
	BRA end_ifthenelse_20
else20:
; --------BeginAssignOp--------[75, 24]-----
	LOAD #0, R3	; loading 0 into memory
; --------StartStoreTableElements--------[75, 24]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  result the value in R3
	PUSH R2
	LOAD 3(LB), R2	; loading itrRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 4(LB), R3	; loading itrCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R1	; [saving] loading result into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of result into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of result into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[75, 24]-----
; --------EndAssignOp--------[75, 24]-----
end_ifthenelse_20:
; ---------Endif-----------
; --------BeginAssignOp--------[78, 20]-----
; --------StartBinaryOp--------[78, 27]-----
	LOAD 4(LB), R3	; loading itrCol into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[78, 27]-----
	STORE R3, 4(LB)	;  Assiging a value to itrCol
	LOAD R3, R2	;  Return value of the assignement of =itrColand storing it into R2
; --------EndAssignOp--------[78, 20]-----
	BRA while_begin36
while_end36:
; --------BeginAssignOp--------[80, 16]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 4(LB)	;  Assiging a value to itrCol
	LOAD R3, R2	;  Return value of the assignement of =itrColand storing it into R2
; --------EndAssignOp--------[80, 16]-----
; --------BeginAssignOp--------[81, 16]-----
; --------StartBinaryOp--------[81, 23]-----
	LOAD 3(LB), R3	; loading itrRow into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[81, 23]-----
	STORE R3, 3(LB)	;  Assiging a value to itrRow
	LOAD R3, R2	;  Return value of the assignement of =itrRowand storing it into R2
; --------EndAssignOp--------[81, 16]-----
	BRA while_begin35
while_end35:
	BRA end_ifthenelse_19
else19:
; --------BeginMethodCall--------[84, 12]-----
	ADDSP #3
	LOAD -2(LB), R2
	STORE R2, 0(SP)
; --------BeginSelection--------[84, 34]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[84, 34]-----
	STORE R2, -1(SP)
; --------BeginSelection--------[84, 46]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R2), R2	; Loading the field size2D into a register 
; --------BeginSelection--------[84, 46]-----
	STORE R2, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 14(R2)
	LOAD R0, R2
	SUBSP #3
; --------EndMethodCall--------[84, 12]-----
end_ifthenelse_19:
; ---------Endif-----------
	LOAD 2(LB), R2	; loading result into memory
	LOAD R2, R0
	BRA fin.MatrixTraitement.triangleInfInt
	WSTR "Error: La méthode code.MatrixTraitement.triangleInfInt doit retourner un element"
	WNL
	ERROR
fin.MatrixTraitement.triangleInfInt:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : triangleInfFloat with label =  code.MatrixTraitement.triangleInfFloat--------
code.MatrixTraitement.triangleInfFloat:
	TSTO #9
	BOV stack_overflow_error
	ADDSP #4
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------BeginSelection--------[92, 19]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[92, 19]-----
	STORE R2, 1(LB)	; Initializing the variable size and loading it into memory
; --------StartNewTable--------[93, 27]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  float[][] into memory at register R2
	LOAD 1(LB), R3	; loading size into memory
	CMP #1, R3
	BLT int_allocation_table_must_be_strictly_positive
	PUSH R2
	LOAD 1(LB), R2	; loading size into memory
	CMP #1, R2
	BLT int_allocation_table_must_be_strictly_positive
	LOAD R3, R1
	MUL R2, R1
	ADD #2, R1
	NEW R1, R0
	BOV heap_overflow_error
	STORE R3, 0(R0)
	STORE R2, 1(R0)
	POP R2
	LOAD R0, R2
; --------EndNewTable--------[93, 27]-----
	STORE R2, 2(LB)	; Initializing the variable result and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 3(LB)	; Initializing the variable itrRow and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 4(LB)	; Initializing the variable itrCol and loading it into memory
; --------StartBinaryOp--------[97, 12]-----
	LOAD 1(LB), R2	; loading size into memory
; --------BeginSelection--------[97, 18]-----
	LOAD -3(LB), R3	; loading mat into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[97, 18]-----
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[97, 12]-----
; ---------Startif-----------[97, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else21
while_begin37:
; --------StartBinaryOp--------[98, 19]-----
	LOAD 3(LB), R2	; loading itrRow into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[98, 19]-----
	CMP #1, R2
	BNE while_end37
while_begin38:
; --------StartBinaryOp--------[99, 23]-----
	LOAD 4(LB), R2	; loading itrCol into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[99, 23]-----
	CMP #1, R2
	BNE while_end38
; --------StartBinaryOp--------[100, 24]-----
	LOAD 4(LB), R2	; loading itrCol into memory
	CMP 3(LB), R2	; Comparing registers for LowerOrEqual operation 
	SLE R2	; Placing LowerOrEqual result into the register  
; --------EndBinaryOp--------[100, 24]-----
; ---------Startif-----------[100, 20]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else22
; --------BeginAssignOp--------[101, 24]-----
; --------StartGetTableElements--------[101, 47]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  mat into memory at register R3
	PUSH R2
	LOAD 3(LB), R2	; loading itrRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 4(LB), R3	; loading itrCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading mat into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of mat into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of mat into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[101, 47]-----
; --------StartStoreTableElements--------[101, 24]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  result the value in R3
	PUSH R2
	LOAD 3(LB), R2	; loading itrRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 4(LB), R3	; loading itrCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R1	; [saving] loading result into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of result into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of result into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[101, 24]-----
; --------EndAssignOp--------[101, 24]-----
	BRA end_ifthenelse_22
else22:
; --------BeginAssignOp--------[104, 24]-----
	LOAD #0, R3	; loading 0 into memory
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[104, 24]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  result the value in R3
	PUSH R2
	LOAD 3(LB), R2	; loading itrRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 4(LB), R3	; loading itrCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R1	; [saving] loading result into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of result into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of result into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[104, 24]-----
; --------EndAssignOp--------[104, 24]-----
end_ifthenelse_22:
; ---------Endif-----------
; --------BeginAssignOp--------[107, 20]-----
; --------StartBinaryOp--------[107, 27]-----
	LOAD 4(LB), R3	; loading itrCol into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[107, 27]-----
	STORE R3, 4(LB)	;  Assiging a value to itrCol
	LOAD R3, R2	;  Return value of the assignement of =itrColand storing it into R2
; --------EndAssignOp--------[107, 20]-----
	BRA while_begin38
while_end38:
; --------BeginAssignOp--------[109, 16]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 4(LB)	;  Assiging a value to itrCol
	LOAD R3, R2	;  Return value of the assignement of =itrColand storing it into R2
; --------EndAssignOp--------[109, 16]-----
; --------BeginAssignOp--------[110, 16]-----
; --------StartBinaryOp--------[110, 23]-----
	LOAD 3(LB), R3	; loading itrRow into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[110, 23]-----
	STORE R3, 3(LB)	;  Assiging a value to itrRow
	LOAD R3, R2	;  Return value of the assignement of =itrRowand storing it into R2
; --------EndAssignOp--------[110, 16]-----
	BRA while_begin37
while_end37:
	BRA end_ifthenelse_21
else21:
; --------BeginMethodCall--------[113, 16]-----
	ADDSP #3
	LOAD -2(LB), R2
	STORE R2, 0(SP)
; --------BeginSelection--------[113, 38]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[113, 38]-----
	STORE R2, -1(SP)
; --------BeginSelection--------[113, 50]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R2), R2	; Loading the field size2D into a register 
; --------BeginSelection--------[113, 50]-----
	STORE R2, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 14(R2)
	LOAD R0, R2
	SUBSP #3
; --------EndMethodCall--------[113, 16]-----
end_ifthenelse_21:
; ---------Endif-----------
	LOAD 2(LB), R2	; loading result into memory
	LOAD R2, R0
	BRA fin.MatrixTraitement.triangleInfFloat
	WSTR "Error: La méthode code.MatrixTraitement.triangleInfFloat doit retourner un element"
	WNL
	ERROR
fin.MatrixTraitement.triangleInfFloat:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : transposeMatrixInt with label =  code.MatrixTraitement.transposeMatrixInt--------
code.MatrixTraitement.transposeMatrixInt:
	TSTO #9
	BOV stack_overflow_error
	ADDSP #5
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------BeginSelection--------[119, 22]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[119, 22]-----
	STORE R2, 1(LB)	; Initializing the variable sizeRow and loading it into memory
; --------BeginSelection--------[120, 22]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R2), R2	; Loading the field size2D into a register 
; --------BeginSelection--------[120, 22]-----
	STORE R2, 2(LB)	; Initializing the variable sizeCol and loading it into memory
; --------StartNewTable--------[121, 25]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  int[][] into memory at register R2
	LOAD 2(LB), R3	; loading sizeCol into memory
	CMP #1, R3
	BLT int_allocation_table_must_be_strictly_positive
	PUSH R2
	LOAD 1(LB), R2	; loading sizeRow into memory
	CMP #1, R2
	BLT int_allocation_table_must_be_strictly_positive
	LOAD R3, R1
	MUL R2, R1
	ADD #2, R1
	NEW R1, R0
	BOV heap_overflow_error
	STORE R3, 0(R0)
	STORE R2, 1(R0)
	POP R2
	LOAD R0, R2
; --------EndNewTable--------[121, 25]-----
	STORE R2, 3(LB)	; Initializing the variable result and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 4(LB)	; Initializing the variable itrRow and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 5(LB)	; Initializing the variable itrCol and loading it into memory
while_begin39:
; --------StartBinaryOp--------[124, 15]-----
	LOAD 4(LB), R2	; loading itrRow into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[124, 15]-----
	CMP #1, R2
	BNE while_end39
while_begin40:
; --------StartBinaryOp--------[125, 19]-----
	LOAD 5(LB), R2	; loading itrCol into memory
	CMP 2(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[125, 19]-----
	CMP #1, R2
	BNE while_end40
; --------BeginAssignOp--------[126, 16]-----
; --------StartGetTableElements--------[126, 41]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  mat into memory at register R3
	PUSH R2
	LOAD 4(LB), R2	; loading itrRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 5(LB), R3	; loading itrCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading mat into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of mat into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of mat into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[126, 41]-----
; --------StartStoreTableElements--------[126, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  result the value in R3
	PUSH R2
	LOAD 5(LB), R2	; loading itrCol into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 4(LB), R3	; loading itrRow into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 3(LB), R1	; [saving] loading result into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of result into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of result into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[126, 16]-----
; --------EndAssignOp--------[126, 16]-----
; --------BeginAssignOp--------[127, 16]-----
; --------StartBinaryOp--------[127, 23]-----
	LOAD 5(LB), R3	; loading itrCol into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[127, 23]-----
	STORE R3, 5(LB)	;  Assiging a value to itrCol
	LOAD R3, R2	;  Return value of the assignement of =itrColand storing it into R2
; --------EndAssignOp--------[127, 16]-----
	BRA while_begin40
while_end40:
; --------BeginAssignOp--------[129, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 5(LB)	;  Assiging a value to itrCol
	LOAD R3, R2	;  Return value of the assignement of =itrColand storing it into R2
; --------EndAssignOp--------[129, 12]-----
; --------BeginAssignOp--------[130, 12]-----
; --------StartBinaryOp--------[130, 19]-----
	LOAD 4(LB), R3	; loading itrRow into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[130, 19]-----
	STORE R3, 4(LB)	;  Assiging a value to itrRow
	LOAD R3, R2	;  Return value of the assignement of =itrRowand storing it into R2
; --------EndAssignOp--------[130, 12]-----
	BRA while_begin39
while_end39:
	LOAD 3(LB), R2	; loading result into memory
	LOAD R2, R0
	BRA fin.MatrixTraitement.transposeMatrixInt
	WSTR "Error: La méthode code.MatrixTraitement.transposeMatrixInt doit retourner un element"
	WNL
	ERROR
fin.MatrixTraitement.transposeMatrixInt:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : transposeMatrixFloat with label =  code.MatrixTraitement.transposeMatrixFloat--------
code.MatrixTraitement.transposeMatrixFloat:
	TSTO #9
	BOV stack_overflow_error
	ADDSP #5
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------BeginSelection--------[137, 22]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[137, 22]-----
	STORE R2, 1(LB)	; Initializing the variable sizeRow and loading it into memory
; --------BeginSelection--------[138, 22]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R2), R2	; Loading the field size2D into a register 
; --------BeginSelection--------[138, 22]-----
	STORE R2, 2(LB)	; Initializing the variable sizeCol and loading it into memory
; --------StartNewTable--------[139, 27]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  float[][] into memory at register R2
	LOAD 2(LB), R3	; loading sizeCol into memory
	CMP #1, R3
	BLT int_allocation_table_must_be_strictly_positive
	PUSH R2
	LOAD 1(LB), R2	; loading sizeRow into memory
	CMP #1, R2
	BLT int_allocation_table_must_be_strictly_positive
	LOAD R3, R1
	MUL R2, R1
	ADD #2, R1
	NEW R1, R0
	BOV heap_overflow_error
	STORE R3, 0(R0)
	STORE R2, 1(R0)
	POP R2
	LOAD R0, R2
; --------EndNewTable--------[139, 27]-----
	STORE R2, 3(LB)	; Initializing the variable result and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 4(LB)	; Initializing the variable itrRow and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 5(LB)	; Initializing the variable itrCol and loading it into memory
while_begin41:
; --------StartBinaryOp--------[142, 15]-----
	LOAD 4(LB), R2	; loading itrRow into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[142, 15]-----
	CMP #1, R2
	BNE while_end41
while_begin42:
; --------StartBinaryOp--------[143, 19]-----
	LOAD 5(LB), R2	; loading itrCol into memory
	CMP 2(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[143, 19]-----
	CMP #1, R2
	BNE while_end42
; --------BeginAssignOp--------[144, 16]-----
; --------StartGetTableElements--------[144, 41]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  mat into memory at register R3
	PUSH R2
	LOAD 4(LB), R2	; loading itrRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 5(LB), R3	; loading itrCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading mat into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of mat into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of mat into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[144, 41]-----
; --------StartStoreTableElements--------[144, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  result the value in R3
	PUSH R2
	LOAD 5(LB), R2	; loading itrCol into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 4(LB), R3	; loading itrRow into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 3(LB), R1	; [saving] loading result into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of result into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of result into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[144, 16]-----
; --------EndAssignOp--------[144, 16]-----
; --------BeginAssignOp--------[145, 16]-----
; --------StartBinaryOp--------[145, 23]-----
	LOAD 5(LB), R3	; loading itrCol into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[145, 23]-----
	STORE R3, 5(LB)	;  Assiging a value to itrCol
	LOAD R3, R2	;  Return value of the assignement of =itrColand storing it into R2
; --------EndAssignOp--------[145, 16]-----
	BRA while_begin42
while_end42:
; --------BeginAssignOp--------[147, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 5(LB)	;  Assiging a value to itrCol
	LOAD R3, R2	;  Return value of the assignement of =itrColand storing it into R2
; --------EndAssignOp--------[147, 12]-----
; --------BeginAssignOp--------[148, 12]-----
; --------StartBinaryOp--------[148, 19]-----
	LOAD 4(LB), R3	; loading itrRow into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[148, 19]-----
	STORE R3, 4(LB)	;  Assiging a value to itrRow
	LOAD R3, R2	;  Return value of the assignement of =itrRowand storing it into R2
; --------EndAssignOp--------[148, 12]-----
	BRA while_begin41
while_end41:
	LOAD 3(LB), R2	; loading result into memory
	LOAD R2, R0
	BRA fin.MatrixTraitement.transposeMatrixFloat
	WSTR "Error: La méthode code.MatrixTraitement.transposeMatrixFloat doit retourner un element"
	WNL
	ERROR
fin.MatrixTraitement.transposeMatrixFloat:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : flattenMatrixInt with label =  code.MatrixTraitement.flattenMatrixInt--------
code.MatrixTraitement.flattenMatrixInt:
	TSTO #11
	BOV stack_overflow_error
	ADDSP #7
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------BeginSelection--------[154, 22]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[154, 22]-----
	STORE R2, 1(LB)	; Initializing the variable sizeRow and loading it into memory
; --------BeginSelection--------[155, 22]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R2), R2	; Loading the field size2D into a register 
; --------BeginSelection--------[155, 22]-----
	STORE R2, 2(LB)	; Initializing the variable sizeCol and loading it into memory
; --------StartBinaryOp--------[156, 22]-----
	LOAD 2(LB), R2	; loading sizeCol into memory
	MUL 1(LB), R2
; --------EndBinaryOp--------[156, 22]-----
	STORE R2, 3(LB)	; Initializing the variable dimension and loading it into memory
; --------StartNewTable--------[157, 23]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  int[] into memory at register R2
	LOAD 3(LB), R3	; loading dimension into memory
	CMP #1, R3
	BLT int_allocation_table_must_be_strictly_positive
	LOAD R3, R1
	ADD #1, R1
	NEW R1, R0
	BOV heap_overflow_error
	STORE R3, 0(R0)
	LOAD R0, R2
; --------EndNewTable--------[157, 23]-----
	STORE R2, 4(LB)	; Initializing the variable result and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 5(LB)	; Initializing the variable itrRow and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 6(LB)	; Initializing the variable itrCol and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 7(LB)	; Initializing the variable itrResult and loading it into memory
while_begin43:
; --------StartBinaryOp--------[166, 15]-----
	LOAD 5(LB), R2	; loading itrRow into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[166, 15]-----
	CMP #1, R2
	BNE while_end43
while_begin44:
; --------StartBinaryOp--------[167, 19]-----
	LOAD 6(LB), R2	; loading itrCol into memory
	CMP 2(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[167, 19]-----
	CMP #1, R2
	BNE while_end44
; --------BeginAssignOp--------[168, 16]-----
; --------StartGetTableElements--------[168, 36]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  mat into memory at register R3
	PUSH R2
	LOAD 5(LB), R2	; loading itrRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 6(LB), R3	; loading itrCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading mat into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of mat into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of mat into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[168, 36]-----
; --------StartStoreTableElements--------[168, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  result the value in R3
	PUSH R2
	LOAD 7(LB), R2	; loading itrResult into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD 4(LB), R1	; [saving] loading result into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of result into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD R2, R0
	POP R2
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[168, 16]-----
; --------EndAssignOp--------[168, 16]-----
; --------BeginAssignOp--------[169, 16]-----
; --------StartBinaryOp--------[169, 26]-----
	LOAD 7(LB), R3	; loading itrResult into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[169, 26]-----
	STORE R3, 7(LB)	;  Assiging a value to itrResult
	LOAD R3, R2	;  Return value of the assignement of =itrResultand storing it into R2
; --------EndAssignOp--------[169, 16]-----
; --------BeginAssignOp--------[170, 16]-----
; --------StartBinaryOp--------[170, 23]-----
	LOAD 6(LB), R3	; loading itrCol into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[170, 23]-----
	STORE R3, 6(LB)	;  Assiging a value to itrCol
	LOAD R3, R2	;  Return value of the assignement of =itrColand storing it into R2
; --------EndAssignOp--------[170, 16]-----
	BRA while_begin44
while_end44:
; --------BeginAssignOp--------[172, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 6(LB)	;  Assiging a value to itrCol
	LOAD R3, R2	;  Return value of the assignement of =itrColand storing it into R2
; --------EndAssignOp--------[172, 12]-----
; --------BeginAssignOp--------[173, 12]-----
; --------StartBinaryOp--------[173, 19]-----
	LOAD 5(LB), R3	; loading itrRow into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[173, 19]-----
	STORE R3, 5(LB)	;  Assiging a value to itrRow
	LOAD R3, R2	;  Return value of the assignement of =itrRowand storing it into R2
; --------EndAssignOp--------[173, 12]-----
	BRA while_begin43
while_end43:
	LOAD 4(LB), R2	; loading result into memory
	LOAD R2, R0
	BRA fin.MatrixTraitement.flattenMatrixInt
	WSTR "Error: La méthode code.MatrixTraitement.flattenMatrixInt doit retourner un element"
	WNL
	ERROR
fin.MatrixTraitement.flattenMatrixInt:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : flattenMatrixFloat with label =  code.MatrixTraitement.flattenMatrixFloat--------
code.MatrixTraitement.flattenMatrixFloat:
	TSTO #11
	BOV stack_overflow_error
	ADDSP #7
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------BeginSelection--------[179, 22]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[179, 22]-----
	STORE R2, 1(LB)	; Initializing the variable sizeRow and loading it into memory
; --------BeginSelection--------[180, 22]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R2), R2	; Loading the field size2D into a register 
; --------BeginSelection--------[180, 22]-----
	STORE R2, 2(LB)	; Initializing the variable sizeCol and loading it into memory
; --------StartBinaryOp--------[181, 22]-----
	LOAD 2(LB), R2	; loading sizeCol into memory
	MUL 1(LB), R2
; --------EndBinaryOp--------[181, 22]-----
	STORE R2, 3(LB)	; Initializing the variable dimension and loading it into memory
; --------StartNewTable--------[182, 25]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  float[] into memory at register R2
	LOAD 3(LB), R3	; loading dimension into memory
	CMP #1, R3
	BLT int_allocation_table_must_be_strictly_positive
	LOAD R3, R1
	ADD #1, R1
	NEW R1, R0
	BOV heap_overflow_error
	STORE R3, 0(R0)
	LOAD R0, R2
; --------EndNewTable--------[182, 25]-----
	STORE R2, 4(LB)	; Initializing the variable result and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 5(LB)	; Initializing the variable itrRow and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 6(LB)	; Initializing the variable itrCol and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 7(LB)	; Initializing the variable itrResult and loading it into memory
while_begin45:
; --------StartBinaryOp--------[191, 15]-----
	LOAD 5(LB), R2	; loading itrRow into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[191, 15]-----
	CMP #1, R2
	BNE while_end45
while_begin46:
; --------StartBinaryOp--------[192, 19]-----
	LOAD 6(LB), R2	; loading itrCol into memory
	CMP 2(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[192, 19]-----
	CMP #1, R2
	BNE while_end46
; --------BeginAssignOp--------[193, 16]-----
; --------StartGetTableElements--------[193, 36]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  mat into memory at register R3
	PUSH R2
	LOAD 5(LB), R2	; loading itrRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 6(LB), R3	; loading itrCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading mat into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of mat into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of mat into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[193, 36]-----
; --------StartStoreTableElements--------[193, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  result the value in R3
	PUSH R2
	LOAD 7(LB), R2	; loading itrResult into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD 4(LB), R1	; [saving] loading result into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of result into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD R2, R0
	POP R2
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[193, 16]-----
; --------EndAssignOp--------[193, 16]-----
; --------BeginAssignOp--------[194, 16]-----
; --------StartBinaryOp--------[194, 26]-----
	LOAD 7(LB), R3	; loading itrResult into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[194, 26]-----
	STORE R3, 7(LB)	;  Assiging a value to itrResult
	LOAD R3, R2	;  Return value of the assignement of =itrResultand storing it into R2
; --------EndAssignOp--------[194, 16]-----
; --------BeginAssignOp--------[195, 16]-----
; --------StartBinaryOp--------[195, 23]-----
	LOAD 6(LB), R3	; loading itrCol into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[195, 23]-----
	STORE R3, 6(LB)	;  Assiging a value to itrCol
	LOAD R3, R2	;  Return value of the assignement of =itrColand storing it into R2
; --------EndAssignOp--------[195, 16]-----
	BRA while_begin46
while_end46:
; --------BeginAssignOp--------[197, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 6(LB)	;  Assiging a value to itrCol
	LOAD R3, R2	;  Return value of the assignement of =itrColand storing it into R2
; --------EndAssignOp--------[197, 12]-----
; --------BeginAssignOp--------[198, 12]-----
; --------StartBinaryOp--------[198, 19]-----
	LOAD 5(LB), R3	; loading itrRow into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[198, 19]-----
	STORE R3, 5(LB)	;  Assiging a value to itrRow
	LOAD R3, R2	;  Return value of the assignement of =itrRowand storing it into R2
; --------EndAssignOp--------[198, 12]-----
	BRA while_begin45
while_end45:
	LOAD 4(LB), R2	; loading result into memory
	LOAD R2, R0
	BRA fin.MatrixTraitement.flattenMatrixFloat
	WSTR "Error: La méthode code.MatrixTraitement.flattenMatrixFloat doit retourner un element"
	WNL
	ERROR
fin.MatrixTraitement.flattenMatrixFloat:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : helperInversionFloat with label =  code.MatrixTraitement.helperInversionFloat--------
code.MatrixTraitement.helperInversionFloat:
	TSTO #16
	BOV stack_overflow_error
	ADDSP #11
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------BeginSelection--------[206, 19]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[206, 19]-----
	STORE R2, 1(LB)	; Initializing the variable size and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable indexRow and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 3(LB)	; Initializing the variable indexCol and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	FLOAT R2, R2	; Doing an unary minus
	STORE R2, 4(LB)	; Initializing the variable tempo and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	FLOAT R2, R2	; Doing an unary minus
	STORE R2, 5(LB)	; Initializing the variable tempoK and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	FLOAT R2, R2	; Doing an unary minus
	STORE R2, 6(LB)	; Initializing the variable buffer and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 7(LB)	; Initializing the variable k and loading it into memory
; --------StartNewTable--------[213, 29]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  float[][] into memory at register R2
	LOAD 1(LB), R3	; loading size into memory
	CMP #1, R3
	BLT int_allocation_table_must_be_strictly_positive
; --------StartBinaryOp--------[213, 45]-----
	PUSH R2
	LOAD #2, R2	; loading 2 into memory
	MUL 1(LB), R2
; --------EndBinaryOp--------[213, 45]-----
	CMP #1, R2
	BLT int_allocation_table_must_be_strictly_positive
	LOAD R3, R1
	MUL R2, R1
	ADD #2, R1
	NEW R1, R0
	BOV heap_overflow_error
	STORE R3, 0(R0)
	STORE R2, 1(R0)
	POP R2
	LOAD R0, R2
; --------EndNewTable--------[213, 29]-----
	STORE R2, 8(LB)	; Initializing the variable matInver and loading it into memory
; --------StartNewTable--------[214, 35]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  float[][] into memory at register R2
	LOAD 1(LB), R3	; loading size into memory
	CMP #1, R3
	BLT int_allocation_table_must_be_strictly_positive
	PUSH R2
	LOAD 1(LB), R2	; loading size into memory
	CMP #1, R2
	BLT int_allocation_table_must_be_strictly_positive
	LOAD R3, R1
	MUL R2, R1
	ADD #2, R1
	NEW R1, R0
	BOV heap_overflow_error
	STORE R3, 0(R0)
	STORE R2, 1(R0)
	POP R2
	LOAD R0, R2
; --------EndNewTable--------[214, 35]-----
	STORE R2, 9(LB)	; Initializing the variable matInverResult and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 10(LB)	; Initializing the variable inX and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 11(LB)	; Initializing the variable inY and loading it into memory
while_begin47:
; --------StartBinaryOp--------[219, 15]-----
	LOAD 2(LB), R2	; loading indexRow into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[219, 15]-----
	CMP #1, R2
	BNE while_end47
; --------BeginAssignOp--------[220, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[220, 12]-----
while_begin48:
; --------StartBinaryOp--------[221, 18]-----
	LOAD 3(LB), R2	; loading indexCol into memory
; --------BeginSelection--------[221, 27]-----
	LOAD 8(LB), R3	; loading matInver into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[221, 27]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[221, 18]-----
	CMP #1, R2
	BNE while_end48
; --------StartBinaryOp--------[222, 19]-----
	LOAD 3(LB), R2	; loading indexCol into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[222, 19]-----
; ---------Startif-----------[222, 16]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else23
; --------BeginAssignOp--------[223, 20]-----
; --------StartGetTableElements--------[223, 49]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  mat into memory at register R3
	PUSH R2
	LOAD 2(LB), R2	; loading indexRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 3(LB), R3	; loading indexCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading mat into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of mat into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of mat into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[223, 49]-----
; --------StartStoreTableElements--------[223, 20]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	PUSH R2
	LOAD 2(LB), R2	; loading indexRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 3(LB), R3	; loading indexCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; [saving] loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[223, 20]-----
; --------EndAssignOp--------[223, 20]-----
	BRA end_ifthenelse_23
else23:
; --------BeginAssignOp--------[225, 20]-----
	LOAD #0, R3	; loading 0 into memory
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[225, 20]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	PUSH R2
	LOAD 2(LB), R2	; loading indexRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 3(LB), R3	; loading indexCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; [saving] loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[225, 20]-----
; --------EndAssignOp--------[225, 20]-----
end_ifthenelse_23:
; ---------Endif-----------
; --------BeginAssignOp--------[228, 16]-----
; --------StartBinaryOp--------[228, 25]-----
	LOAD 3(LB), R3	; loading indexCol into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[228, 25]-----
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[228, 16]-----
	BRA while_begin48
while_end48:
; --------BeginAssignOp--------[230, 12]-----
	LOAD #1, R3	; loading 1 into memory
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[230, 12]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	PUSH R2
	LOAD 2(LB), R2	; loading indexRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
; --------StartBinaryOp--------[230, 31]-----
	PUSH R3
	LOAD 1(LB), R3	; loading size into memory
	ADD 2(LB), R3
; --------EndBinaryOp--------[230, 31]-----
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; [saving] loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[230, 12]-----
; --------EndAssignOp--------[230, 12]-----
; --------BeginAssignOp--------[232, 12]-----
; --------StartBinaryOp--------[232, 21]-----
	LOAD 2(LB), R3	; loading indexRow into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[232, 21]-----
	STORE R3, 2(LB)	;  Assiging a value to indexRow
	LOAD R3, R2	;  Return value of the assignement of =indexRowand storing it into R2
; --------EndAssignOp--------[232, 12]-----
	BRA while_begin47
while_end47:
; --------BeginAssignOp--------[237, 8]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[237, 8]-----
; --------BeginAssignOp--------[238, 8]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 2(LB)	;  Assiging a value to indexRow
	LOAD R3, R2	;  Return value of the assignement of =indexRowand storing it into R2
; --------EndAssignOp--------[238, 8]-----
while_begin49:
; --------StartBinaryOp--------[239, 15]-----
	LOAD 2(LB), R2	; loading indexRow into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[239, 15]-----
	CMP #1, R2
	BNE while_end49
; --------BeginAssignOp--------[240, 12]-----
; --------StartGetTableElements--------[240, 18]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R3
	PUSH R2
	LOAD 2(LB), R2	; loading indexRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 2(LB), R3	; loading indexRow into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[240, 18]-----
	STORE R3, 4(LB)	;  Assiging a value to tempo
	LOAD R3, R2	;  Return value of the assignement of =tempoand storing it into R2
; --------EndAssignOp--------[240, 12]-----
; --------BeginAssignOp--------[241, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[241, 12]-----
while_begin50:
; --------StartBinaryOp--------[242, 18]-----
	LOAD 3(LB), R2	; loading indexCol into memory
; --------StartBinaryOp--------[242, 27]-----
	LOAD #2, R3	; loading 2 into memory
	MUL 1(LB), R3
; --------EndBinaryOp--------[242, 27]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[242, 18]-----
	CMP #1, R2
	BNE while_end50
; --------BeginAssignOp--------[243, 16]-----
; --------StartBinaryOp--------[243, 45]-----
; --------StartGetTableElements--------[243, 45]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R3
	PUSH R2
	LOAD 2(LB), R2	; loading indexRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 3(LB), R3	; loading indexCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[243, 45]-----
	DIV 4(LB), R3
	BOV overflow_error	; Checking for overflow since the operation is between two floats 
; --------EndBinaryOp--------[243, 45]-----
; --------StartStoreTableElements--------[243, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	PUSH R2
	LOAD 2(LB), R2	; loading indexRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 3(LB), R3	; loading indexCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; [saving] loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[243, 16]-----
; --------EndAssignOp--------[243, 16]-----
; --------BeginAssignOp--------[245, 16]-----
; --------StartBinaryOp--------[245, 25]-----
	LOAD 3(LB), R3	; loading indexCol into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[245, 25]-----
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[245, 16]-----
	BRA while_begin50
while_end50:
; --------BeginAssignOp--------[250, 12]-----
; --------StartBinaryOp--------[250, 14]-----
	LOAD 2(LB), R3	; loading indexRow into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[250, 14]-----
	STORE R3, 7(LB)	;  Assiging a value to k
	LOAD R3, R2	;  Return value of the assignement of =kand storing it into R2
; --------EndAssignOp--------[250, 12]-----
while_begin51:
; --------StartBinaryOp--------[251, 19]-----
	LOAD 7(LB), R2	; loading k into memory
; --------BeginSelection--------[251, 21]-----
	LOAD 8(LB), R3	; loading matInver into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[251, 21]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[251, 19]-----
	CMP #1, R2
	BNE while_end51
; --------BeginAssignOp--------[252, 16]-----
; --------StartGetTableElements--------[252, 23]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R3
	PUSH R2
	LOAD 7(LB), R2	; loading k into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 2(LB), R3	; loading indexRow into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[252, 23]-----
	STORE R3, 5(LB)	;  Assiging a value to tempoK
	LOAD R3, R2	;  Return value of the assignement of =tempoKand storing it into R2
; --------EndAssignOp--------[252, 16]-----
; --------BeginAssignOp--------[253, 16]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[253, 16]-----
while_begin52:
; --------StartBinaryOp--------[254, 22]-----
	LOAD 3(LB), R2	; loading indexCol into memory
; --------BeginSelection--------[254, 31]-----
	LOAD 8(LB), R3	; loading matInver into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[254, 31]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[254, 22]-----
	CMP #1, R2
	BNE while_end52
; --------BeginAssignOp--------[255, 20]-----
; --------StartBinaryOp--------[255, 42]-----
; --------StartGetTableElements--------[255, 42]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R3
	PUSH R2
	LOAD 7(LB), R2	; loading k into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 3(LB), R3	; loading indexCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[255, 42]-----
; --------StartBinaryOp--------[255, 64]-----
; --------StartGetTableElements--------[255, 64]-----
	PUSH R2
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R2
	PUSH R3
	LOAD 2(LB), R3	; loading indexRow into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	PUSH R2
	LOAD 3(LB), R2	; loading indexCol into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	MUL R0, R3
	ADD R2, R3
	LOAD 2(R1, R3), R0
	POP R2
	POP R3
	LOAD R0, R2
; --------EndGetTableElements--------[255, 64]-----
	MUL 5(LB), R2
	BOV overflow_error	; Checking for overflow since the operation is between two floats 
; --------EndBinaryOp--------[255, 64]-----
	SUB R2, R3
	BOV overflow_error	; Checking for overflow since the operation is between two floats 
	POP R2
; --------EndBinaryOp--------[255, 42]-----
; --------StartStoreTableElements--------[255, 20]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	PUSH R2
	LOAD 7(LB), R2	; loading k into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 3(LB), R3	; loading indexCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; [saving] loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[255, 20]-----
; --------EndAssignOp--------[255, 20]-----
; --------BeginAssignOp--------[257, 20]-----
; --------StartBinaryOp--------[257, 29]-----
	LOAD 3(LB), R3	; loading indexCol into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[257, 29]-----
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[257, 20]-----
	BRA while_begin52
while_end52:
; --------BeginAssignOp--------[260, 16]-----
; --------StartBinaryOp--------[260, 18]-----
	LOAD 7(LB), R3	; loading k into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[260, 18]-----
	STORE R3, 7(LB)	;  Assiging a value to k
	LOAD R3, R2	;  Return value of the assignement of =kand storing it into R2
; --------EndAssignOp--------[260, 16]-----
	BRA while_begin51
while_end51:
; --------BeginAssignOp--------[265, 12]-----
; --------StartBinaryOp--------[265, 21]-----
	LOAD 2(LB), R3	; loading indexRow into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[265, 21]-----
	STORE R3, 2(LB)	;  Assiging a value to indexRow
	LOAD R3, R2	;  Return value of the assignement of =indexRowand storing it into R2
; --------EndAssignOp--------[265, 12]-----
	BRA while_begin49
while_end49:
; --------BeginAssignOp--------[268, 8]-----
; --------StartBinaryOp--------[268, 17]-----
; --------BeginSelection--------[268, 17]-----
	LOAD 8(LB), R3	; loading matInver into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[268, 17]-----
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	SUB R2, R3
	POP R2
; --------EndBinaryOp--------[268, 17]-----
	STORE R3, 2(LB)	;  Assiging a value to indexRow
	LOAD R3, R2	;  Return value of the assignement of =indexRowand storing it into R2
; --------EndAssignOp--------[268, 8]-----
while_begin53:
; --------StartBinaryOp--------[269, 15]-----
	LOAD 2(LB), R2	; loading indexRow into memory
	LOAD #0, R3	; loading 0 into memory
	CMP R3, R2	; Comparing registers for GreaterOrEqual operation 
	SGE R2	; Placing GreaterOrEqual result into the register  
; --------EndBinaryOp--------[269, 15]-----
	CMP #1, R2
	BNE while_end53
; --------BeginAssignOp--------[270, 12]-----
; --------StartBinaryOp--------[270, 14]-----
	LOAD 2(LB), R3	; loading indexRow into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	SUB R2, R3
	POP R2
; --------EndBinaryOp--------[270, 14]-----
	STORE R3, 7(LB)	;  Assiging a value to k
	LOAD R3, R2	;  Return value of the assignement of =kand storing it into R2
; --------EndAssignOp--------[270, 12]-----
while_begin54:
; --------StartBinaryOp--------[271, 18]-----
	LOAD 7(LB), R2	; loading k into memory
	LOAD #0, R3	; loading 0 into memory
	CMP R3, R2	; Comparing registers for GreaterOrEqual operation 
	SGE R2	; Placing GreaterOrEqual result into the register  
; --------EndBinaryOp--------[271, 18]-----
	CMP #1, R2
	BNE while_end54
; --------BeginAssignOp--------[272, 16]-----
; --------StartGetTableElements--------[272, 23]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R3
	PUSH R2
	LOAD 7(LB), R2	; loading k into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 2(LB), R3	; loading indexRow into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[272, 23]-----
	STORE R3, 6(LB)	;  Assiging a value to buffer
	LOAD R3, R2	;  Return value of the assignement of =bufferand storing it into R2
; --------EndAssignOp--------[272, 16]-----
; --------BeginAssignOp--------[273, 16]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[273, 16]-----
while_begin55:
; --------StartBinaryOp--------[274, 23]-----
	LOAD 3(LB), R2	; loading indexCol into memory
; --------BeginSelection--------[274, 32]-----
	LOAD 8(LB), R3	; loading matInver into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[274, 32]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[274, 23]-----
	CMP #1, R2
	BNE while_end55
; --------BeginAssignOp--------[275, 20]-----
; --------StartBinaryOp--------[275, 43]-----
; --------StartGetTableElements--------[275, 43]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R3
	PUSH R2
	LOAD 7(LB), R2	; loading k into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 3(LB), R3	; loading indexCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[275, 43]-----
; --------StartBinaryOp--------[275, 65]-----
; --------StartGetTableElements--------[275, 65]-----
	PUSH R2
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R2
	PUSH R3
	LOAD 2(LB), R3	; loading indexRow into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	PUSH R2
	LOAD 3(LB), R2	; loading indexCol into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	MUL R0, R3
	ADD R2, R3
	LOAD 2(R1, R3), R0
	POP R2
	POP R3
	LOAD R0, R2
; --------EndGetTableElements--------[275, 65]-----
	MUL 6(LB), R2
	BOV overflow_error	; Checking for overflow since the operation is between two floats 
; --------EndBinaryOp--------[275, 65]-----
	SUB R2, R3
	BOV overflow_error	; Checking for overflow since the operation is between two floats 
	POP R2
; --------EndBinaryOp--------[275, 43]-----
; --------StartStoreTableElements--------[275, 20]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	PUSH R2
	LOAD 7(LB), R2	; loading k into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 3(LB), R3	; loading indexCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; [saving] loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[275, 20]-----
; --------EndAssignOp--------[275, 20]-----
; --------BeginAssignOp--------[276, 20]-----
; --------StartBinaryOp--------[276, 29]-----
	LOAD 3(LB), R3	; loading indexCol into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[276, 29]-----
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[276, 20]-----
	BRA while_begin55
while_end55:
; --------BeginAssignOp--------[279, 16]-----
; --------StartBinaryOp--------[279, 18]-----
	LOAD 7(LB), R3	; loading k into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	SUB R2, R3
	POP R2
; --------EndBinaryOp--------[279, 18]-----
	STORE R3, 7(LB)	;  Assiging a value to k
	LOAD R3, R2	;  Return value of the assignement of =kand storing it into R2
; --------EndAssignOp--------[279, 16]-----
	BRA while_begin54
while_end54:
; --------BeginAssignOp--------[283, 12]-----
; --------StartBinaryOp--------[283, 21]-----
	LOAD 2(LB), R3	; loading indexRow into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	SUB R2, R3
	POP R2
; --------EndBinaryOp--------[283, 21]-----
	STORE R3, 2(LB)	;  Assiging a value to indexRow
	LOAD R3, R2	;  Return value of the assignement of =indexRowand storing it into R2
; --------EndAssignOp--------[283, 12]-----
	BRA while_begin53
while_end53:
; --------BeginAssignOp--------[287, 8]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 10(LB)	;  Assiging a value to inX
	LOAD R3, R2	;  Return value of the assignement of =inXand storing it into R2
; --------EndAssignOp--------[287, 8]-----
; --------BeginAssignOp--------[288, 8]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 11(LB)	;  Assiging a value to inY
	LOAD R3, R2	;  Return value of the assignement of =inYand storing it into R2
; --------EndAssignOp--------[288, 8]-----
while_begin56:
; --------StartBinaryOp--------[289, 14]-----
	LOAD 10(LB), R2	; loading inX into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[289, 14]-----
	CMP #1, R2
	BNE while_end56
; --------BeginAssignOp--------[290, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 11(LB)	;  Assiging a value to inY
	LOAD R3, R2	;  Return value of the assignement of =inYand storing it into R2
; --------EndAssignOp--------[290, 12]-----
while_begin57:
; --------StartBinaryOp--------[291, 19]-----
	LOAD 11(LB), R2	; loading inY into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[291, 19]-----
	CMP #1, R2
	BNE while_end57
; --------BeginAssignOp--------[292, 16]-----
; --------StartGetTableElements--------[292, 41]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R3
	PUSH R2
	LOAD 10(LB), R2	; loading inX into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
; --------StartBinaryOp--------[292, 55]-----
	PUSH R3
	LOAD 1(LB), R3	; loading size into memory
	ADD 11(LB), R3
; --------EndBinaryOp--------[292, 55]-----
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[292, 41]-----
; --------StartStoreTableElements--------[292, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInverResult the value in R3
	PUSH R2
	LOAD 10(LB), R2	; loading inX into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 11(LB), R3	; loading inY into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 9(LB), R1	; [saving] loading matInverResult into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInverResult into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInverResult into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[292, 16]-----
; --------EndAssignOp--------[292, 16]-----
; --------BeginAssignOp--------[293, 16]-----
; --------StartBinaryOp--------[293, 20]-----
	LOAD 11(LB), R3	; loading inY into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[293, 20]-----
	STORE R3, 11(LB)	;  Assiging a value to inY
	LOAD R3, R2	;  Return value of the assignement of =inYand storing it into R2
; --------EndAssignOp--------[293, 16]-----
	BRA while_begin57
while_end57:
; --------BeginAssignOp--------[295, 12]-----
; --------StartBinaryOp--------[295, 16]-----
	LOAD 10(LB), R3	; loading inX into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[295, 16]-----
	STORE R3, 10(LB)	;  Assiging a value to inX
	LOAD R3, R2	;  Return value of the assignement of =inXand storing it into R2
; --------EndAssignOp--------[295, 12]-----
	BRA while_begin56
while_end56:
	LOAD 9(LB), R2	; loading matInverResult into memory
	LOAD R2, R0
	BRA fin.MatrixTraitement.helperInversionFloat
	WSTR "Error: La méthode code.MatrixTraitement.helperInversionFloat doit retourner un element"
	WNL
	ERROR
fin.MatrixTraitement.helperInversionFloat:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : helperInversionInt with label =  code.MatrixTraitement.helperInversionInt--------
code.MatrixTraitement.helperInversionInt:
	TSTO #16
	BOV stack_overflow_error
	ADDSP #11
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------BeginSelection--------[306, 19]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[306, 19]-----
	STORE R2, 1(LB)	; Initializing the variable size and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable indexRow and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 3(LB)	; Initializing the variable indexCol and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 4(LB)	; Initializing the variable tempo and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 5(LB)	; Initializing the variable tempoK and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 6(LB)	; Initializing the variable buffer and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 7(LB)	; Initializing the variable k and loading it into memory
; --------StartNewTable--------[313, 27]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  int[][] into memory at register R2
	LOAD 1(LB), R3	; loading size into memory
	CMP #1, R3
	BLT int_allocation_table_must_be_strictly_positive
; --------StartBinaryOp--------[313, 41]-----
	PUSH R2
	LOAD #2, R2	; loading 2 into memory
	MUL 1(LB), R2
; --------EndBinaryOp--------[313, 41]-----
	CMP #1, R2
	BLT int_allocation_table_must_be_strictly_positive
	LOAD R3, R1
	MUL R2, R1
	ADD #2, R1
	NEW R1, R0
	BOV heap_overflow_error
	STORE R3, 0(R0)
	STORE R2, 1(R0)
	POP R2
	LOAD R0, R2
; --------EndNewTable--------[313, 27]-----
	STORE R2, 8(LB)	; Initializing the variable matInver and loading it into memory
; --------StartNewTable--------[314, 33]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  int[][] into memory at register R2
	LOAD 1(LB), R3	; loading size into memory
	CMP #1, R3
	BLT int_allocation_table_must_be_strictly_positive
	PUSH R2
	LOAD 1(LB), R2	; loading size into memory
	CMP #1, R2
	BLT int_allocation_table_must_be_strictly_positive
	LOAD R3, R1
	MUL R2, R1
	ADD #2, R1
	NEW R1, R0
	BOV heap_overflow_error
	STORE R3, 0(R0)
	STORE R2, 1(R0)
	POP R2
	LOAD R0, R2
; --------EndNewTable--------[314, 33]-----
	STORE R2, 9(LB)	; Initializing the variable matInverResult and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 10(LB)	; Initializing the variable inX and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 11(LB)	; Initializing the variable inY and loading it into memory
while_begin58:
; --------StartBinaryOp--------[319, 15]-----
	LOAD 2(LB), R2	; loading indexRow into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[319, 15]-----
	CMP #1, R2
	BNE while_end58
; --------BeginAssignOp--------[320, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[320, 12]-----
while_begin59:
; --------StartBinaryOp--------[321, 18]-----
	LOAD 3(LB), R2	; loading indexCol into memory
; --------BeginSelection--------[321, 27]-----
	LOAD 8(LB), R3	; loading matInver into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[321, 27]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[321, 18]-----
	CMP #1, R2
	BNE while_end59
; --------StartBinaryOp--------[322, 19]-----
	LOAD 3(LB), R2	; loading indexCol into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[322, 19]-----
; ---------Startif-----------[322, 16]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else24
; --------BeginAssignOp--------[323, 20]-----
; --------StartGetTableElements--------[323, 49]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  mat into memory at register R3
	PUSH R2
	LOAD 2(LB), R2	; loading indexRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 3(LB), R3	; loading indexCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading mat into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of mat into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of mat into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[323, 49]-----
; --------StartStoreTableElements--------[323, 20]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	PUSH R2
	LOAD 2(LB), R2	; loading indexRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 3(LB), R3	; loading indexCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; [saving] loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[323, 20]-----
; --------EndAssignOp--------[323, 20]-----
	BRA end_ifthenelse_24
else24:
; --------BeginAssignOp--------[325, 20]-----
	LOAD #0, R3	; loading 0 into memory
; --------StartStoreTableElements--------[325, 20]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	PUSH R2
	LOAD 2(LB), R2	; loading indexRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 3(LB), R3	; loading indexCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; [saving] loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[325, 20]-----
; --------EndAssignOp--------[325, 20]-----
end_ifthenelse_24:
; ---------Endif-----------
; --------BeginAssignOp--------[328, 16]-----
; --------StartBinaryOp--------[328, 25]-----
	LOAD 3(LB), R3	; loading indexCol into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[328, 25]-----
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[328, 16]-----
	BRA while_begin59
while_end59:
; --------BeginAssignOp--------[330, 12]-----
	LOAD #1, R3	; loading 1 into memory
; --------StartStoreTableElements--------[330, 12]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	PUSH R2
	LOAD 2(LB), R2	; loading indexRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
; --------StartBinaryOp--------[330, 31]-----
	PUSH R3
	LOAD 1(LB), R3	; loading size into memory
	ADD 2(LB), R3
; --------EndBinaryOp--------[330, 31]-----
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; [saving] loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[330, 12]-----
; --------EndAssignOp--------[330, 12]-----
; --------BeginAssignOp--------[332, 12]-----
; --------StartBinaryOp--------[332, 21]-----
	LOAD 2(LB), R3	; loading indexRow into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[332, 21]-----
	STORE R3, 2(LB)	;  Assiging a value to indexRow
	LOAD R3, R2	;  Return value of the assignement of =indexRowand storing it into R2
; --------EndAssignOp--------[332, 12]-----
	BRA while_begin58
while_end58:
; --------BeginAssignOp--------[337, 8]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[337, 8]-----
; --------BeginAssignOp--------[338, 8]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 2(LB)	;  Assiging a value to indexRow
	LOAD R3, R2	;  Return value of the assignement of =indexRowand storing it into R2
; --------EndAssignOp--------[338, 8]-----
while_begin60:
; --------StartBinaryOp--------[339, 15]-----
	LOAD 2(LB), R2	; loading indexRow into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[339, 15]-----
	CMP #1, R2
	BNE while_end60
; --------BeginAssignOp--------[340, 12]-----
; --------StartGetTableElements--------[340, 18]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R3
	PUSH R2
	LOAD 2(LB), R2	; loading indexRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 2(LB), R3	; loading indexRow into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[340, 18]-----
	STORE R3, 4(LB)	;  Assiging a value to tempo
	LOAD R3, R2	;  Return value of the assignement of =tempoand storing it into R2
; --------EndAssignOp--------[340, 12]-----
; --------BeginAssignOp--------[341, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[341, 12]-----
while_begin61:
; --------StartBinaryOp--------[342, 18]-----
	LOAD 3(LB), R2	; loading indexCol into memory
; --------StartBinaryOp--------[342, 27]-----
	LOAD #2, R3	; loading 2 into memory
	MUL 1(LB), R3
; --------EndBinaryOp--------[342, 27]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[342, 18]-----
	CMP #1, R2
	BNE while_end61
; --------BeginAssignOp--------[343, 16]-----
; --------StartBinaryOp--------[343, 45]-----
; --------StartGetTableElements--------[343, 45]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R3
	PUSH R2
	LOAD 2(LB), R2	; loading indexRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 3(LB), R3	; loading indexCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[343, 45]-----
	PUSH R2
	LOAD 4(LB), R2	; loading tempo into memory
	CMP #0, R2
	BEQ div0_error	; Checking for division by 0the operation is between two ints 
	QUO R2, R3
	POP R2
; --------EndBinaryOp--------[343, 45]-----
; --------StartStoreTableElements--------[343, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	PUSH R2
	LOAD 2(LB), R2	; loading indexRow into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 3(LB), R3	; loading indexCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; [saving] loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[343, 16]-----
; --------EndAssignOp--------[343, 16]-----
; --------BeginAssignOp--------[345, 16]-----
; --------StartBinaryOp--------[345, 25]-----
	LOAD 3(LB), R3	; loading indexCol into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[345, 25]-----
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[345, 16]-----
	BRA while_begin61
while_end61:
; --------BeginAssignOp--------[350, 12]-----
; --------StartBinaryOp--------[350, 14]-----
	LOAD 2(LB), R3	; loading indexRow into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[350, 14]-----
	STORE R3, 7(LB)	;  Assiging a value to k
	LOAD R3, R2	;  Return value of the assignement of =kand storing it into R2
; --------EndAssignOp--------[350, 12]-----
while_begin62:
; --------StartBinaryOp--------[351, 19]-----
	LOAD 7(LB), R2	; loading k into memory
; --------BeginSelection--------[351, 21]-----
	LOAD 8(LB), R3	; loading matInver into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[351, 21]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[351, 19]-----
	CMP #1, R2
	BNE while_end62
; --------BeginAssignOp--------[352, 16]-----
; --------StartGetTableElements--------[352, 23]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R3
	PUSH R2
	LOAD 7(LB), R2	; loading k into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 2(LB), R3	; loading indexRow into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[352, 23]-----
	STORE R3, 5(LB)	;  Assiging a value to tempoK
	LOAD R3, R2	;  Return value of the assignement of =tempoKand storing it into R2
; --------EndAssignOp--------[352, 16]-----
; --------BeginAssignOp--------[353, 16]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[353, 16]-----
while_begin63:
; --------StartBinaryOp--------[354, 22]-----
	LOAD 3(LB), R2	; loading indexCol into memory
; --------BeginSelection--------[354, 31]-----
	LOAD 8(LB), R3	; loading matInver into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[354, 31]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[354, 22]-----
	CMP #1, R2
	BNE while_end63
; --------BeginAssignOp--------[355, 20]-----
; --------StartBinaryOp--------[355, 42]-----
; --------StartGetTableElements--------[355, 42]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R3
	PUSH R2
	LOAD 7(LB), R2	; loading k into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 3(LB), R3	; loading indexCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[355, 42]-----
; --------StartBinaryOp--------[355, 64]-----
; --------StartGetTableElements--------[355, 64]-----
	PUSH R2
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R2
	PUSH R3
	LOAD 2(LB), R3	; loading indexRow into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	PUSH R2
	LOAD 3(LB), R2	; loading indexCol into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	MUL R0, R3
	ADD R2, R3
	LOAD 2(R1, R3), R0
	POP R2
	POP R3
	LOAD R0, R2
; --------EndGetTableElements--------[355, 64]-----
	MUL 5(LB), R2
; --------EndBinaryOp--------[355, 64]-----
	SUB R2, R3
	POP R2
; --------EndBinaryOp--------[355, 42]-----
; --------StartStoreTableElements--------[355, 20]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	PUSH R2
	LOAD 7(LB), R2	; loading k into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 3(LB), R3	; loading indexCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; [saving] loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[355, 20]-----
; --------EndAssignOp--------[355, 20]-----
; --------BeginAssignOp--------[357, 20]-----
; --------StartBinaryOp--------[357, 29]-----
	LOAD 3(LB), R3	; loading indexCol into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[357, 29]-----
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[357, 20]-----
	BRA while_begin63
while_end63:
; --------BeginAssignOp--------[360, 16]-----
; --------StartBinaryOp--------[360, 18]-----
	LOAD 7(LB), R3	; loading k into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[360, 18]-----
	STORE R3, 7(LB)	;  Assiging a value to k
	LOAD R3, R2	;  Return value of the assignement of =kand storing it into R2
; --------EndAssignOp--------[360, 16]-----
	BRA while_begin62
while_end62:
; --------BeginAssignOp--------[365, 12]-----
; --------StartBinaryOp--------[365, 21]-----
	LOAD 2(LB), R3	; loading indexRow into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[365, 21]-----
	STORE R3, 2(LB)	;  Assiging a value to indexRow
	LOAD R3, R2	;  Return value of the assignement of =indexRowand storing it into R2
; --------EndAssignOp--------[365, 12]-----
	BRA while_begin60
while_end60:
; --------BeginAssignOp--------[368, 8]-----
; --------StartBinaryOp--------[368, 17]-----
; --------BeginSelection--------[368, 17]-----
	LOAD 8(LB), R3	; loading matInver into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[368, 17]-----
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	SUB R2, R3
	POP R2
; --------EndBinaryOp--------[368, 17]-----
	STORE R3, 2(LB)	;  Assiging a value to indexRow
	LOAD R3, R2	;  Return value of the assignement of =indexRowand storing it into R2
; --------EndAssignOp--------[368, 8]-----
while_begin64:
; --------StartBinaryOp--------[369, 15]-----
	LOAD 2(LB), R2	; loading indexRow into memory
	LOAD #0, R3	; loading 0 into memory
	CMP R3, R2	; Comparing registers for GreaterOrEqual operation 
	SGE R2	; Placing GreaterOrEqual result into the register  
; --------EndBinaryOp--------[369, 15]-----
	CMP #1, R2
	BNE while_end64
; --------BeginAssignOp--------[370, 12]-----
; --------StartBinaryOp--------[370, 14]-----
	LOAD 2(LB), R3	; loading indexRow into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	SUB R2, R3
	POP R2
; --------EndBinaryOp--------[370, 14]-----
	STORE R3, 7(LB)	;  Assiging a value to k
	LOAD R3, R2	;  Return value of the assignement of =kand storing it into R2
; --------EndAssignOp--------[370, 12]-----
while_begin65:
; --------StartBinaryOp--------[371, 18]-----
	LOAD 7(LB), R2	; loading k into memory
	LOAD #0, R3	; loading 0 into memory
	CMP R3, R2	; Comparing registers for GreaterOrEqual operation 
	SGE R2	; Placing GreaterOrEqual result into the register  
; --------EndBinaryOp--------[371, 18]-----
	CMP #1, R2
	BNE while_end65
; --------BeginAssignOp--------[372, 16]-----
; --------StartGetTableElements--------[372, 23]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R3
	PUSH R2
	LOAD 7(LB), R2	; loading k into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 2(LB), R3	; loading indexRow into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[372, 23]-----
	STORE R3, 6(LB)	;  Assiging a value to buffer
	LOAD R3, R2	;  Return value of the assignement of =bufferand storing it into R2
; --------EndAssignOp--------[372, 16]-----
; --------BeginAssignOp--------[373, 16]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[373, 16]-----
while_begin66:
; --------StartBinaryOp--------[374, 23]-----
	LOAD 3(LB), R2	; loading indexCol into memory
; --------BeginSelection--------[374, 32]-----
	LOAD 8(LB), R3	; loading matInver into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[374, 32]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[374, 23]-----
	CMP #1, R2
	BNE while_end66
; --------BeginAssignOp--------[375, 20]-----
; --------StartBinaryOp--------[375, 43]-----
; --------StartGetTableElements--------[375, 43]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R3
	PUSH R2
	LOAD 7(LB), R2	; loading k into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 3(LB), R3	; loading indexCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[375, 43]-----
; --------StartBinaryOp--------[375, 65]-----
; --------StartGetTableElements--------[375, 65]-----
	PUSH R2
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R2
	PUSH R3
	LOAD 2(LB), R3	; loading indexRow into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	PUSH R2
	LOAD 3(LB), R2	; loading indexCol into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	MUL R0, R3
	ADD R2, R3
	LOAD 2(R1, R3), R0
	POP R2
	POP R3
	LOAD R0, R2
; --------EndGetTableElements--------[375, 65]-----
	MUL 6(LB), R2
; --------EndBinaryOp--------[375, 65]-----
	SUB R2, R3
	POP R2
; --------EndBinaryOp--------[375, 43]-----
; --------StartStoreTableElements--------[375, 20]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	PUSH R2
	LOAD 7(LB), R2	; loading k into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 3(LB), R3	; loading indexCol into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; [saving] loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[375, 20]-----
; --------EndAssignOp--------[375, 20]-----
; --------BeginAssignOp--------[376, 20]-----
; --------StartBinaryOp--------[376, 29]-----
	LOAD 3(LB), R3	; loading indexCol into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[376, 29]-----
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[376, 20]-----
	BRA while_begin66
while_end66:
; --------BeginAssignOp--------[379, 16]-----
; --------StartBinaryOp--------[379, 18]-----
	LOAD 7(LB), R3	; loading k into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	SUB R2, R3
	POP R2
; --------EndBinaryOp--------[379, 18]-----
	STORE R3, 7(LB)	;  Assiging a value to k
	LOAD R3, R2	;  Return value of the assignement of =kand storing it into R2
; --------EndAssignOp--------[379, 16]-----
	BRA while_begin65
while_end65:
; --------BeginAssignOp--------[383, 12]-----
; --------StartBinaryOp--------[383, 21]-----
	LOAD 2(LB), R3	; loading indexRow into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	SUB R2, R3
	POP R2
; --------EndBinaryOp--------[383, 21]-----
	STORE R3, 2(LB)	;  Assiging a value to indexRow
	LOAD R3, R2	;  Return value of the assignement of =indexRowand storing it into R2
; --------EndAssignOp--------[383, 12]-----
	BRA while_begin64
while_end64:
; --------BeginAssignOp--------[387, 8]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 10(LB)	;  Assiging a value to inX
	LOAD R3, R2	;  Return value of the assignement of =inXand storing it into R2
; --------EndAssignOp--------[387, 8]-----
; --------BeginAssignOp--------[388, 8]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 11(LB)	;  Assiging a value to inY
	LOAD R3, R2	;  Return value of the assignement of =inYand storing it into R2
; --------EndAssignOp--------[388, 8]-----
while_begin67:
; --------StartBinaryOp--------[389, 14]-----
	LOAD 10(LB), R2	; loading inX into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[389, 14]-----
	CMP #1, R2
	BNE while_end67
; --------BeginAssignOp--------[390, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 11(LB)	;  Assiging a value to inY
	LOAD R3, R2	;  Return value of the assignement of =inYand storing it into R2
; --------EndAssignOp--------[390, 12]-----
while_begin68:
; --------StartBinaryOp--------[391, 19]-----
	LOAD 11(LB), R2	; loading inY into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[391, 19]-----
	CMP #1, R2
	BNE while_end68
; --------BeginAssignOp--------[392, 16]-----
; --------StartGetTableElements--------[392, 41]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R3
	PUSH R2
	LOAD 10(LB), R2	; loading inX into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
; --------StartBinaryOp--------[392, 55]-----
	PUSH R3
	LOAD 1(LB), R3	; loading size into memory
	ADD 11(LB), R3
; --------EndBinaryOp--------[392, 55]-----
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD 2(R1, R2), R0
	POP R3
	POP R2
	LOAD R0, R3
; --------EndGetTableElements--------[392, 41]-----
; --------StartStoreTableElements--------[392, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInverResult the value in R3
	PUSH R2
	LOAD 10(LB), R2	; loading inX into memory
	CMP #0, R2
	BLT int_selection_table_must_be_positive
	PUSH R3
	LOAD 11(LB), R3	; loading inY into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 9(LB), R1	; [saving] loading matInverResult into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInverResult into memory
	CMP R2, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInverResult into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	MUL R0, R2
	ADD R3, R2
	LOAD R2, R0
	POP R3
	POP R2
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[392, 16]-----
; --------EndAssignOp--------[392, 16]-----
; --------BeginAssignOp--------[393, 16]-----
; --------StartBinaryOp--------[393, 20]-----
	LOAD 11(LB), R3	; loading inY into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[393, 20]-----
	STORE R3, 11(LB)	;  Assiging a value to inY
	LOAD R3, R2	;  Return value of the assignement of =inYand storing it into R2
; --------EndAssignOp--------[393, 16]-----
	BRA while_begin68
while_end68:
; --------BeginAssignOp--------[395, 12]-----
; --------StartBinaryOp--------[395, 16]-----
	LOAD 10(LB), R3	; loading inX into memory
	PUSH R2
	LOAD #1, R2	; loading 1 into memory
	ADD R2, R3
	POP R2
; --------EndBinaryOp--------[395, 16]-----
	STORE R3, 10(LB)	;  Assiging a value to inX
	LOAD R3, R2	;  Return value of the assignement of =inXand storing it into R2
; --------EndAssignOp--------[395, 12]-----
	BRA while_begin67
while_end67:
	LOAD 9(LB), R2	; loading matInverResult into memory
	LOAD R2, R0
	BRA fin.MatrixTraitement.helperInversionInt
	WSTR "Error: La méthode code.MatrixTraitement.helperInversionInt doit retourner un element"
	WNL
	ERROR
fin.MatrixTraitement.helperInversionInt:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : inversionInt with label =  code.MatrixTraitement.inversionInt--------
code.MatrixTraitement.inversionInt:
	TSTO #8
	BOV stack_overflow_error
	ADDSP #3
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------StartNew--------[407, 24]-----
; [New][loadItemintoRegister] loading new of calss =  Det into memory at register R2
	NEW #1, R2
	BOV heap_overflow_error
	LEA 28(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.Det
	POP R2
; --------EndNew--------[407, 24]-----
	STORE R2, 3(LB)	; Initializing the variable matrixDet and loading it into memory
; --------BeginAssignOp--------[408, 8]-----
; --------BeginMethodCall--------[408, 22]-----
	ADDSP #2
	LOAD 3(LB), R3	; loading matrixDet into memory
	STORE R3, 0(SP)
	LOAD -3(LB), R3	; loading mat into memory
	STORE R3, -1(SP)
	LOAD 0(SP), R3
	CMP #null, R3	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R3), R3
	BSR 20(R3)
	LOAD R0, R3
	SUBSP #2
; --------EndMethodCall--------[408, 22]-----
	FLOAT R3, R3	; Doing an unary minus
	STORE R3, 2(LB)	;  Assiging a value to determinant
	LOAD R3, R2	;  Return value of the assignement of =determinantand storing it into R2
; --------EndAssignOp--------[408, 8]-----
; --------StartOr--------[410, 12]-----
; --------StartBinaryOp--------[410, 12]-----
; --------BeginSelection--------[410, 12]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[410, 12]-----
; --------BeginSelection--------[410, 24]-----
	LOAD -3(LB), R3	; loading mat into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[410, 24]-----
	CMP R3, R2	; Comparing registers for NotEquals operation 
	SNE R2	; Placing NotEquals result into the register  
; --------EndBinaryOp--------[410, 12]-----
	CMP #1, R2	; [Or]Comparing in the left branch 
	BEQ End_Or_Id_5	; [Or] checking if the first element is false
; --------StartBinaryOp--------[410, 36]-----
	LOAD 2(LB), R3	; loading determinant into memory
	PUSH R2
	LOAD #0, R2	; loading 0 into memory
	FLOAT R2, R2	; Doing an unary minus
	CMP R2, R3	; Comparing registers for Equals operation 
	SEQ R3	; Placing Equals result into the register  
	POP R2
; --------EndBinaryOp--------[410, 36]-----
	CMP #0, R3	; [Or]Comparing in the right branch 
	BEQ End_Or_Id_5	; [OR] checking if the second element is true 
	LOAD #1, R2	; Or is true , We place the value 1 in the return Register
End_Or_Id_5:
; --------EndOr--------[410, 12]-----
; ---------Startif-----------[410, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else25
; --------BeginMethodCall--------[411, 12]-----
	ADDSP #3
	LOAD -2(LB), R2
	STORE R2, 0(SP)
; --------BeginSelection--------[411, 34]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[411, 34]-----
	STORE R2, -1(SP)
; --------BeginSelection--------[411, 46]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R2), R2	; Loading the field size2D into a register 
; --------BeginSelection--------[411, 46]-----
	STORE R2, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 14(R2)
	LOAD R0, R2
	SUBSP #3
; --------EndMethodCall--------[411, 12]-----
	BRA end_ifthenelse_25
else25:
; --------BeginAssignOp--------[413, 12]-----
; --------BeginMethodCall--------[413, 16]-----
	ADDSP #2
	LOAD -2(LB), R3
	STORE R3, 0(SP)
	LOAD -3(LB), R3	; loading mat into memory
	STORE R3, -1(SP)
	LOAD 0(SP), R3
	CMP #null, R3	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R3), R3
	BSR 11(R3)
	LOAD R0, R3
	SUBSP #2
; --------EndMethodCall--------[413, 16]-----
	STORE R3, 1(LB)	;  Assiging a value to res
	LOAD R3, R2	;  Return value of the assignement of =resand storing it into R2
; --------EndAssignOp--------[413, 12]-----
end_ifthenelse_25:
; ---------Endif-----------
	LOAD 1(LB), R2	; loading res into memory
	LOAD R2, R0
	BRA fin.MatrixTraitement.inversionInt
	WSTR "Error: La méthode code.MatrixTraitement.inversionInt doit retourner un element"
	WNL
	ERROR
fin.MatrixTraitement.inversionInt:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : inversionFloat with label =  code.MatrixTraitement.inversionFloat--------
code.MatrixTraitement.inversionFloat:
	TSTO #8
	BOV stack_overflow_error
	ADDSP #3
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------StartNew--------[423, 24]-----
; [New][loadItemintoRegister] loading new of calss =  Det into memory at register R2
	NEW #1, R2
	BOV heap_overflow_error
	LEA 28(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.Det
	POP R2
; --------EndNew--------[423, 24]-----
	STORE R2, 3(LB)	; Initializing the variable matrixDet and loading it into memory
; --------BeginAssignOp--------[424, 8]-----
; --------BeginMethodCall--------[424, 22]-----
	ADDSP #2
	LOAD 3(LB), R3	; loading matrixDet into memory
	STORE R3, 0(SP)
	LOAD -3(LB), R3	; loading mat into memory
	STORE R3, -1(SP)
	LOAD 0(SP), R3
	CMP #null, R3	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R3), R3
	BSR 21(R3)
	LOAD R0, R3
	SUBSP #2
; --------EndMethodCall--------[424, 22]-----
	STORE R3, 2(LB)	;  Assiging a value to determinant
	LOAD R3, R2	;  Return value of the assignement of =determinantand storing it into R2
; --------EndAssignOp--------[424, 8]-----
; --------StartOr--------[426, 12]-----
; --------StartBinaryOp--------[426, 12]-----
; --------BeginSelection--------[426, 12]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[426, 12]-----
; --------BeginSelection--------[426, 24]-----
	LOAD -3(LB), R3	; loading mat into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[426, 24]-----
	CMP R3, R2	; Comparing registers for NotEquals operation 
	SNE R2	; Placing NotEquals result into the register  
; --------EndBinaryOp--------[426, 12]-----
	CMP #1, R2	; [Or]Comparing in the left branch 
	BEQ End_Or_Id_6	; [Or] checking if the first element is false
; --------StartBinaryOp--------[426, 36]-----
	LOAD 2(LB), R3	; loading determinant into memory
	PUSH R2
	LOAD #0, R2	; loading 0 into memory
	FLOAT R2, R2	; Doing an unary minus
	CMP R2, R3	; Comparing registers for Equals operation 
	SEQ R3	; Placing Equals result into the register  
	POP R2
; --------EndBinaryOp--------[426, 36]-----
	CMP #0, R3	; [Or]Comparing in the right branch 
	BEQ End_Or_Id_6	; [OR] checking if the second element is true 
	LOAD #1, R2	; Or is true , We place the value 1 in the return Register
End_Or_Id_6:
; --------EndOr--------[426, 12]-----
; ---------Startif-----------[426, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else26
; --------BeginMethodCall--------[427, 12]-----
	ADDSP #3
	LOAD -2(LB), R2
	STORE R2, 0(SP)
; --------BeginSelection--------[427, 34]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[427, 34]-----
	STORE R2, -1(SP)
; --------BeginSelection--------[427, 46]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R2), R2	; Loading the field size2D into a register 
; --------BeginSelection--------[427, 46]-----
	STORE R2, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 14(R2)
	LOAD R0, R2
	SUBSP #3
; --------EndMethodCall--------[427, 12]-----
	BRA end_ifthenelse_26
else26:
; --------BeginAssignOp--------[429, 12]-----
; --------BeginMethodCall--------[429, 16]-----
	ADDSP #2
	LOAD -2(LB), R3
	STORE R3, 0(SP)
	LOAD -3(LB), R3	; loading mat into memory
	STORE R3, -1(SP)
	LOAD 0(SP), R3
	CMP #null, R3	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R3), R3
	BSR 10(R3)
	LOAD R0, R3
	SUBSP #2
; --------EndMethodCall--------[429, 16]-----
	STORE R3, 1(LB)	;  Assiging a value to res
	LOAD R3, R2	;  Return value of the assignement of =resand storing it into R2
; --------EndAssignOp--------[429, 12]-----
end_ifthenelse_26:
; ---------Endif-----------
	LOAD 1(LB), R2	; loading res into memory
	LOAD R2, R0
	BRA fin.MatrixTraitement.inversionFloat
	WSTR "Error: La méthode code.MatrixTraitement.inversionFloat doit retourner un element"
	WNL
	ERROR
fin.MatrixTraitement.inversionFloat:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : dimensionIncompatible with label =  code.MatrixTraitement.dimensionIncompatible--------
code.MatrixTraitement.dimensionIncompatible:
	TSTO #3
	BOV stack_overflow_error
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	WSTR " dimension incompatible "
	LOAD -3(LB), R2	; loading a into memory
	LOAD R2, R1
	WINT
	WSTR "!="
	LOAD -4(LB), R3	; loading b into memory
	LOAD R3, R1
	WINT
	WNL
	WSTR "Erreur de dimension"
	WNL
; --------BeginMethodCall--------[439, 8]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 15(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[439, 8]-----
fin.MatrixTraitement.dimensionIncompatible:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : throwError with label =  code.MatrixTraitement.throwError--------
code.MatrixTraitement.throwError:
;  ---------ClassBodyAsmCodeGeneration------
ERROR 
fin.MatrixTraitement.throwError:
	RTS
; -------------------------------------
;        Method equal
; -------------------------------------
; ------------------Start generateCodeForObjectEquals location:
code.Object.equals:
	LOAD -2(LB), R0
	CMP -3(LB), R0
	SEQ R0	; Comparaison this et paramètre d'equals
fin.Object.equals:
	RTS
init.Object:
	RTS
; -------------------------------------
;        Liste Erreur
; -------------------------------------
div0_error:
	WSTR "Error: div0_error"
	WNL
	ERROR
deref_null_error:
	WSTR "Error: deref_null_error"
	WNL
	ERROR
table_dimension_are_not_respected:
	WSTR "Error: table_dimension_are_not_respected"
	WNL
	ERROR
overflow_error:
	WSTR "Error: overflow_error"
	WNL
	ERROR
int_selection_table_must_be_positive:
	WSTR "Error: int_selection_table_must_be_positive"
	WNL
	ERROR
heap_overflow_error:
	WSTR "Error: heap_overflow_error"
	WNL
	ERROR
stack_overflow_error:
	WSTR "Error: stack_overflow_error"
	WNL
	ERROR
int_allocation_table_must_be_strictly_positive:
	WSTR "Error: int_allocation_table_must_be_strictly_positive"
	WNL
	ERROR
; end main program
