DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:37) - verify program: start
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:30) - verify Main: start
On est dans ListDeclVar.java
On est dans Identifier.java
On est dans Initialization.java
On est dans AbstractExpr.java
On est dans IntLiteral.java
On est dans Identifier.java
On est dans Initialization.java
On est dans AbstractExpr.java
On est dans FloatLiteral.java
On est dans Identifier.java
On est dans Initialization.java
On est dans AbstractExpr.java
On est dans BooleanLiteral.java
On est dans ListInst.java
On est dans AbstractExpr.java
On est dans Assign.java
boo
On est dans AbstractExpr.java
On est dans BooleanLiteral.java
On est dans While.java
On est dans AbstractOpCmp.java
On est dans IntLiteral.java
a
int
int
FIN ARTH
On est dans ListInst.java
b
On est dans AbstractExpr.java
On est dans Assign.java
boo
On est dans AbstractExpr.java
On est dans BooleanLiteral.java
On est dans AbstractExpr.java
On est dans Assign.java
a
On est dans AbstractExpr.java
On est dans AbstractOpArith.java
On est dans IntLiteral.java
a
On est dans AbstractExpr.java
On est dans Assign.java
a
On est dans AbstractExpr.java
On est dans AbstractOpArith.java
On est dans IntLiteral.java
a
On est dans While.java
On est dans AbstractOpCmp.java
On est dans IntLiteral.java
a
int
int
FIN ARTH
On est dans ListInst.java
On est dans AbstractExpr.java
On est dans Assign.java
a
On est dans AbstractExpr.java
On est dans AbstractOpArith.java
On est dans IntLiteral.java
a
On est dans While.java
On est dans AbstractOpBool.java
On est dans BooleanLiteral.java
On est dans BooleanLiteral.java
boolean
boolean
true
true
On est dans ListInst.java
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:39) - verify Main: end
`> [10, 0] Program
   +> ListDeclClass [List with 0 elements]
   `> [10, 0] Main
      +> [13, 16] ListDeclVar [List with 3 elements]
      |  []> [11, 12] DeclVar
      |  ||  +> [11, 8] Identifier (int)
      |  ||  |  definition: type (builtin), type=int
      |  ||  +> [11, 12] Identifier (a)
      |  ||  |  definition: variable defined at [11, 12], type=int
      |  ||  `> [11, 14] Initialization
      |  ||     `> [11, 14] Int (0)
      |  ||        type: int
      |  []> [12, 14] DeclVar
      |  ||  +> [12, 8] Identifier (float)
      |  ||  |  definition: type (builtin), type=float
      |  ||  +> [12, 14] Identifier (b)
      |  ||  |  definition: variable defined at [12, 14], type=float
      |  ||  `> [12, 17] Initialization
      |  ||     `> [12, 17] Float (7.7)
      |  ||        type: float
      |  []> [13, 16] DeclVar
      |      +> [13, 8] Identifier (boolean)
      |      |  definition: type (builtin), type=boolean
      |      +> [13, 16] Identifier (boo)
      |      |  definition: variable defined at [13, 16], type=boolean
      |      `> [13, 20] Initialization
      |         `> [13, 20] BooleanLiteral (true)
      |            type: boolean
      `> ListInst [List with 2 elements]
         []> [14, 8] Assign
         ||  type: boolean
         ||  +> [14, 8] Identifier (boo)
         ||  |  definition: variable defined at [13, 16], type=boolean
         ||  `> [14, 12] BooleanLiteral (true)
         ||     type: boolean
         []> [15, 15] While
             +> [15, 15] Lower
             |  type: boolean
             |  +> [15, 15] Identifier (a)
             |  |  definition: variable defined at [11, 12], type=int
             |  `> [15, 17] Int (100)
             |     type: int
             `> ListInst [List with 6 elements]
                []> [16, 22] Print
                ||  `> ListExpr [List with 1 elements]
                ||     []> [16, 22] Identifier (b)
                ||         definition: variable defined at [12, 14], type=float
                []> [17, 16] Assign
                ||  type: boolean
                ||  +> [17, 16] Identifier (boo)
                ||  |  definition: variable defined at [13, 16], type=boolean
                ||  `> [17, 22] BooleanLiteral (false)
                ||     type: boolean
                []> [18, 16] Assign
                ||  type: int
                ||  +> [18, 16] Identifier (a)
                ||  |  definition: variable defined at [11, 12], type=int
                ||  `> [18, 18] Plus
                ||     type: int
                ||     +> [18, 18] Identifier (a)
                ||     |  definition: variable defined at [11, 12], type=int
                ||     `> [18, 20] Int (78)
                ||        type: int
                []> [19, 16] Assign
                ||  type: int
                ||  +> [19, 16] Identifier (a)
                ||  |  definition: variable defined at [11, 12], type=int
                ||  `> [19, 20] Multiply
                ||     type: int
                ||     +> [19, 20] Identifier (a)
                ||     |  definition: variable defined at [11, 12], type=int
                ||     `> [19, 22] Int (1)
                ||        type: int
                []> [20, 23] While
                ||  +> [20, 23] Lower
                ||  |  type: boolean
                ||  |  +> [20, 23] Identifier (a)
                ||  |  |  definition: variable defined at [11, 12], type=int
                ||  |  `> [20, 25] Int (6)
                ||  |     type: int
                ||  `> ListInst [List with 1 elements]
                ||     []> [21, 24] Assign
                ||         type: int
                ||         +> [21, 24] Identifier (a)
                ||         |  definition: variable defined at [11, 12], type=int
                ||         `> [21, 28] Minus
                ||            type: int
                ||            +> [21, 28] Identifier (a)
                ||            |  definition: variable defined at [11, 12], type=int
                ||            `> [21, 30] Int (6)
                ||               type: int
                []> [23, 23] While
                    +> [23, 23] Or
                    |  type: boolean
                    |  +> [23, 23] BooleanLiteral (true)
                    |  |  type: boolean
                    |  `> [23, 29] BooleanLiteral (false)
                    |     type: boolean
                    `> ListInst [List with 0 elements]
