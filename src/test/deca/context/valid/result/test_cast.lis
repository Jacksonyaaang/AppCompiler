DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:38) - [MethodDefinition][setLabel] Initialising label value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with code.Object.equals
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:46) - verify program: start
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:48) - Register unit management unit is null
DEBUG fr.ensimag.deca.DecacCompiler.saveMainProgramState(DecacCompiler.java:128) - [DecacCompiler][saveMainProgramState] Saving state main program
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:36) - [ListDeclClass][verifyListClass] verify listClass pass 1: START
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:40) - [ListDeclClass][verifyListClass] verify listClass pass 1: END
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassMembers(ListDeclClass.java:48) - [ListDeclClass][verifyListClassMembers] verify listClass pass 2: START
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyListDeclField(ListDeclField.java:54) - [ListDeclField][verifyListDeclField]
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:91) - [DeclField][verifyDecleField] Verify a Field declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:32) - [ListDeclMethod][verifyListDeclMethod]
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassMembers(ListDeclClass.java:52) - [ListDeclClass][verifyListClassMembers] verify listClass pass 2: END
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassBody(ListDeclClass.java:59) - [ListDeclClass][verifyListClassBody] verify listClass pass 3: START
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyInitFields(ListDeclField.java:62) - [ListDeclField][verifyInitListDeclField]
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethodBody(ListDeclMethod.java:41) - [ListDeclMethod][verifyListDeclMethod]
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassBody(ListDeclClass.java:63) - [ListDeclClass][verifyListClassBody] verify listClass pass 3: END
DEBUG fr.ensimag.deca.DecacCompiler.setMainProgramState(DecacCompiler.java:115) - [DecacCompiler][setMainProgramState] Seeting main state program
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:38) - verify Main: start
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [19, 8]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.New.verifyExpr(New.java:51) - [New][verifyExpr] returned type for new is  = A
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = A expected type is A
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving a into 1(GB)
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [20, 8]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.New.verifyExpr(New.java:51) - [New][verifyExpr] returned type for new is  = A
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = A expected type is A
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving b into 2(GB)
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving i into 3(GB)
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving j into 4(GB)
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [22, 12]
DEBUG fr.ensimag.deca.tree.FloatLiteral.verifyExpr(FloatLiteral.java:45) - [FloatLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = float expected type is float
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = float expected type is float
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving f into 5(GB)
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [23, 6]
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:99) - [Selection][verifyExpr] Class type is  A
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [24, 8]
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:99) - [Selection][verifyExpr] Class type is  A
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [25, 8]
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [26, 10]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = A expected type is A
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:99) - [Selection][verifyExpr] Class type is  A
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [28, 12]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [30, 12]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [32, 14]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = float expected type is float
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = float expected type is float
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:42) - verify Main: end
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:60) - verify program: end
`> [13, 0] Program
   +> [13, 0] ListDeclClass [List with 1 elements]
   |  []> [13, 0] DeclClass
   |      +> [13, 6] Identifier (A)
   |      |  definition: type defined at [13, 0], type=A
   |      +> [builtin] Identifier (Object)
   |      |  definition: type (builtin), type=Object
   |      +> ListDeclField [List with 1 elements]
   |      |  []> [14, 8]  [visibility=PUBLIC]  DeclField
   |      |      +> [14, 4] Identifier (int)
   |      |      |  definition: type (builtin), type=int
   |      |      +> [14, 8] Identifier (i)
   |      |      |  definition: field defined at [14, 8], type=int
   |      |      `> NoInitialization
   |      `> ListDeclMethod [List with 0 elements]
   `> [18, 0] Main
      +> ListDeclVar [List with 5 elements]
      |  []> [19, 6] DeclVar
      |  ||  +> [19, 4] Identifier (A)
      |  ||  |  definition: type defined at [13, 0], type=A
      |  ||  +> [19, 6] Identifier (a)
      |  ||  |  definition: variable defined at [19, 6], type=A
      |  ||  `> [19, 8] Initialization
      |  ||     `> [19, 8] New
      |  ||        type: A
      |  ||        `> [19, 12] Identifier (A)
      |  ||           definition: type defined at [13, 0], type=A
      |  []> [20, 6] DeclVar
      |  ||  +> [20, 4] Identifier (A)
      |  ||  |  definition: type defined at [13, 0], type=A
      |  ||  +> [20, 6] Identifier (b)
      |  ||  |  definition: variable defined at [20, 6], type=A
      |  ||  `> [20, 8] Initialization
      |  ||     `> [20, 8] New
      |  ||        type: A
      |  ||        `> [20, 12] Identifier (A)
      |  ||           definition: type defined at [13, 0], type=A
      |  []> [21, 8] DeclVar
      |  ||  +> [21, 4] Identifier (int)
      |  ||  |  definition: type (builtin), type=int
      |  ||  +> [21, 8] Identifier (i)
      |  ||  |  definition: variable defined at [21, 8], type=int
      |  ||  `> NoInitialization
      |  []> [21, 10] DeclVar
      |  ||  +> [21, 4] Identifier (int)
      |  ||  |  definition: type (builtin), type=int
      |  ||  +> [21, 10] Identifier (j)
      |  ||  |  definition: variable defined at [21, 10], type=int
      |  ||  `> NoInitialization
      |  []> [22, 10] DeclVar
      |      +> [22, 4] Identifier (float)
      |      |  definition: type (builtin), type=float
      |      +> [22, 10] Identifier (f)
      |      |  definition: variable defined at [22, 10], type=float
      |      `> [22, 12] Initialization
      |         `> [22, 12] Float (3.5)
      |            type: float
      `> ListInst [List with 11 elements]
         []> [23, 4] Assign
         ||  type: int
         ||  +> [23, 4] Identifier (i)
         ||  |  definition: variable defined at [21, 8], type=int
         ||  `> [23, 6] Int (1)
         ||     type: int
         []> [24, 4] Assign
         ||  type: int
         ||  +> [24, 4] Selection
         ||  |  type: int
         ||  |  +> [24, 4] Identifier (a)
         ||  |  |  definition: variable defined at [19, 6], type=A
         ||  |  `> [24, 6] Identifier (i)
         ||  |     definition: field defined at [14, 8], type=int
         ||  `> [24, 8] Int (1)
         ||     type: int
         []> [25, 4] Assign
         ||  type: int
         ||  +> [25, 4] Selection
         ||  |  type: int
         ||  |  +> [25, 4] Identifier (b)
         ||  |  |  definition: variable defined at [20, 6], type=A
         ||  |  `> [25, 6] Identifier (i)
         ||  |     definition: field defined at [14, 8], type=int
         ||  `> [25, 8] Int (2)
         ||     type: int
         []> [26, 4] Assign
         ||  type: A
         ||  +> [26, 4] Identifier (a)
         ||  |  definition: variable defined at [19, 6], type=A
         ||  `> [26, 10] Cast
         ||     type: A
         ||     +> [26, 7] Identifier (A)
         ||     |  definition: type defined at [13, 0], type=A
         ||     `> [26, 11] Identifier (b)
         ||        definition: variable defined at [20, 6], type=A
         []> [27, 12] Println
         ||  `> ListExpr [List with 1 elements]
         ||     []> [27, 12] Selection
         ||         type: int
         ||         +> [27, 12] Identifier (a)
         ||         |  definition: variable defined at [19, 6], type=A
         ||         `> [27, 14] Identifier (i)
         ||            definition: field defined at [14, 8], type=int
         []> [28, 4] Assign
         ||  type: int
         ||  +> [28, 4] Identifier (j)
         ||  |  definition: variable defined at [21, 10], type=int
         ||  `> [28, 12] Cast
         ||     type: int
         ||     +> [28, 7] Identifier (int)
         ||     |  definition: type (builtin), type=int
         ||     `> [28, 13] Identifier (i)
         ||        definition: variable defined at [21, 8], type=int
         []> [29, 12] Println
         ||  `> ListExpr [List with 1 elements]
         ||     []> [29, 12] Identifier (j)
         ||         definition: variable defined at [21, 10], type=int
         []> [30, 4] Assign
         ||  type: int
         ||  +> [30, 4] Identifier (j)
         ||  |  definition: variable defined at [21, 10], type=int
         ||  `> [30, 12] Cast
         ||     type: int
         ||     +> [30, 7] Identifier (int)
         ||     |  definition: type (builtin), type=int
         ||     `> [30, 13] Identifier (f)
         ||        definition: variable defined at [22, 10], type=float
         []> [31, 12] Println
         ||  `> ListExpr [List with 1 elements]
         ||     []> [31, 12] Identifier (j)
         ||         definition: variable defined at [21, 10], type=int
         []> [32, 4] Assign
         ||  type: float
         ||  +> [32, 4] Identifier (f)
         ||  |  definition: variable defined at [22, 10], type=float
         ||  `> [32, 14] Cast
         ||     type: float
         ||     +> [32, 7] Identifier (float)
         ||     |  definition: type (builtin), type=float
         ||     `> [32, 15] Identifier (i)
         ||        definition: variable defined at [21, 8], type=int
         []> [33, 12] Println
             `> ListExpr [List with 1 elements]
                []> [33, 12] Identifier (f)
                    definition: variable defined at [22, 10], type=float
