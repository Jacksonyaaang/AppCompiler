DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:38) - [MethodDefinition][setLabel] Initialising label value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with code.Object.equals
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:46) - verify program: start
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:48) - Register unit management unit is null
DEBUG fr.ensimag.deca.DecacCompiler.saveMainProgramState(DecacCompiler.java:128) - [DecacCompiler][saveMainProgramState] Saving state main program
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:36) - [ListDeclClass][verifyListClass] verify listClass pass 1: START
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:40) - [ListDeclClass][verifyListClass] verify listClass pass 1: END
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassMembers(ListDeclClass.java:48) - [ListDeclClass][verifyListClassMembers] verify listClass pass 2: START
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyListDeclField(ListDeclField.java:54) - [ListDeclField][verifyListDeclField]
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:91) - [DeclField][verifyDecleField] Verify a Field declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:32) - [ListDeclMethod][verifyListDeclMethod]
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : init
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  init
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:136) - [DeclMethod][verifyDecleMethod] Method = init does not exists, adding a new one to the local env with index 2
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : setX
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  setX
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : x
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter x into -3(LB)
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:136) - [DeclMethod][verifyDecleMethod] Method = setX does not exists, adding a new one to the local env with index 3
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : getX
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  getX
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:136) - [DeclMethod][verifyDecleMethod] Method = getX does not exists, adding a new one to the local env with index 4
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : displayX
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  displayX
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:136) - [DeclMethod][verifyDecleMethod] Method = displayX does not exists, adding a new one to the local env with index 5
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyListDeclField(ListDeclField.java:54) - [ListDeclField][verifyListDeclField]
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:32) - [ListDeclMethod][verifyListDeclMethod]
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : setX
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  setX
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : x
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter x into -3(LB)
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:148) - [DeclMethod][verifyDecleMethod] Method = setX exists in the localenv, checking if it is a method that belongs to the current class
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:154) - [DeclMethod][verifyDecleMethod] Method = setX exists in the parent class,checking if our method matchs the one that is in the parent
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:167) - [DeclMethod][verifyDecleMethod] Method = setX exists in the parent class,and it was redefined exactly the way it was in the parent method, we used the index the index =3
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : getX
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  getX
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:148) - [DeclMethod][verifyDecleMethod] Method = getX exists in the localenv, checking if it is a method that belongs to the current class
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:154) - [DeclMethod][verifyDecleMethod] Method = getX exists in the parent class,checking if our method matchs the one that is in the parent
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:167) - [DeclMethod][verifyDecleMethod] Method = getX exists in the parent class,and it was redefined exactly the way it was in the parent method, we used the index the index =4
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : displayX
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  displayX
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:148) - [DeclMethod][verifyDecleMethod] Method = displayX exists in the localenv, checking if it is a method that belongs to the current class
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:154) - [DeclMethod][verifyDecleMethod] Method = displayX exists in the parent class,checking if our method matchs the one that is in the parent
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:167) - [DeclMethod][verifyDecleMethod] Method = displayX exists in the parent class,and it was redefined exactly the way it was in the parent method, we used the index the index =5
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyListDeclField(ListDeclField.java:54) - [ListDeclField][verifyListDeclField]
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:32) - [ListDeclMethod][verifyListDeclMethod]
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : setX
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  setX
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : x
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter x into -3(LB)
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:148) - [DeclMethod][verifyDecleMethod] Method = setX exists in the localenv, checking if it is a method that belongs to the current class
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:154) - [DeclMethod][verifyDecleMethod] Method = setX exists in the parent class,checking if our method matchs the one that is in the parent
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:167) - [DeclMethod][verifyDecleMethod] Method = setX exists in the parent class,and it was redefined exactly the way it was in the parent method, we used the index the index =3
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : getX
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  getX
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:148) - [DeclMethod][verifyDecleMethod] Method = getX exists in the localenv, checking if it is a method that belongs to the current class
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:154) - [DeclMethod][verifyDecleMethod] Method = getX exists in the parent class,checking if our method matchs the one that is in the parent
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:167) - [DeclMethod][verifyDecleMethod] Method = getX exists in the parent class,and it was redefined exactly the way it was in the parent method, we used the index the index =4
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : displayX
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  displayX
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:148) - [DeclMethod][verifyDecleMethod] Method = displayX exists in the localenv, checking if it is a method that belongs to the current class
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:154) - [DeclMethod][verifyDecleMethod] Method = displayX exists in the parent class,checking if our method matchs the one that is in the parent
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:167) - [DeclMethod][verifyDecleMethod] Method = displayX exists in the parent class,and it was redefined exactly the way it was in the parent method, we used the index the index =5
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassMembers(ListDeclClass.java:52) - [ListDeclClass][verifyListClassMembers] verify listClass pass 2: END
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassBody(ListDeclClass.java:59) - [ListDeclClass][verifyListClassBody] verify listClass pass 3: START
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyInitFields(ListDeclField.java:62) - [ListDeclField][verifyInitListDeclField]
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethodBody(ListDeclMethod.java:41) - [ListDeclMethod][verifyListDeclMethod]
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [12, 12]
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.This.verifyExpr(This.java:54) - [This][verifyExpr]
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:99) - [Selection][verifyExpr] Class type is  A
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [15, 17]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.Return.verifyInst(Return.java:39) - [Return][verifyInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [18, 15]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyInitFields(ListDeclField.java:62) - [ListDeclField][verifyInitListDeclField]
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethodBody(ListDeclMethod.java:41) - [ListDeclMethod][verifyListDeclMethod]
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.This.verifyExpr(This.java:54) - [This][verifyExpr]
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:99) - [Selection][verifyExpr] Class type is  B
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [27, 17]
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.Return.verifyInst(Return.java:39) - [Return][verifyInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [30, 15]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyInitFields(ListDeclField.java:62) - [ListDeclField][verifyInitListDeclField]
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethodBody(ListDeclMethod.java:41) - [ListDeclMethod][verifyListDeclMethod]
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.This.verifyExpr(This.java:54) - [This][verifyExpr]
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:99) - [Selection][verifyExpr] Class type is  C
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [39, 17]
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.Return.verifyInst(Return.java:39) - [Return][verifyInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [42, 15]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassBody(ListDeclClass.java:63) - [ListDeclClass][verifyListClassBody] verify listClass pass 3: END
DEBUG fr.ensimag.deca.DecacCompiler.setMainProgramState(DecacCompiler.java:115) - [DecacCompiler][setMainProgramState] Seeting main state program
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:38) - verify Main: start
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [51, 6]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.New.verifyExpr(New.java:51) - [New][verifyExpr] returned type for new is  = A
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = A expected type is A
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving a into 1(GB)
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [52, 6]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.New.verifyExpr(New.java:51) - [New][verifyExpr] returned type for new is  = B
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = B expected type is B
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving b into 2(GB)
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [53, 6]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.New.verifyExpr(New.java:51) - [New][verifyExpr] returned type for new is  = C
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = C expected type is C
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving c into 3(GB)
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:42) - verify Main: end
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:60) - verify program: end
`> [9, 0] Program
   +> [37, 0] ListDeclClass [List with 3 elements]
   |  []> [9, 0] DeclClass
   |  ||  +> [9, 6] Identifier (A)
   |  ||  |  definition: type defined at [9, 0], type=A
   |  ||  +> [builtin] Identifier (Object)
   |  ||  |  definition: type (builtin), type=Object
   |  ||  +> ListDeclField [List with 1 elements]
   |  ||  |  []> [10, 18]  [visibility=PROTECTED]  DeclField
   |  ||  |      +> [10, 14] Identifier (int)
   |  ||  |      |  definition: type (builtin), type=int
   |  ||  |      +> [10, 18] Identifier (x)
   |  ||  |      |  definition: field defined at [10, 18], type=int
   |  ||  |      `> NoInitialization
   |  ||  `> ListDeclMethod [List with 4 elements]
   |  ||     []> [11, 4] DeclMethod
   |  ||     ||  +> [11, 4] Identifier (void)
   |  ||     ||  |  definition: type (builtin), type=void
   |  ||     ||  +> [11, 9] Identifier (init)
   |  ||     ||  |  definition: method defined at [11, 4], type=void
   |  ||     ||  +> ListDeclParam [List with 0 elements]
   |  ||     ||  `> [11, 16] MethodBody
   |  ||     ||     +> ListDeclVar [List with 0 elements]
   |  ||     ||     `> ListInst [List with 1 elements]
   |  ||     ||        []> [12, 8] Assign
   |  ||     ||            type: int
   |  ||     ||            +> [12, 8] Identifier (x)
   |  ||     ||            |  definition: field defined at [10, 18], type=int
   |  ||     ||            `> [12, 12] Int (0)
   |  ||     ||               type: int
   |  ||     []> [14, 4] DeclMethod
   |  ||     ||  +> [14, 4] Identifier (void)
   |  ||     ||  |  definition: type (builtin), type=void
   |  ||     ||  +> [14, 9] Identifier (setX)
   |  ||     ||  |  definition: method defined at [14, 4], type=void
   |  ||     ||  +> [14, 14] ListDeclParam [List with 1 elements]
   |  ||     ||  |  []> [14, 14] DeclParam
   |  ||     ||  |      +> [14, 14] Identifier (int)
   |  ||     ||  |      |  definition: type (builtin), type=int
   |  ||     ||  |      `> [14, 18] Identifier (x)
   |  ||     ||  |         definition: parameter defined at [14, 14], type=int
   |  ||     ||  `> [14, 21] MethodBody
   |  ||     ||     +> ListDeclVar [List with 0 elements]
   |  ||     ||     `> ListInst [List with 1 elements]
   |  ||     ||        []> [15, 8] Assign
   |  ||     ||            type: int
   |  ||     ||            +> [15, 8] Selection
   |  ||     ||            |  type: int
   |  ||     ||            |  +> [15, 8] This
   |  ||     ||            |  |  type: A
   |  ||     ||            |  `> [15, 13] Identifier (x)
   |  ||     ||            |     definition: field defined at [10, 18], type=int
   |  ||     ||            `> [15, 17] Identifier (x)
   |  ||     ||               definition: parameter defined at [14, 14], type=int
   |  ||     []> [17, 4] DeclMethod
   |  ||     ||  +> [17, 4] Identifier (int)
   |  ||     ||  |  definition: type (builtin), type=int
   |  ||     ||  +> [17, 8] Identifier (getX)
   |  ||     ||  |  definition: method defined at [17, 4], type=int
   |  ||     ||  +> ListDeclParam [List with 0 elements]
   |  ||     ||  `> [17, 15] MethodBody
   |  ||     ||     +> ListDeclVar [List with 0 elements]
   |  ||     ||     `> ListInst [List with 2 elements]
   |  ||     ||        []> [18, 15] Return
   |  ||     ||        ||  `> [18, 15] Identifier (x)
   |  ||     ||        ||     definition: field defined at [10, 18], type=int
   |  ||     ||        []> [18, 18] NoOperation
   |  ||     []> [21, 4] DeclMethod
   |  ||         +> [21, 4] Identifier (void)
   |  ||         |  definition: type (builtin), type=void
   |  ||         +> [21, 9] Identifier (displayX)
   |  ||         |  definition: method defined at [21, 4], type=void
   |  ||         +> ListDeclParam [List with 0 elements]
   |  ||         `> [21, 19] MethodBody
   |  ||            +> ListDeclVar [List with 0 elements]
   |  ||            `> ListInst [List with 1 elements]
   |  ||               []> [22, 16] Println
   |  ||                   `> ListExpr [List with 2 elements]
   |  ||                      []> [22, 16] StringLiteral (Le champs x de la classe A vaut:)
   |  ||                      ||  type: string
   |  ||                      []> [22, 51] Identifier (x)
   |  ||                          definition: field defined at [10, 18], type=int
   |  []> [25, 0] DeclClass
   |  ||  +> [25, 6] Identifier (B)
   |  ||  |  definition: type defined at [25, 0], type=B
   |  ||  +> [25, 16] Identifier (A)
   |  ||  |  definition: type defined at [9, 0], type=A
   |  ||  +> ListDeclField [List with 0 elements]
   |  ||  `> ListDeclMethod [List with 3 elements]
   |  ||     []> [26, 4] DeclMethod
   |  ||     ||  +> [26, 4] Identifier (void)
   |  ||     ||  |  definition: type (builtin), type=void
   |  ||     ||  +> [26, 9] Identifier (setX)
   |  ||     ||  |  definition: method defined at [26, 4], type=void
   |  ||     ||  +> [26, 14] ListDeclParam [List with 1 elements]
   |  ||     ||  |  []> [26, 14] DeclParam
   |  ||     ||  |      +> [26, 14] Identifier (int)
   |  ||     ||  |      |  definition: type (builtin), type=int
   |  ||     ||  |      `> [26, 18] Identifier (x)
   |  ||     ||  |         definition: parameter defined at [26, 14], type=int
   |  ||     ||  `> [26, 21] MethodBody
   |  ||     ||     +> ListDeclVar [List with 0 elements]
   |  ||     ||     `> ListInst [List with 1 elements]
   |  ||     ||        []> [27, 8] Assign
   |  ||     ||            type: int
   |  ||     ||            +> [27, 8] Selection
   |  ||     ||            |  type: int
   |  ||     ||            |  +> [27, 8] This
   |  ||     ||            |  |  type: B
   |  ||     ||            |  `> [27, 13] Identifier (x)
   |  ||     ||            |     definition: field defined at [10, 18], type=int
   |  ||     ||            `> [27, 17] Multiply
   |  ||     ||               type: int
   |  ||     ||               +> [27, 17] Int (2)
   |  ||     ||               |  type: int
   |  ||     ||               `> [27, 19] Identifier (x)
   |  ||     ||                  definition: parameter defined at [26, 14], type=int
   |  ||     []> [29, 4] DeclMethod
   |  ||     ||  +> [29, 4] Identifier (int)
   |  ||     ||  |  definition: type (builtin), type=int
   |  ||     ||  +> [29, 8] Identifier (getX)
   |  ||     ||  |  definition: method defined at [29, 4], type=int
   |  ||     ||  +> ListDeclParam [List with 0 elements]
   |  ||     ||  `> [29, 15] MethodBody
   |  ||     ||     +> ListDeclVar [List with 0 elements]
   |  ||     ||     `> ListInst [List with 2 elements]
   |  ||     ||        []> [30, 15] Return
   |  ||     ||        ||  `> [30, 15] Identifier (x)
   |  ||     ||        ||     definition: field defined at [10, 18], type=int
   |  ||     ||        []> [30, 18] NoOperation
   |  ||     []> [32, 4] DeclMethod
   |  ||         +> [32, 4] Identifier (void)
   |  ||         |  definition: type (builtin), type=void
   |  ||         +> [32, 9] Identifier (displayX)
   |  ||         |  definition: method defined at [32, 4], type=void
   |  ||         +> ListDeclParam [List with 0 elements]
   |  ||         `> [32, 19] MethodBody
   |  ||            +> ListDeclVar [List with 0 elements]
   |  ||            `> ListInst [List with 1 elements]
   |  ||               []> [33, 16] Println
   |  ||                   `> ListExpr [List with 2 elements]
   |  ||                      []> [33, 16] StringLiteral (Le champs x de la classe B vaut:)
   |  ||                      ||  type: string
   |  ||                      []> [33, 51] Identifier (x)
   |  ||                          definition: field defined at [10, 18], type=int
   |  []> [37, 0] DeclClass
   |      +> [37, 6] Identifier (C)
   |      |  definition: type defined at [37, 0], type=C
   |      +> [37, 16] Identifier (A)
   |      |  definition: type defined at [9, 0], type=A
   |      +> ListDeclField [List with 0 elements]
   |      `> ListDeclMethod [List with 3 elements]
   |         []> [38, 4] DeclMethod
   |         ||  +> [38, 4] Identifier (void)
   |         ||  |  definition: type (builtin), type=void
   |         ||  +> [38, 9] Identifier (setX)
   |         ||  |  definition: method defined at [38, 4], type=void
   |         ||  +> [38, 14] ListDeclParam [List with 1 elements]
   |         ||  |  []> [38, 14] DeclParam
   |         ||  |      +> [38, 14] Identifier (int)
   |         ||  |      |  definition: type (builtin), type=int
   |         ||  |      `> [38, 18] Identifier (x)
   |         ||  |         definition: parameter defined at [38, 14], type=int
   |         ||  `> [38, 21] MethodBody
   |         ||     +> ListDeclVar [List with 0 elements]
   |         ||     `> ListInst [List with 1 elements]
   |         ||        []> [39, 8] Assign
   |         ||            type: int
   |         ||            +> [39, 8] Selection
   |         ||            |  type: int
   |         ||            |  +> [39, 8] This
   |         ||            |  |  type: C
   |         ||            |  `> [39, 13] Identifier (x)
   |         ||            |     definition: field defined at [10, 18], type=int
   |         ||            `> [39, 17] Multiply
   |         ||               type: int
   |         ||               +> [39, 17] Int (3)
   |         ||               |  type: int
   |         ||               `> [39, 19] Identifier (x)
   |         ||                  definition: parameter defined at [38, 14], type=int
   |         []> [41, 4] DeclMethod
   |         ||  +> [41, 4] Identifier (int)
   |         ||  |  definition: type (builtin), type=int
   |         ||  +> [41, 8] Identifier (getX)
   |         ||  |  definition: method defined at [41, 4], type=int
   |         ||  +> ListDeclParam [List with 0 elements]
   |         ||  `> [41, 15] MethodBody
   |         ||     +> ListDeclVar [List with 0 elements]
   |         ||     `> ListInst [List with 2 elements]
   |         ||        []> [42, 15] Return
   |         ||        ||  `> [42, 15] Identifier (x)
   |         ||        ||     definition: field defined at [10, 18], type=int
   |         ||        []> [42, 18] NoOperation
   |         []> [44, 4] DeclMethod
   |             +> [44, 4] Identifier (void)
   |             |  definition: type (builtin), type=void
   |             +> [44, 9] Identifier (displayX)
   |             |  definition: method defined at [44, 4], type=void
   |             +> ListDeclParam [List with 0 elements]
   |             `> [44, 19] MethodBody
   |                +> ListDeclVar [List with 0 elements]
   |                `> ListInst [List with 1 elements]
   |                   []> [45, 16] Println
   |                       `> ListExpr [List with 2 elements]
   |                          []> [45, 16] StringLiteral (Le champs x de la classe C vaut:)
   |                          ||  type: string
   |                          []> [45, 51] Identifier (x)
   |                              definition: field defined at [10, 18], type=int
   `> [50, 0] Main
      +> ListDeclVar [List with 3 elements]
      |  []> [51, 2] DeclVar
      |  ||  +> [51, 0] Identifier (A)
      |  ||  |  definition: type defined at [9, 0], type=A
      |  ||  +> [51, 2] Identifier (a)
      |  ||  |  definition: variable defined at [51, 2], type=A
      |  ||  `> [51, 6] Initialization
      |  ||     `> [51, 6] New
      |  ||        type: A
      |  ||        `> [51, 10] Identifier (A)
      |  ||           definition: type defined at [9, 0], type=A
      |  []> [52, 2] DeclVar
      |  ||  +> [52, 0] Identifier (B)
      |  ||  |  definition: type defined at [25, 0], type=B
      |  ||  +> [52, 2] Identifier (b)
      |  ||  |  definition: variable defined at [52, 2], type=B
      |  ||  `> [52, 6] Initialization
      |  ||     `> [52, 6] New
      |  ||        type: B
      |  ||        `> [52, 10] Identifier (B)
      |  ||           definition: type defined at [25, 0], type=B
      |  []> [53, 2] DeclVar
      |      +> [53, 0] Identifier (C)
      |      |  definition: type defined at [37, 0], type=C
      |      +> [53, 2] Identifier (c)
      |      |  definition: variable defined at [53, 2], type=C
      |      `> [53, 6] Initialization
      |         `> [53, 6] New
      |            type: C
      |            `> [53, 10] Identifier (C)
      |               definition: type defined at [37, 0], type=C
      `> ListInst [List with 7 elements]
         []> [54, 0] MethodCall
         ||  type: void
         ||  +> [54, 0] Identifier (a)
         ||  |  definition: variable defined at [51, 2], type=A
         ||  +> [54, 2] Identifier (setX)
         ||  |  definition: method defined at [14, 4], type=void
         ||  `> ListExpr [List with 1 elements]
         ||     []> [54, 7] Int (5)
         ||         type: int
         []> [55, 0] MethodCall
         ||  type: void
         ||  +> [55, 0] Identifier (b)
         ||  |  definition: variable defined at [52, 2], type=B
         ||  +> [55, 2] Identifier (setX)
         ||  |  definition: method defined at [26, 4], type=void
         ||  `> ListExpr [List with 1 elements]
         ||     []> [55, 7] Int (5)
         ||         type: int
         []> [56, 0] MethodCall
         ||  type: void
         ||  +> [56, 0] Identifier (c)
         ||  |  definition: variable defined at [53, 2], type=C
         ||  +> [56, 2] Identifier (setX)
         ||  |  definition: method defined at [38, 4], type=void
         ||  `> ListExpr [List with 1 elements]
         ||     []> [56, 7] Int (5)
         ||         type: int
         []> [57, 6] Print
         ||  `> ListExpr [List with 3 elements]
         ||     []> [57, 6] MethodCall
         ||     ||  type: int
         ||     ||  +> [57, 6] Identifier (a)
         ||     ||  |  definition: variable defined at [51, 2], type=A
         ||     ||  +> [57, 8] Identifier (getX)
         ||     ||  |  definition: method defined at [17, 4], type=int
         ||     ||  `> ListExpr [List with 0 elements]
         ||     []> [57, 16] MethodCall
         ||     ||  type: int
         ||     ||  +> [57, 16] Identifier (b)
         ||     ||  |  definition: variable defined at [52, 2], type=B
         ||     ||  +> [57, 18] Identifier (getX)
         ||     ||  |  definition: method defined at [29, 4], type=int
         ||     ||  `> ListExpr [List with 0 elements]
         ||     []> [57, 26] MethodCall
         ||         type: int
         ||         +> [57, 26] Identifier (c)
         ||         |  definition: variable defined at [53, 2], type=C
         ||         +> [57, 28] Identifier (getX)
         ||         |  definition: method defined at [41, 4], type=int
         ||         `> ListExpr [List with 0 elements]
         []> [58, 0] MethodCall
         ||  type: void
         ||  +> [58, 0] Identifier (a)
         ||  |  definition: variable defined at [51, 2], type=A
         ||  +> [58, 2] Identifier (displayX)
         ||  |  definition: method defined at [21, 4], type=void
         ||  `> ListExpr [List with 0 elements]
         []> [59, 0] MethodCall
         ||  type: void
         ||  +> [59, 0] Identifier (b)
         ||  |  definition: variable defined at [52, 2], type=B
         ||  +> [59, 2] Identifier (displayX)
         ||  |  definition: method defined at [32, 4], type=void
         ||  `> ListExpr [List with 0 elements]
         []> [60, 0] MethodCall
             type: void
             +> [60, 0] Identifier (c)
             |  definition: variable defined at [53, 2], type=C
             +> [60, 2] Identifier (displayX)
             |  definition: method defined at [44, 4], type=void
             `> ListExpr [List with 0 elements]
