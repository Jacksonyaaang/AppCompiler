DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:38) - [MethodDefinition][setLabel] Initialising label value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with code.Object.equals
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:46) - verify program: start
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:48) - Register unit management unit is null
DEBUG fr.ensimag.deca.DecacCompiler.saveMainProgramState(DecacCompiler.java:128) - [DecacCompiler][saveMainProgramState] Saving state main program
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:36) - [ListDeclClass][verifyListClass] verify listClass pass 1: START
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:40) - [ListDeclClass][verifyListClass] verify listClass pass 1: END
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassMembers(ListDeclClass.java:48) - [ListDeclClass][verifyListClassMembers] verify listClass pass 2: START
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyListDeclField(ListDeclField.java:54) - [ListDeclField][verifyListDeclField]
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:91) - [DeclField][verifyDecleField] Verify a Field declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:91) - [DeclField][verifyDecleField] Verify a Field declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:32) - [ListDeclMethod][verifyListDeclMethod]
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : getX
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  getX
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:136) - [DeclMethod][verifyDecleMethod] Method = getX does not exists, adding a new one to the local env with index 2
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : setXZ
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  setXZ
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : x
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter x into -3(LB)
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : z
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter z into -4(LB)
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:136) - [DeclMethod][verifyDecleMethod] Method = setXZ does not exists, adding a new one to the local env with index 3
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : getZ
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  getZ
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:136) - [DeclMethod][verifyDecleMethod] Method = getZ does not exists, adding a new one to the local env with index 4
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassMembers(ListDeclClass.java:52) - [ListDeclClass][verifyListClassMembers] verify listClass pass 2: END
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassBody(ListDeclClass.java:59) - [ListDeclClass][verifyListClassBody] verify listClass pass 3: START
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyInitFields(ListDeclField.java:62) - [ListDeclField][verifyInitListDeclField]
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethodBody(ListDeclMethod.java:41) - [ListDeclMethod][verifyListDeclMethod]
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.Return.verifyInst(Return.java:39) - [Return][verifyInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [13, 15]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.This.verifyExpr(This.java:54) - [This][verifyExpr]
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:99) - [Selection][verifyExpr] Class type is  A
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [16, 17]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.This.verifyExpr(This.java:54) - [This][verifyExpr]
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:99) - [Selection][verifyExpr] Class type is  A
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [17, 17]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = float expected type is float
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = float expected type is float
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.Return.verifyInst(Return.java:39) - [Return][verifyInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [21, 15]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = float expected type is float
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = float expected type is float
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassBody(ListDeclClass.java:63) - [ListDeclClass][verifyListClassBody] verify listClass pass 3: END
DEBUG fr.ensimag.deca.DecacCompiler.setMainProgramState(DecacCompiler.java:115) - [DecacCompiler][setMainProgramState] Seeting main state program
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:38) - verify Main: start
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [26, 6]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.New.verifyExpr(New.java:51) - [New][verifyExpr] returned type for new is  = A
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = A expected type is A
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving a into 1(GB)
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [27, 8]
DEBUG fr.ensimag.deca.tree.ReadInt.verifyExpr(ReadInt.java:32) - [ReadInt][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving b into 2(GB)
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [28, 11]
DEBUG fr.ensimag.deca.tree.ReadFloat.verifyExpr(ReadFloat.java:33) - [ReadFloat][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = float expected type is float
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = float expected type is float
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving f into 3(GB)
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:42) - verify Main: end
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:60) - verify program: end
`> [9, 0] Program
   +> [9, 0] ListDeclClass [List with 1 elements]
   |  []> [9, 0] DeclClass
   |      +> [9, 6] Identifier (A)
   |      |  definition: type defined at [9, 0], type=A
   |      +> [builtin] Identifier (Object)
   |      |  definition: type (builtin), type=Object
   |      +> ListDeclField [List with 2 elements]
   |      |  []> [10, 18]  [visibility=PROTECTED]  DeclField
   |      |  ||  +> [10, 14] Identifier (int)
   |      |  ||  |  definition: type (builtin), type=int
   |      |  ||  +> [10, 18] Identifier (x)
   |      |  ||  |  definition: field defined at [10, 18], type=int
   |      |  ||  `> NoInitialization
   |      |  []> [11, 10]  [visibility=PUBLIC]  DeclField
   |      |      +> [11, 4] Identifier (float)
   |      |      |  definition: type (builtin), type=float
   |      |      +> [11, 10] Identifier (z)
   |      |      |  definition: field defined at [11, 10], type=float
   |      |      `> NoInitialization
   |      `> ListDeclMethod [List with 3 elements]
   |         []> [12, 4] DeclMethod
   |         ||  +> [12, 4] Identifier (int)
   |         ||  |  definition: type (builtin), type=int
   |         ||  +> [12, 8] Identifier (getX)
   |         ||  |  definition: method defined at [12, 4], type=int
   |         ||  +> ListDeclParam [List with 0 elements]
   |         ||  `> [12, 15] MethodBody
   |         ||     +> ListDeclVar [List with 0 elements]
   |         ||     `> ListInst [List with 1 elements]
   |         ||        []> [13, 15] Return
   |         ||            `> [13, 15] Identifier (x)
   |         ||               definition: field defined at [10, 18], type=int
   |         []> [15, 4] DeclMethod
   |         ||  +> [15, 4] Identifier (void)
   |         ||  |  definition: type (builtin), type=void
   |         ||  +> [15, 9] Identifier (setXZ)
   |         ||  |  definition: method defined at [15, 4], type=void
   |         ||  +> [15, 15] ListDeclParam [List with 2 elements]
   |         ||  |  []> [15, 15] DeclParam
   |         ||  |  ||  +> [15, 15] Identifier (int)
   |         ||  |  ||  |  definition: type (builtin), type=int
   |         ||  |  ||  `> [15, 19] Identifier (x)
   |         ||  |  ||     definition: parameter defined at [15, 15], type=int
   |         ||  |  []> [15, 22] DeclParam
   |         ||  |      +> [15, 22] Identifier (float)
   |         ||  |      |  definition: type (builtin), type=float
   |         ||  |      `> [15, 28] Identifier (z)
   |         ||  |         definition: parameter defined at [15, 22], type=float
   |         ||  `> [15, 31] MethodBody
   |         ||     +> ListDeclVar [List with 0 elements]
   |         ||     `> ListInst [List with 2 elements]
   |         ||        []> [16, 8] Assign
   |         ||        ||  type: int
   |         ||        ||  +> [16, 8] Selection
   |         ||        ||  |  type: int
   |         ||        ||  |  +> [16, 8] This
   |         ||        ||  |  |  type: A
   |         ||        ||  |  `> [16, 13] Identifier (x)
   |         ||        ||  |     definition: field defined at [10, 18], type=int
   |         ||        ||  `> [16, 17] Identifier (x)
   |         ||        ||     definition: parameter defined at [15, 15], type=int
   |         ||        []> [17, 8] Assign
   |         ||            type: float
   |         ||            +> [17, 8] Selection
   |         ||            |  type: float
   |         ||            |  +> [17, 8] This
   |         ||            |  |  type: A
   |         ||            |  `> [17, 13] Identifier (z)
   |         ||            |     definition: field defined at [11, 10], type=float
   |         ||            `> [17, 17] Identifier (z)
   |         ||               definition: parameter defined at [15, 22], type=float
   |         []> [20, 4] DeclMethod
   |             +> [20, 4] Identifier (float)
   |             |  definition: type (builtin), type=float
   |             +> [20, 10] Identifier (getZ)
   |             |  definition: method defined at [20, 4], type=float
   |             +> ListDeclParam [List with 0 elements]
   |             `> [20, 17] MethodBody
   |                +> ListDeclVar [List with 0 elements]
   |                `> ListInst [List with 1 elements]
   |                   []> [21, 15] Return
   |                       `> [21, 15] Identifier (z)
   |                          definition: field defined at [11, 10], type=float
   `> [25, 0] Main
      +> ListDeclVar [List with 3 elements]
      |  []> [26, 2] DeclVar
      |  ||  +> [26, 0] Identifier (A)
      |  ||  |  definition: type defined at [9, 0], type=A
      |  ||  +> [26, 2] Identifier (a)
      |  ||  |  definition: variable defined at [26, 2], type=A
      |  ||  `> [26, 6] Initialization
      |  ||     `> [26, 6] New
      |  ||        type: A
      |  ||        `> [26, 10] Identifier (A)
      |  ||           definition: type defined at [9, 0], type=A
      |  []> [27, 4] DeclVar
      |  ||  +> [27, 0] Identifier (int)
      |  ||  |  definition: type (builtin), type=int
      |  ||  +> [27, 4] Identifier (b)
      |  ||  |  definition: variable defined at [27, 4], type=int
      |  ||  `> [27, 8] Initialization
      |  ||     `> [27, 8] ReadInt
      |  ||        type: int
      |  []> [28, 7] DeclVar
      |      +> [28, 0] Identifier (float)
      |      |  definition: type (builtin), type=float
      |      +> [28, 7] Identifier (f)
      |      |  definition: variable defined at [28, 7], type=float
      |      `> [28, 11] Initialization
      |         `> [28, 11] ReadFloat
      |            type: float
      `> ListInst [List with 2 elements]
         []> [29, 0] MethodCall
         ||  type: void
         ||  +> [29, 0] Identifier (a)
         ||  |  definition: variable defined at [26, 2], type=A
         ||  +> [29, 2] Identifier (setXZ)
         ||  |  definition: method defined at [15, 4], type=void
         ||  `> ListExpr [List with 2 elements]
         ||     []> [29, 8] Identifier (b)
         ||     ||  definition: variable defined at [27, 4], type=int
         ||     []> [29, 11] Identifier (f)
         ||         definition: variable defined at [28, 7], type=float
         []> [30, 8] Println
             `> ListExpr [List with 2 elements]
                []> [30, 8] MethodCall
                ||  type: int
                ||  +> [30, 8] Identifier (a)
                ||  |  definition: variable defined at [26, 2], type=A
                ||  +> [30, 10] Identifier (getX)
                ||  |  definition: method defined at [12, 4], type=int
                ||  `> ListExpr [List with 0 elements]
                []> [30, 18] MethodCall
                    type: float
                    +> [30, 18] Identifier (a)
                    |  definition: variable defined at [26, 2], type=A
                    +> [30, 20] Identifier (getZ)
                    |  definition: method defined at [20, 4], type=float
                    `> ListExpr [List with 0 elements]
