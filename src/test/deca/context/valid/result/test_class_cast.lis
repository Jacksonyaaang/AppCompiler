DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:38) - [MethodDefinition][setLabel] Initialising label value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with code.Object.equals
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:46) - verify program: start
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:48) - Register unit management unit is null
DEBUG fr.ensimag.deca.DecacCompiler.saveMainProgramState(DecacCompiler.java:128) - [DecacCompiler][saveMainProgramState] Saving state main program
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:36) - [ListDeclClass][verifyListClass] verify listClass pass 1: START
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:40) - [ListDeclClass][verifyListClass] verify listClass pass 1: END
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassMembers(ListDeclClass.java:48) - [ListDeclClass][verifyListClassMembers] verify listClass pass 2: START
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyListDeclField(ListDeclField.java:54) - [ListDeclField][verifyListDeclField]
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:91) - [DeclField][verifyDecleField] Verify a Field declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:91) - [DeclField][verifyDecleField] Verify a Field declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:32) - [ListDeclMethod][verifyListDeclMethod]
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : init
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  init
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:136) - [DeclMethod][verifyDecleMethod] Method = init does not exists, adding a new one to the local env with index 2
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : setY
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  setY
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : y
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter y into -3(LB)
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:136) - [DeclMethod][verifyDecleMethod] Method = setY does not exists, adding a new one to the local env with index 3
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : setX
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  setX
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : x
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter x into -3(LB)
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:136) - [DeclMethod][verifyDecleMethod] Method = setX does not exists, adding a new one to the local env with index 4
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : getX
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  getX
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:136) - [DeclMethod][verifyDecleMethod] Method = getX does not exists, adding a new one to the local env with index 5
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : getY
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  getY
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:136) - [DeclMethod][verifyDecleMethod] Method = getY does not exists, adding a new one to the local env with index 6
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyListDeclField(ListDeclField.java:54) - [ListDeclField][verifyListDeclField]
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:91) - [DeclField][verifyDecleField] Verify a Field declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:32) - [ListDeclMethod][verifyListDeclMethod]
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : init
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  init
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:148) - [DeclMethod][verifyDecleMethod] Method = init exists in the localenv, checking if it is a method that belongs to the current class
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:154) - [DeclMethod][verifyDecleMethod] Method = init exists in the parent class,checking if our method matchs the one that is in the parent
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:167) - [DeclMethod][verifyDecleMethod] Method = init exists in the parent class,and it was redefined exactly the way it was in the parent method, we used the index the index =2
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : setZ
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  setZ
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : z
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter z into -3(LB)
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:136) - [DeclMethod][verifyDecleMethod] Method = setZ does not exists, adding a new one to the local env with index 7
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : getZ
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  getZ
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:136) - [DeclMethod][verifyDecleMethod] Method = getZ does not exists, adding a new one to the local env with index 8
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassMembers(ListDeclClass.java:52) - [ListDeclClass][verifyListClassMembers] verify listClass pass 2: END
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassBody(ListDeclClass.java:59) - [ListDeclClass][verifyListClassBody] verify listClass pass 3: START
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyInitFields(ListDeclField.java:62) - [ListDeclField][verifyInitListDeclField]
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethodBody(ListDeclMethod.java:41) - [ListDeclMethod][verifyListDeclMethod]
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [16, 12]
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [17, 12]
DEBUG fr.ensimag.deca.tree.FloatLiteral.verifyExpr(FloatLiteral.java:45) - [FloatLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = float expected type is float
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = float expected type is float
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.This.verifyExpr(This.java:54) - [This][verifyExpr]
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:99) - [Selection][verifyExpr] Class type is  A
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [20, 17]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = float expected type is float
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = float expected type is float
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.This.verifyExpr(This.java:54) - [This][verifyExpr]
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:99) - [Selection][verifyExpr] Class type is  A
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [24, 17]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.Return.verifyInst(Return.java:39) - [Return][verifyInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [28, 15]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.Return.verifyInst(Return.java:39) - [Return][verifyInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [32, 15]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = float expected type is float
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = float expected type is float
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyInitFields(ListDeclField.java:62) - [ListDeclField][verifyInitListDeclField]
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethodBody(ListDeclMethod.java:41) - [ListDeclMethod][verifyListDeclMethod]
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [40, 12]
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [41, 12]
DEBUG fr.ensimag.deca.tree.FloatLiteral.verifyExpr(FloatLiteral.java:45) - [FloatLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = float expected type is float
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = float expected type is float
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [42, 12]
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.This.verifyExpr(This.java:54) - [This][verifyExpr]
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:99) - [Selection][verifyExpr] Class type is  B
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [46, 17]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.Return.verifyInst(Return.java:39) - [Return][verifyInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [50, 15]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassBody(ListDeclClass.java:63) - [ListDeclClass][verifyListClassBody] verify listClass pass 3: END
DEBUG fr.ensimag.deca.DecacCompiler.setMainProgramState(DecacCompiler.java:115) - [DecacCompiler][setMainProgramState] Seeting main state program
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:38) - verify Main: start
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [55, 6]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.New.verifyExpr(New.java:51) - [New][verifyExpr] returned type for new is  = B
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = B expected type is B
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving b into 1(GB)
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.FloatLiteral.verifyExpr(FloatLiteral.java:45) - [FloatLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:42) - verify Main: end
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:60) - verify program: end
`> [11, 0] Program
   +> [36, 0] ListDeclClass [List with 2 elements]
   |  []> [11, 0] DeclClass
   |  ||  +> [11, 6] Identifier (A)
   |  ||  |  definition: type defined at [11, 0], type=A
   |  ||  +> [builtin] Identifier (Object)
   |  ||  |  definition: type (builtin), type=Object
   |  ||  +> ListDeclField [List with 2 elements]
   |  ||  |  []> [12, 8]  [visibility=PUBLIC]  DeclField
   |  ||  |  ||  +> [12, 4] Identifier (int)
   |  ||  |  ||  |  definition: type (builtin), type=int
   |  ||  |  ||  +> [12, 8] Identifier (x)
   |  ||  |  ||  |  definition: field defined at [12, 8], type=int
   |  ||  |  ||  `> NoInitialization
   |  ||  |  []> [13, 10]  [visibility=PUBLIC]  DeclField
   |  ||  |      +> [13, 4] Identifier (float)
   |  ||  |      |  definition: type (builtin), type=float
   |  ||  |      +> [13, 10] Identifier (y)
   |  ||  |      |  definition: field defined at [13, 10], type=float
   |  ||  |      `> NoInitialization
   |  ||  `> ListDeclMethod [List with 5 elements]
   |  ||     []> [15, 4] DeclMethod
   |  ||     ||  +> [15, 4] Identifier (void)
   |  ||     ||  |  definition: type (builtin), type=void
   |  ||     ||  +> [15, 9] Identifier (init)
   |  ||     ||  |  definition: method defined at [15, 4], type=void
   |  ||     ||  +> ListDeclParam [List with 0 elements]
   |  ||     ||  `> [15, 16] MethodBody
   |  ||     ||     +> ListDeclVar [List with 0 elements]
   |  ||     ||     `> ListInst [List with 2 elements]
   |  ||     ||        []> [16, 8] Assign
   |  ||     ||        ||  type: int
   |  ||     ||        ||  +> [16, 8] Identifier (x)
   |  ||     ||        ||  |  definition: field defined at [12, 8], type=int
   |  ||     ||        ||  `> [16, 12] Int (0)
   |  ||     ||        ||     type: int
   |  ||     ||        []> [17, 8] Assign
   |  ||     ||            type: float
   |  ||     ||            +> [17, 8] Identifier (y)
   |  ||     ||            |  definition: field defined at [13, 10], type=float
   |  ||     ||            `> [17, 12] Float (0.0)
   |  ||     ||               type: float
   |  ||     []> [19, 4] DeclMethod
   |  ||     ||  +> [19, 4] Identifier (void)
   |  ||     ||  |  definition: type (builtin), type=void
   |  ||     ||  +> [19, 9] Identifier (setY)
   |  ||     ||  |  definition: method defined at [19, 4], type=void
   |  ||     ||  +> [19, 14] ListDeclParam [List with 1 elements]
   |  ||     ||  |  []> [19, 14] DeclParam
   |  ||     ||  |      +> [19, 14] Identifier (float)
   |  ||     ||  |      |  definition: type (builtin), type=float
   |  ||     ||  |      `> [19, 20] Identifier (y)
   |  ||     ||  |         definition: parameter defined at [19, 14], type=float
   |  ||     ||  `> [19, 22] MethodBody
   |  ||     ||     +> ListDeclVar [List with 0 elements]
   |  ||     ||     `> ListInst [List with 1 elements]
   |  ||     ||        []> [20, 8] Assign
   |  ||     ||            type: float
   |  ||     ||            +> [20, 8] Selection
   |  ||     ||            |  type: float
   |  ||     ||            |  +> [20, 8] This
   |  ||     ||            |  |  type: A
   |  ||     ||            |  `> [20, 13] Identifier (y)
   |  ||     ||            |     definition: field defined at [13, 10], type=float
   |  ||     ||            `> [20, 17] Identifier (y)
   |  ||     ||               definition: parameter defined at [19, 14], type=float
   |  ||     []> [23, 4] DeclMethod
   |  ||     ||  +> [23, 4] Identifier (void)
   |  ||     ||  |  definition: type (builtin), type=void
   |  ||     ||  +> [23, 9] Identifier (setX)
   |  ||     ||  |  definition: method defined at [23, 4], type=void
   |  ||     ||  +> [23, 14] ListDeclParam [List with 1 elements]
   |  ||     ||  |  []> [23, 14] DeclParam
   |  ||     ||  |      +> [23, 14] Identifier (int)
   |  ||     ||  |      |  definition: type (builtin), type=int
   |  ||     ||  |      `> [23, 18] Identifier (x)
   |  ||     ||  |         definition: parameter defined at [23, 14], type=int
   |  ||     ||  `> [23, 20] MethodBody
   |  ||     ||     +> ListDeclVar [List with 0 elements]
   |  ||     ||     `> ListInst [List with 1 elements]
   |  ||     ||        []> [24, 8] Assign
   |  ||     ||            type: int
   |  ||     ||            +> [24, 8] Selection
   |  ||     ||            |  type: int
   |  ||     ||            |  +> [24, 8] This
   |  ||     ||            |  |  type: A
   |  ||     ||            |  `> [24, 13] Identifier (x)
   |  ||     ||            |     definition: field defined at [12, 8], type=int
   |  ||     ||            `> [24, 17] Identifier (x)
   |  ||     ||               definition: parameter defined at [23, 14], type=int
   |  ||     []> [27, 4] DeclMethod
   |  ||     ||  +> [27, 4] Identifier (int)
   |  ||     ||  |  definition: type (builtin), type=int
   |  ||     ||  +> [27, 8] Identifier (getX)
   |  ||     ||  |  definition: method defined at [27, 4], type=int
   |  ||     ||  +> ListDeclParam [List with 0 elements]
   |  ||     ||  `> [27, 14] MethodBody
   |  ||     ||     +> ListDeclVar [List with 0 elements]
   |  ||     ||     `> ListInst [List with 1 elements]
   |  ||     ||        []> [28, 15] Return
   |  ||     ||            `> [28, 15] Identifier (x)
   |  ||     ||               definition: field defined at [12, 8], type=int
   |  ||     []> [31, 4] DeclMethod
   |  ||         +> [31, 4] Identifier (float)
   |  ||         |  definition: type (builtin), type=float
   |  ||         +> [31, 10] Identifier (getY)
   |  ||         |  definition: method defined at [31, 4], type=float
   |  ||         +> ListDeclParam [List with 0 elements]
   |  ||         `> [31, 16] MethodBody
   |  ||            +> ListDeclVar [List with 0 elements]
   |  ||            `> ListInst [List with 1 elements]
   |  ||               []> [32, 15] Return
   |  ||                   `> [32, 15] Identifier (y)
   |  ||                      definition: field defined at [13, 10], type=float
   |  []> [36, 0] DeclClass
   |      +> [36, 6] Identifier (B)
   |      |  definition: type defined at [36, 0], type=B
   |      +> [36, 16] Identifier (A)
   |      |  definition: type defined at [11, 0], type=A
   |      +> ListDeclField [List with 1 elements]
   |      |  []> [37, 8]  [visibility=PUBLIC]  DeclField
   |      |      +> [37, 4] Identifier (int)
   |      |      |  definition: type (builtin), type=int
   |      |      +> [37, 8] Identifier (z)
   |      |      |  definition: field defined at [37, 8], type=int
   |      |      `> NoInitialization
   |      `> ListDeclMethod [List with 3 elements]
   |         []> [39, 4] DeclMethod
   |         ||  +> [39, 4] Identifier (void)
   |         ||  |  definition: type (builtin), type=void
   |         ||  +> [39, 9] Identifier (init)
   |         ||  |  definition: method defined at [39, 4], type=void
   |         ||  +> ListDeclParam [List with 0 elements]
   |         ||  `> [39, 16] MethodBody
   |         ||     +> ListDeclVar [List with 0 elements]
   |         ||     `> ListInst [List with 3 elements]
   |         ||        []> [40, 8] Assign
   |         ||        ||  type: int
   |         ||        ||  +> [40, 8] Identifier (x)
   |         ||        ||  |  definition: field defined at [12, 8], type=int
   |         ||        ||  `> [40, 12] Int (0)
   |         ||        ||     type: int
   |         ||        []> [41, 8] Assign
   |         ||        ||  type: float
   |         ||        ||  +> [41, 8] Identifier (y)
   |         ||        ||  |  definition: field defined at [13, 10], type=float
   |         ||        ||  `> [41, 12] Float (0.0)
   |         ||        ||     type: float
   |         ||        []> [42, 8] Assign
   |         ||            type: int
   |         ||            +> [42, 8] Identifier (z)
   |         ||            |  definition: field defined at [37, 8], type=int
   |         ||            `> [42, 12] Int (0)
   |         ||               type: int
   |         []> [45, 4] DeclMethod
   |         ||  +> [45, 4] Identifier (void)
   |         ||  |  definition: type (builtin), type=void
   |         ||  +> [45, 9] Identifier (setZ)
   |         ||  |  definition: method defined at [45, 4], type=void
   |         ||  +> [45, 14] ListDeclParam [List with 1 elements]
   |         ||  |  []> [45, 14] DeclParam
   |         ||  |      +> [45, 14] Identifier (int)
   |         ||  |      |  definition: type (builtin), type=int
   |         ||  |      `> [45, 18] Identifier (z)
   |         ||  |         definition: parameter defined at [45, 14], type=int
   |         ||  `> [45, 20] MethodBody
   |         ||     +> ListDeclVar [List with 0 elements]
   |         ||     `> ListInst [List with 1 elements]
   |         ||        []> [46, 8] Assign
   |         ||            type: int
   |         ||            +> [46, 8] Selection
   |         ||            |  type: int
   |         ||            |  +> [46, 8] This
   |         ||            |  |  type: B
   |         ||            |  `> [46, 13] Identifier (z)
   |         ||            |     definition: field defined at [37, 8], type=int
   |         ||            `> [46, 17] Identifier (z)
   |         ||               definition: parameter defined at [45, 14], type=int
   |         []> [49, 4] DeclMethod
   |             +> [49, 4] Identifier (int)
   |             |  definition: type (builtin), type=int
   |             +> [49, 8] Identifier (getZ)
   |             |  definition: method defined at [49, 4], type=int
   |             +> ListDeclParam [List with 0 elements]
   |             `> [49, 14] MethodBody
   |                +> ListDeclVar [List with 0 elements]
   |                `> ListInst [List with 1 elements]
   |                   []> [50, 15] Return
   |                       `> [50, 15] Identifier (z)
   |                          definition: field defined at [37, 8], type=int
   `> [54, 0] Main
      +> ListDeclVar [List with 1 elements]
      |  []> [55, 2] DeclVar
      |      +> [55, 0] Identifier (B)
      |      |  definition: type defined at [36, 0], type=B
      |      +> [55, 2] Identifier (b)
      |      |  definition: variable defined at [55, 2], type=B
      |      `> [55, 6] Initialization
      |         `> [55, 6] New
      |            type: B
      |            `> [55, 10] Identifier (B)
      |               definition: type defined at [36, 0], type=B
      `> ListInst [List with 7 elements]
         []> [56, 0] MethodCall
         ||  type: void
         ||  +> [56, 0] Identifier (b)
         ||  |  definition: variable defined at [55, 2], type=B
         ||  +> [56, 2] Identifier (setX)
         ||  |  definition: method defined at [23, 4], type=void
         ||  `> ListExpr [List with 1 elements]
         ||     []> [56, 7] Int (5)
         ||         type: int
         []> [57, 0] MethodCall
         ||  type: void
         ||  +> [57, 0] Identifier (b)
         ||  |  definition: variable defined at [55, 2], type=B
         ||  +> [57, 2] Identifier (setY)
         ||  |  definition: method defined at [19, 4], type=void
         ||  `> ListExpr [List with 1 elements]
         ||     []> [57, 7] Float (10.5)
         ||         type: float
         []> [58, 0] MethodCall
         ||  type: void
         ||  +> [58, 0] Identifier (b)
         ||  |  definition: variable defined at [55, 2], type=B
         ||  +> [58, 2] Identifier (setZ)
         ||  |  definition: method defined at [45, 4], type=void
         ||  `> ListExpr [List with 1 elements]
         ||     []> [58, 7] Int (20)
         ||         type: int
         []> [59, 8] Println
         ||  `> ListExpr [List with 6 elements]
         ||     []> [59, 8] StringLiteral (Les coordonnées de b avant réinitialisation sont: )
         ||     ||  type: string
         ||     []> [59, 62] MethodCall
         ||     ||  type: int
         ||     ||  +> [59, 62] Identifier (b)
         ||     ||  |  definition: variable defined at [55, 2], type=B
         ||     ||  +> [59, 64] Identifier (getX)
         ||     ||  |  definition: method defined at [27, 4], type=int
         ||     ||  `> ListExpr [List with 0 elements]
         ||     []> [59, 71] StringLiteral (|)
         ||     ||  type: string
         ||     []> [59, 76] MethodCall
         ||     ||  type: float
         ||     ||  +> [59, 76] Identifier (b)
         ||     ||  |  definition: variable defined at [55, 2], type=B
         ||     ||  +> [59, 78] Identifier (getY)
         ||     ||  |  definition: method defined at [31, 4], type=float
         ||     ||  `> ListExpr [List with 0 elements]
         ||     []> [59, 85] StringLiteral (|)
         ||     ||  type: string
         ||     []> [59, 90] MethodCall
         ||         type: int
         ||         +> [59, 90] Identifier (b)
         ||         |  definition: variable defined at [55, 2], type=B
         ||         +> [59, 92] Identifier (getZ)
         ||         |  definition: method defined at [49, 4], type=int
         ||         `> ListExpr [List with 0 elements]
         []> [60, 8] Println
         ||  `> ListExpr [List with 6 elements]
         ||     []> [60, 8] StringLiteral (Les coordonnées entières de b avant réinitialisation sont: )
         ||     ||  type: string
         ||     []> [60, 71] MethodCall
         ||     ||  type: int
         ||     ||  +> [60, 71] Identifier (b)
         ||     ||  |  definition: variable defined at [55, 2], type=B
         ||     ||  +> [60, 73] Identifier (getX)
         ||     ||  |  definition: method defined at [27, 4], type=int
         ||     ||  `> ListExpr [List with 0 elements]
         ||     []> [60, 80] StringLiteral (|)
         ||     ||  type: string
         ||     []> [60, 90] Cast
         ||     ||  type: int
         ||     ||  +> [60, 86] Identifier (int)
         ||     ||  |  definition: type (builtin), type=int
         ||     ||  `> [60, 91] MethodCall
         ||     ||     type: float
         ||     ||     +> [60, 91] Identifier (b)
         ||     ||     |  definition: variable defined at [55, 2], type=B
         ||     ||     +> [60, 93] Identifier (getY)
         ||     ||     |  definition: method defined at [31, 4], type=float
         ||     ||     `> ListExpr [List with 0 elements]
         ||     []> [60, 101] StringLiteral (|)
         ||     ||  type: string
         ||     []> [60, 106] MethodCall
         ||         type: int
         ||         +> [60, 106] Identifier (b)
         ||         |  definition: variable defined at [55, 2], type=B
         ||         +> [60, 108] Identifier (getZ)
         ||         |  definition: method defined at [49, 4], type=int
         ||         `> ListExpr [List with 0 elements]
         []> [61, 0] MethodCall
         ||  type: void
         ||  +> [61, 0] Identifier (b)
         ||  |  definition: variable defined at [55, 2], type=B
         ||  +> [61, 2] Identifier (init)
         ||  |  definition: method defined at [39, 4], type=void
         ||  `> ListExpr [List with 0 elements]
         []> [62, 8] Println
             `> ListExpr [List with 6 elements]
                []> [62, 8] StringLiteral (Les coordonnées de b après réinitialisation sont: )
                ||  type: string
                []> [62, 62] MethodCall
                ||  type: int
                ||  +> [62, 62] Identifier (b)
                ||  |  definition: variable defined at [55, 2], type=B
                ||  +> [62, 64] Identifier (getX)
                ||  |  definition: method defined at [27, 4], type=int
                ||  `> ListExpr [List with 0 elements]
                []> [62, 71] StringLiteral (|)
                ||  type: string
                []> [62, 76] MethodCall
                ||  type: float
                ||  +> [62, 76] Identifier (b)
                ||  |  definition: variable defined at [55, 2], type=B
                ||  +> [62, 78] Identifier (getY)
                ||  |  definition: method defined at [31, 4], type=float
                ||  `> ListExpr [List with 0 elements]
                []> [62, 85] StringLiteral (|)
                ||  type: string
                []> [62, 90] MethodCall
                    type: int
                    +> [62, 90] Identifier (b)
                    |  definition: variable defined at [55, 2], type=B
                    +> [62, 92] Identifier (getZ)
                    |  definition: method defined at [49, 4], type=int
                    `> ListExpr [List with 0 elements]
