DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:38) - [MethodDefinition][setLabel] Initialising label value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with code.Object.equals
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:46) - verify program: start
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:48) - Register unit management unit is null
DEBUG fr.ensimag.deca.DecacCompiler.saveMainProgramState(DecacCompiler.java:128) - [DecacCompiler][saveMainProgramState] Saving state main program
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:36) - [ListDeclClass][verifyListClass] verify listClass pass 1: START
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:40) - [ListDeclClass][verifyListClass] verify listClass pass 1: END
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassMembers(ListDeclClass.java:48) - [ListDeclClass][verifyListClassMembers] verify listClass pass 2: START
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyListDeclField(ListDeclField.java:54) - [ListDeclField][verifyListDeclField]
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:91) - [DeclField][verifyDecleField] Verify a Field declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:91) - [DeclField][verifyDecleField] Verify a Field declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:91) - [DeclField][verifyDecleField] Verify a Field declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:91) - [DeclField][verifyDecleField] Verify a Field declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:32) - [ListDeclMethod][verifyListDeclMethod]
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : sommefields
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  sommefields
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:136) - [DeclMethod][verifyDecleMethod] Method = sommefields does not exists, adding a new one to the local env with index 2
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : checkifsumistrue
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  checkifsumistrue
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:136) - [DeclMethod][verifyDecleMethod] Method = checkifsumistrue does not exists, adding a new one to the local env with index 3
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : equals
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  equals
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : otherClass
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter otherClass into -3(LB)
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:148) - [DeclMethod][verifyDecleMethod] Method = equals exists in the localenv, checking if it is a method that belongs to the current class
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:154) - [DeclMethod][verifyDecleMethod] Method = equals exists in the parent class,checking if our method matchs the one that is in the parent
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:167) - [DeclMethod][verifyDecleMethod] Method = equals exists in the parent class,and it was redefined exactly the way it was in the parent method, we used the index the index =1
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyListDeclField(ListDeclField.java:54) - [ListDeclField][verifyListDeclField]
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:32) - [ListDeclMethod][verifyListDeclMethod]
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyListDeclField(ListDeclField.java:54) - [ListDeclField][verifyListDeclField]
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:32) - [ListDeclMethod][verifyListDeclMethod]
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyListDeclField(ListDeclField.java:54) - [ListDeclField][verifyListDeclField]
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:32) - [ListDeclMethod][verifyListDeclMethod]
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassMembers(ListDeclClass.java:52) - [ListDeclClass][verifyListClassMembers] verify listClass pass 2: END
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassBody(ListDeclClass.java:59) - [ListDeclClass][verifyListClassBody] verify listClass pass 3: START
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyInitFields(ListDeclField.java:62) - [ListDeclField][verifyInitListDeclField]
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [14, 22]
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethodBody(ListDeclMethod.java:41) - [ListDeclMethod][verifyListDeclMethod]
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.Return.verifyInst(Return.java:39) - [Return][verifyInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [16, 15]
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.IfThenElse.verifyInst(IfThenElse.java:48) - [IfThenElse][verifyInst] Verify the condition and the instructions of the if then else
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyCondition(AbstractExpr.java:260) - [AbstractExpr][verifyInst] Verify the condition of a While or ifEhenElse
DEBUG fr.ensimag.deca.tree.AbstractOpCmp.verifyExpr(AbstractOpCmp.java:33) - [AbstractOpCmp][verifyExpr] Verify the comparison expressions
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractOpCmp.verifyExpr(AbstractOpCmp.java:45) - [AbstractOpCmp][verifyExpr] verify type left operand:int
DEBUG fr.ensimag.deca.tree.AbstractOpCmp.verifyExpr(AbstractOpCmp.java:46) - [AbstractOpCmp][verifyExpr] verify type right operand:int
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.Return.verifyInst(Return.java:39) - [Return][verifyInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [20, 19]
DEBUG fr.ensimag.deca.tree.BooleanLiteral.verifyExpr(BooleanLiteral.java:49) - [BooleanLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = boolean expected type is boolean
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = boolean expected type is boolean
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:141) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.IfThenElse.verifyInst(IfThenElse.java:48) - [IfThenElse][verifyInst] Verify the condition and the instructions of the if then else
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyCondition(AbstractExpr.java:260) - [AbstractExpr][verifyInst] Verify the condition of a While or ifEhenElse
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.IfThenElse.verifyInst(IfThenElse.java:48) - [IfThenElse][verifyInst] Verify the condition and the instructions of the if then else
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyCondition(AbstractExpr.java:260) - [AbstractExpr][verifyInst] Verify the condition of a While or ifEhenElse
DEBUG fr.ensimag.deca.tree.AbstractOpCmp.verifyExpr(AbstractOpCmp.java:33) - [AbstractOpCmp][verifyExpr] Verify the comparison expressions
DEBUG fr.ensimag.deca.tree.This.verifyExpr(This.java:54) - [This][verifyExpr]
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:99) - [Selection][verifyExpr] Class type is  A
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:99) - [Selection][verifyExpr] Class type is  A
DEBUG fr.ensimag.deca.tree.AbstractOpCmp.verifyExpr(AbstractOpCmp.java:45) - [AbstractOpCmp][verifyExpr] verify type left operand:int
DEBUG fr.ensimag.deca.tree.AbstractOpCmp.verifyExpr(AbstractOpCmp.java:46) - [AbstractOpCmp][verifyExpr] verify type right operand:int
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.This.verifyExpr(This.java:54) - [This][verifyExpr]
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:99) - [Selection][verifyExpr] Class type is  A
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:99) - [Selection][verifyExpr] Class type is  A
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Return.verifyInst(Return.java:39) - [Return][verifyInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [28, 23]
DEBUG fr.ensimag.deca.tree.BooleanLiteral.verifyExpr(BooleanLiteral.java:49) - [BooleanLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = boolean expected type is boolean
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = boolean expected type is boolean
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.Return.verifyInst(Return.java:39) - [Return][verifyInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [32, 15]
DEBUG fr.ensimag.deca.tree.BooleanLiteral.verifyExpr(BooleanLiteral.java:49) - [BooleanLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = boolean expected type is boolean
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = boolean expected type is boolean
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyInitFields(ListDeclField.java:62) - [ListDeclField][verifyInitListDeclField]
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethodBody(ListDeclMethod.java:41) - [ListDeclMethod][verifyListDeclMethod]
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyInitFields(ListDeclField.java:62) - [ListDeclField][verifyInitListDeclField]
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethodBody(ListDeclMethod.java:41) - [ListDeclMethod][verifyListDeclMethod]
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyInitFields(ListDeclField.java:62) - [ListDeclField][verifyInitListDeclField]
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethodBody(ListDeclMethod.java:41) - [ListDeclMethod][verifyListDeclMethod]
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassBody(ListDeclClass.java:63) - [ListDeclClass][verifyListClassBody] verify listClass pass 3: END
DEBUG fr.ensimag.deca.DecacCompiler.setMainProgramState(DecacCompiler.java:115) - [DecacCompiler][setMainProgramState] Seeting main state program
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:38) - verify Main: start
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [47, 14]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.New.verifyExpr(New.java:51) - [New][verifyExpr] returned type for new is  = A
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = A expected type is A
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving test1 into 1(GB)
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [48, 14]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.New.verifyExpr(New.java:51) - [New][verifyExpr] returned type for new is  = A
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = A expected type is A
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving test5 into 2(GB)
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [49, 14]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.New.verifyExpr(New.java:51) - [New][verifyExpr] returned type for new is  = B
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = B expected type is B
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving test2 into 3(GB)
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [50, 14]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.New.verifyExpr(New.java:51) - [New][verifyExpr] returned type for new is  = C
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = C expected type is C
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving test3 into 4(GB)
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:43) - [DeclVar][verifyDecleVar] Verify a variable declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.Initialization.verifyInitialization(Initialization.java:50) - [Initialization][verifyInitialization]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [51, 14]
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.New.verifyExpr(New.java:51) - [New][verifyExpr] returned type for new is  = D
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = D expected type is D
DEBUG fr.ensimag.deca.tree.DeclVar.verifyDeclVar(DeclVar.java:63) - [DeclVar] Saving test4 into 5(GB)
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.IfThenElse.verifyInst(IfThenElse.java:48) - [IfThenElse][verifyInst] Verify the condition and the instructions of the if then else
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyCondition(AbstractExpr.java:260) - [AbstractExpr][verifyInst] Verify the condition of a While or ifEhenElse
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.IfThenElse.verifyInst(IfThenElse.java:48) - [IfThenElse][verifyInst] Verify the condition and the instructions of the if then else
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyCondition(AbstractExpr.java:260) - [AbstractExpr][verifyInst] Verify the condition of a While or ifEhenElse
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.IfThenElse.verifyInst(IfThenElse.java:48) - [IfThenElse][verifyInst] Verify the condition and the instructions of the if then else
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyCondition(AbstractExpr.java:260) - [AbstractExpr][verifyInst] Verify the condition of a While or ifEhenElse
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.IfThenElse.verifyInst(IfThenElse.java:48) - [IfThenElse][verifyInst] Verify the condition and the instructions of the if then else
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyCondition(AbstractExpr.java:260) - [AbstractExpr][verifyInst] Verify the condition of a While or ifEhenElse
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.IfThenElse.verifyInst(IfThenElse.java:48) - [IfThenElse][verifyInst] Verify the condition and the instructions of the if then else
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyCondition(AbstractExpr.java:260) - [AbstractExpr][verifyInst] Verify the condition of a While or ifEhenElse
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:234) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractPrint.verifyInst(AbstractPrint.java:46) - [AbstractPrint][verifyInst] Verify the expressions in the print instruction
DEBUG fr.ensimag.deca.tree.StringLiteral.verifyExpr(StringLiteral.java:41) - [StringLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:99) - [Selection][verifyExpr] Class type is  A
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [68, 14]
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:172) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Selection.verifyExpr(Selection.java:99) - [Selection][verifyExpr] Class type is  A
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:216) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments --- location = [69, 14]
DEBUG fr.ensimag.deca.tree.IntLiteral.verifyExpr(IntLiteral.java:54) - [IntLiteral][verifyExpr]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:219) - [AbstractExpr][verifyRValue] right type is  = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:236) - [AbstractExpr][verifyRValue] We found the type = int expected type is int
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:244) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:42) - verify Main: end
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:60) - verify program: end
`> [10, 0] Program
   +> [43, 0] ListDeclClass [List with 4 elements]
   |  []> [10, 0] DeclClass
   |  ||  +> [10, 6] Identifier (A)
   |  ||  |  definition: type defined at [10, 0], type=A
   |  ||  +> [builtin] Identifier (Object)
   |  ||  |  definition: type (builtin), type=Object
   |  ||  +> ListDeclField [List with 4 elements]
   |  ||  |  []> [11, 8]  [visibility=PUBLIC]  DeclField
   |  ||  |  ||  +> [11, 4] Identifier (int)
   |  ||  |  ||  |  definition: type (builtin), type=int
   |  ||  |  ||  +> [11, 8] Identifier (x)
   |  ||  |  ||  |  definition: field defined at [11, 8], type=int
   |  ||  |  ||  `> NoInitialization
   |  ||  |  []> [12, 8]  [visibility=PUBLIC]  DeclField
   |  ||  |  ||  +> [12, 4] Identifier (int)
   |  ||  |  ||  |  definition: type (builtin), type=int
   |  ||  |  ||  +> [12, 8] Identifier (y)
   |  ||  |  ||  |  definition: field defined at [12, 8], type=int
   |  ||  |  ||  `> NoInitialization
   |  ||  |  []> [13, 8]  [visibility=PUBLIC]  DeclField
   |  ||  |  ||  +> [13, 4] Identifier (int)
   |  ||  |  ||  |  definition: type (builtin), type=int
   |  ||  |  ||  +> [13, 8] Identifier (z)
   |  ||  |  ||  |  definition: field defined at [13, 8], type=int
   |  ||  |  ||  `> NoInitialization
   |  ||  |  []> [14, 18]  [visibility=PROTECTED]  DeclField
   |  ||  |      +> [14, 14] Identifier (int)
   |  ||  |      |  definition: type (builtin), type=int
   |  ||  |      +> [14, 18] Identifier (h)
   |  ||  |      |  definition: field defined at [14, 18], type=int
   |  ||  |      `> [14, 22] Initialization
   |  ||  |         `> [14, 22] Int (2)
   |  ||  |            type: int
   |  ||  `> ListDeclMethod [List with 3 elements]
   |  ||     []> [15, 4] DeclMethod
   |  ||     ||  +> [15, 4] Identifier (int)
   |  ||     ||  |  definition: type (builtin), type=int
   |  ||     ||  +> [15, 8] Identifier (sommefields)
   |  ||     ||  |  definition: method defined at [15, 4], type=int
   |  ||     ||  +> ListDeclParam [List with 0 elements]
   |  ||     ||  `> [15, 21] MethodBody
   |  ||     ||     +> ListDeclVar [List with 0 elements]
   |  ||     ||     `> ListInst [List with 1 elements]
   |  ||     ||        []> [16, 15] Return
   |  ||     ||            `> [16, 15] Plus
   |  ||     ||               type: int
   |  ||     ||               +> [16, 15] Plus
   |  ||     ||               |  type: int
   |  ||     ||               |  +> [16, 15] Identifier (x)
   |  ||     ||               |  |  definition: field defined at [11, 8], type=int
   |  ||     ||               |  `> [16, 17] Identifier (y)
   |  ||     ||               |     definition: field defined at [12, 8], type=int
   |  ||     ||               `> [16, 19] Identifier (z)
   |  ||     ||                  definition: field defined at [13, 8], type=int
   |  ||     []> [18, 4] DeclMethod
   |  ||     ||  +> [18, 4] Identifier (boolean)
   |  ||     ||  |  definition: type (builtin), type=boolean
   |  ||     ||  +> [18, 12] Identifier (checkifsumistrue)
   |  ||     ||  |  definition: method defined at [18, 4], type=boolean
   |  ||     ||  +> ListDeclParam [List with 0 elements]
   |  ||     ||  `> [18, 30] MethodBody
   |  ||     ||     +> ListDeclVar [List with 0 elements]
   |  ||     ||     `> ListInst [List with 1 elements]
   |  ||     ||        []> [19, 8] IfThenElse
   |  ||     ||            +> [19, 12] GreaterOrEqual
   |  ||     ||            |  type: boolean
   |  ||     ||            |  +> [19, 12] Plus
   |  ||     ||            |  |  type: int
   |  ||     ||            |  |  +> [19, 12] Plus
   |  ||     ||            |  |  |  type: int
   |  ||     ||            |  |  |  +> [19, 12] Identifier (x)
   |  ||     ||            |  |  |  |  definition: field defined at [11, 8], type=int
   |  ||     ||            |  |  |  `> [19, 14] Identifier (y)
   |  ||     ||            |  |  |     definition: field defined at [12, 8], type=int
   |  ||     ||            |  |  `> [19, 16] Identifier (z)
   |  ||     ||            |  |     definition: field defined at [13, 8], type=int
   |  ||     ||            |  `> [19, 21] Int (0)
   |  ||     ||            |     type: int
   |  ||     ||            +> ListInst [List with 1 elements]
   |  ||     ||            |  []> [20, 19] Return
   |  ||     ||            |      `> [20, 19] BooleanLiteral (true)
   |  ||     ||            |         type: boolean
   |  ||     ||            `> ListInst [List with 0 elements]
   |  ||     []> [23, 4] DeclMethod
   |  ||         +> [23, 4] Identifier (boolean)
   |  ||         |  definition: type (builtin), type=boolean
   |  ||         +> [23, 12] Identifier (equals)
   |  ||         |  definition: method defined at [23, 4], type=boolean
   |  ||         +> [23, 19] ListDeclParam [List with 1 elements]
   |  ||         |  []> [23, 19] DeclParam
   |  ||         |      +> [23, 19] Identifier (Object)
   |  ||         |      |  definition: type (builtin), type=Object
   |  ||         |      `> [23, 26] Identifier (otherClass)
   |  ||         |         definition: parameter defined at [23, 19], type=Object
   |  ||         `> [23, 37] MethodBody
   |  ||            +> ListDeclVar [List with 0 elements]
   |  ||            `> ListInst [List with 3 elements]
   |  ||               []> [24, 8] IfThenElse
   |  ||               ||  +> [24, 13] InstanceOf
   |  ||               ||  |  type: boolean
   |  ||               ||  |  +> [24, 13] Identifier (otherClass)
   |  ||               ||  |  |  definition: parameter defined at [23, 19], type=Object
   |  ||               ||  |  `> [24, 35] Identifier (A)
   |  ||               ||  |     definition: type defined at [10, 0], type=A
   |  ||               ||  +> ListInst [List with 1 elements]
   |  ||               ||  |  []> [25, 12] IfThenElse
   |  ||               ||  |      +> [25, 16] Equals
   |  ||               ||  |      |  type: boolean
   |  ||               ||  |      |  +> [25, 16] Selection
   |  ||               ||  |      |  |  type: int
   |  ||               ||  |      |  |  +> [25, 20] Cast
   |  ||               ||  |      |  |  |  type: A
   |  ||               ||  |      |  |  |  +> [25, 18] Identifier (A)
   |  ||               ||  |      |  |  |  |  definition: type defined at [10, 0], type=A
   |  ||               ||  |      |  |  |  `> [25, 21] Identifier (otherClass)
   |  ||               ||  |      |  |  |     definition: parameter defined at [23, 19], type=Object
   |  ||               ||  |      |  |  `> [25, 34] Identifier (x)
   |  ||               ||  |      |  |     definition: field defined at [11, 8], type=int
   |  ||               ||  |      |  `> [25, 39] Selection
   |  ||               ||  |      |     type: int
   |  ||               ||  |      |     +> [25, 39] This
   |  ||               ||  |      |     |  type: A
   |  ||               ||  |      |     `> [25, 44] Identifier (x)
   |  ||               ||  |      |        definition: field defined at [11, 8], type=int
   |  ||               ||  |      +> ListInst [List with 3 elements]
   |  ||               ||  |      |  []> [26, 24] Println
   |  ||               ||  |      |  ||  `> ListExpr [List with 3 elements]
   |  ||               ||  |      |  ||     []> [26, 24] Selection
   |  ||               ||  |      |  ||     ||  type: int
   |  ||               ||  |      |  ||     ||  +> [26, 24] This
   |  ||               ||  |      |  ||     ||  |  type: A
   |  ||               ||  |      |  ||     ||  `> [26, 29] Identifier (x)
   |  ||               ||  |      |  ||     ||     definition: field defined at [11, 8], type=int
   |  ||               ||  |      |  ||     []> [26, 32] StringLiteral (==)
   |  ||               ||  |      |  ||     ||  type: string
   |  ||               ||  |      |  ||     []> [26, 38] Selection
   |  ||               ||  |      |  ||         type: int
   |  ||               ||  |      |  ||         +> [26, 42] Cast
   |  ||               ||  |      |  ||         |  type: A
   |  ||               ||  |      |  ||         |  +> [26, 40] Identifier (A)
   |  ||               ||  |      |  ||         |  |  definition: type defined at [10, 0], type=A
   |  ||               ||  |      |  ||         |  `> [26, 43] Identifier (otherClass)
   |  ||               ||  |      |  ||         |     definition: parameter defined at [23, 19], type=Object
   |  ||               ||  |      |  ||         `> [26, 56] Identifier (x)
   |  ||               ||  |      |  ||            definition: field defined at [11, 8], type=int
   |  ||               ||  |      |  []> [27, 24] Println
   |  ||               ||  |      |  ||  `> ListExpr [List with 1 elements]
   |  ||               ||  |      |  ||     []> [27, 24] StringLiteral (cast and instance of work)
   |  ||               ||  |      |  ||         type: string
   |  ||               ||  |      |  []> [28, 23] Return
   |  ||               ||  |      |      `> [28, 23] BooleanLiteral (true)
   |  ||               ||  |      |         type: boolean
   |  ||               ||  |      `> ListInst [List with 0 elements]
   |  ||               ||  `> ListInst [List with 0 elements]
   |  ||               []> [31, 16] Println
   |  ||               ||  `> ListExpr [List with 1 elements]
   |  ||               ||     []> [31, 16] StringLiteral (cast and instance of work in the bad case)
   |  ||               ||         type: string
   |  ||               []> [32, 15] Return
   |  ||                   `> [32, 15] BooleanLiteral (false)
   |  ||                      type: boolean
   |  []> [36, 0] DeclClass
   |  ||  +> [36, 6] Identifier (B)
   |  ||  |  definition: type defined at [36, 0], type=B
   |  ||  +> [builtin] Identifier (Object)
   |  ||  |  definition: type (builtin), type=Object
   |  ||  +> ListDeclField [List with 0 elements]
   |  ||  `> ListDeclMethod [List with 0 elements]
   |  []> [40, 0] DeclClass
   |  ||  +> [40, 6] Identifier (C)
   |  ||  |  definition: type defined at [40, 0], type=C
   |  ||  +> [40, 16] Identifier (B)
   |  ||  |  definition: type defined at [36, 0], type=B
   |  ||  +> ListDeclField [List with 0 elements]
   |  ||  `> ListDeclMethod [List with 0 elements]
   |  []> [43, 0] DeclClass
   |      +> [43, 6] Identifier (D)
   |      |  definition: type defined at [43, 0], type=D
   |      +> [43, 16] Identifier (C)
   |      |  definition: type defined at [40, 0], type=C
   |      +> ListDeclField [List with 0 elements]
   |      `> ListDeclMethod [List with 0 elements]
   `> [46, 0] Main
      +> ListDeclVar [List with 5 elements]
      |  []> [47, 6] DeclVar
      |  ||  +> [47, 4] Identifier (A)
      |  ||  |  definition: type defined at [10, 0], type=A
      |  ||  +> [47, 6] Identifier (test1)
      |  ||  |  definition: variable defined at [47, 6], type=A
      |  ||  `> [47, 14] Initialization
      |  ||     `> [47, 14] New
      |  ||        type: A
      |  ||        `> [47, 18] Identifier (A)
      |  ||           definition: type defined at [10, 0], type=A
      |  []> [48, 6] DeclVar
      |  ||  +> [48, 4] Identifier (A)
      |  ||  |  definition: type defined at [10, 0], type=A
      |  ||  +> [48, 6] Identifier (test5)
      |  ||  |  definition: variable defined at [48, 6], type=A
      |  ||  `> [48, 14] Initialization
      |  ||     `> [48, 14] New
      |  ||        type: A
      |  ||        `> [48, 18] Identifier (A)
      |  ||           definition: type defined at [10, 0], type=A
      |  []> [49, 6] DeclVar
      |  ||  +> [49, 4] Identifier (B)
      |  ||  |  definition: type defined at [36, 0], type=B
      |  ||  +> [49, 6] Identifier (test2)
      |  ||  |  definition: variable defined at [49, 6], type=B
      |  ||  `> [49, 14] Initialization
      |  ||     `> [49, 14] New
      |  ||        type: B
      |  ||        `> [49, 18] Identifier (B)
      |  ||           definition: type defined at [36, 0], type=B
      |  []> [50, 6] DeclVar
      |  ||  +> [50, 4] Identifier (C)
      |  ||  |  definition: type defined at [40, 0], type=C
      |  ||  +> [50, 6] Identifier (test3)
      |  ||  |  definition: variable defined at [50, 6], type=C
      |  ||  `> [50, 14] Initialization
      |  ||     `> [50, 14] New
      |  ||        type: C
      |  ||        `> [50, 18] Identifier (C)
      |  ||           definition: type defined at [40, 0], type=C
      |  []> [51, 6] DeclVar
      |      +> [51, 4] Identifier (D)
      |      |  definition: type defined at [43, 0], type=D
      |      +> [51, 6] Identifier (test4)
      |      |  definition: variable defined at [51, 6], type=D
      |      `> [51, 14] Initialization
      |         `> [51, 14] New
      |            type: D
      |            `> [51, 18] Identifier (D)
      |               definition: type defined at [43, 0], type=D
      `> ListInst [List with 9 elements]
         []> [52, 4] IfThenElse
         ||  +> [52, 8] InstanceOf
         ||  |  type: boolean
         ||  |  +> [52, 8] Identifier (test1)
         ||  |  |  definition: variable defined at [47, 6], type=A
         ||  |  `> [52, 25] Identifier (Object)
         ||  |     definition: type (builtin), type=Object
         ||  +> ListInst [List with 1 elements]
         ||  |  []> [53, 16] Println
         ||  |      `> ListExpr [List with 1 elements]
         ||  |         []> [53, 16] StringLiteral (Object compraison works)
         ||  |             type: string
         ||  `> ListInst [List with 0 elements]
         []> [55, 4] IfThenElse
         ||  +> [55, 8] InstanceOf
         ||  |  type: boolean
         ||  |  +> [55, 8] Identifier (test1)
         ||  |  |  definition: variable defined at [47, 6], type=A
         ||  |  `> [55, 25] Identifier (B)
         ||  |     definition: type defined at [36, 0], type=B
         ||  +> ListInst [List with 1 elements]
         ||  |  []> [56, 16] Println
         ||  |      `> ListExpr [List with 1 elements]
         ||  |         []> [56, 16] StringLiteral (cast does not instance of work)
         ||  |             type: string
         ||  `> ListInst [List with 0 elements]
         []> [58, 4] IfThenElse
         ||  +> [58, 8] InstanceOf
         ||  |  type: boolean
         ||  |  +> [58, 8] Identifier (test2)
         ||  |  |  definition: variable defined at [49, 6], type=B
         ||  |  `> [58, 25] Identifier (B)
         ||  |     definition: type defined at [36, 0], type=B
         ||  +> ListInst [List with 1 elements]
         ||  |  []> [59, 16] Println
         ||  |      `> ListExpr [List with 1 elements]
         ||  |         []> [59, 16] StringLiteral (cast works)
         ||  |             type: string
         ||  `> ListInst [List with 0 elements]
         []> [61, 4] IfThenElse
         ||  +> [61, 8] InstanceOf
         ||  |  type: boolean
         ||  |  +> [61, 8] Identifier (test3)
         ||  |  |  definition: variable defined at [50, 6], type=C
         ||  |  `> [61, 25] Identifier (B)
         ||  |     definition: type defined at [36, 0], type=B
         ||  +> ListInst [List with 1 elements]
         ||  |  []> [62, 16] Println
         ||  |      `> ListExpr [List with 1 elements]
         ||  |         []> [62, 16] StringLiteral (cast works)
         ||  |             type: string
         ||  `> ListInst [List with 0 elements]
         []> [64, 4] IfThenElse
         ||  +> [64, 9] Not
         ||  |  type: boolean
         ||  |  `> [64, 10] InstanceOf
         ||  |     type: boolean
         ||  |     +> [64, 10] Identifier (test4)
         ||  |     |  definition: variable defined at [51, 6], type=D
         ||  |     `> [64, 27] Identifier (A)
         ||  |        definition: type defined at [10, 0], type=A
         ||  +> ListInst [List with 1 elements]
         ||  |  []> [65, 16] Println
         ||  |      `> ListExpr [List with 1 elements]
         ||  |         []> [65, 16] StringLiteral (cast works)
         ||  |             type: string
         ||  `> ListInst [List with 0 elements]
         []> [68, 4] Assign
         ||  type: int
         ||  +> [68, 4] Selection
         ||  |  type: int
         ||  |  +> [68, 4] Identifier (test1)
         ||  |  |  definition: variable defined at [47, 6], type=A
         ||  |  `> [68, 10] Identifier (x)
         ||  |     definition: field defined at [11, 8], type=int
         ||  `> [68, 14] Int (5)
         ||     type: int
         []> [69, 4] Assign
         ||  type: int
         ||  +> [69, 4] Selection
         ||  |  type: int
         ||  |  +> [69, 4] Identifier (test5)
         ||  |  |  definition: variable defined at [48, 6], type=A
         ||  |  `> [69, 10] Identifier (x)
         ||  |     definition: field defined at [11, 8], type=int
         ||  `> [69, 14] Int (5)
         ||     type: int
         []> [70, 4] MethodCall
         ||  type: boolean
         ||  +> [70, 4] Identifier (test1)
         ||  |  definition: variable defined at [47, 6], type=A
         ||  +> [70, 10] Identifier (equals)
         ||  |  definition: method defined at [23, 4], type=boolean
         ||  `> ListExpr [List with 1 elements]
         ||     []> [70, 17] Identifier (test5)
         ||         definition: variable defined at [48, 6], type=A
         []> [71, 4] MethodCall
             type: boolean
             +> [71, 4] Identifier (test1)
             |  definition: variable defined at [47, 6], type=A
             +> [71, 10] Identifier (equals)
             |  definition: method defined at [23, 4], type=boolean
             `> ListExpr [List with 1 elements]
                []> [71, 17] Identifier (test2)
                    definition: variable defined at [49, 6], type=B
