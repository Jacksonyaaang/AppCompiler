// Description:
//    Teste le calcul de déterminant sur des tableaux de flottants et d'entiers
//
// Resultats:
//    Produit matriciel entre un tableau de int rempli de 5 et un tableau de int rempli de 3
//    --------------
//    Tableau2D = [
//    5 ,5 ,
//    5 ,5 ,
//    5 ,5 ,
//    ]--------------
//    --------------
//    Tableau2D = [
//    3 ,3 ,3 ,
//    3 ,3 ,3 ,
//    ]--------------
//    --------------
//    Tableau2D = [
//    30 ,30 ,30 ,
//    30 ,30 ,30 ,
//    30 ,30 ,30 ,
//    ]--------------
//
//    Produit matriciel après modification de plusieurs éléments de a
//    --------------
//    Tableau2D = [
//    1 ,5 ,
//    5 ,0 ,
//    5 ,9 ,
//    ]--------------
//    --------------
//    Tableau2D = [
//    7 ,3 ,3 ,
//    0 ,3 ,4 ,
//    ]--------------
//    --------------
//    Tableau2D = [
//    7 ,18 ,23 ,
//    35 ,15 ,15 ,
//    35 ,42 ,51 ,
//    ]--------------
//    --------------
//    Tableau2D = [
//    37 ,62 ,
//    35 ,36 ,
//    ]--------------
//
//    Produit matriciel entre un tableau de float rempli de 5.5 et un tableau de float rempli de 3.2
//    --------------
//    Tableau2D = [
//    5.28000e+01 ,5.28000e+01 ,5.28000e+01 ,
//    5.28000e+01 ,5.28000e+01 ,5.28000e+01 ,
//    5.28000e+01 ,5.28000e+01 ,5.28000e+01 ,
//    ]--------------
//
//    Produit matriciel après modification de plusieurs éléments de b
//    --------------
//    Tableau2D = [
//    2.50000e+00 ,5.50000e+00 ,5.50000e+00 ,
//    5.50000e+00 ,3.50000e+00 ,5.50000e+00 ,
//    7.20000e+00 ,5.50000e+00 ,5.00000e-01 ,
//    ]--------------
//    --------------
//    Tableau2D = [
//    3.20000e+00 ,3.20000e+00 ,3.20000e+00 ,
//    8.90000e+00 ,6.70000e+00 ,3.20000e+00 ,
//    3.20000e+00 ,3.00000e-01 ,4.30000e+00 ,
//    ]--------------
//    --------------
//    Tableau2D = [
//    7.45500e+01 ,4.65000e+01 ,4.92500e+01 ,
//    6.63500e+01 ,4.27000e+01 ,5.24500e+01 ,
//    7.35900e+01 ,6.00400e+01 ,4.27900e+01 ,
//    ]--------------
//    --------------
//    Tableau2D = [
//    4.86400e+01 ,4.64000e+01 ,3.68000e+01 ,
//    8.21400e+01 ,9.00000e+01 ,8.74000e+01 ,
//    4.06100e+01 ,4.23000e+01 ,2.14000e+01 ,
//    ]--------------
// Historique:
//    cree le 22/01/2023


#include "Produit_Matriciel_Naif.decah"
{
    MatrixMultiplication matrixMult = new MatrixMultiplication();
    int[][] a = new int[3][2];
    int[][] d = new int[2][3];
    int[][] intRes = new int[3][3];
    float[][] b = new float[3][3];
    float[][] c = new float[3][3];
    float[][] floatRes = new float[3][3];

    println("Produit matriciel entre un tableau de int rempli de 5 et un tableau de int rempli de 3");
    matrixMult.setInt2DTable(a,5);
    matrixMult.setInt2DTable(d,3);
    matrixMult.printInt2DTable(a);
    matrixMult.printInt2DTable(d);
    intRes = matrixMult.naiveMultiplyInt(a,d);
    matrixMult.printInt2DTable(intRes);
    println("");

    println("Produit matriciel après modification de plusieurs éléments de a");
    a[0][0] = 1;
    a[1][1] = 0;
    a[2][1] = 9;
    d[0][0] = 7;
    d[1][2] = 4;
    d[1][0] = 0;
    intRes = matrixMult.naiveMultiplyInt(a,d);
    matrixMult.printInt2DTable(a);
    matrixMult.printInt2DTable(d);
    matrixMult.printInt2DTable(intRes);

    intRes = matrixMult.naiveMultiplyInt(d,a);
    matrixMult.printInt2DTable(intRes);
    println("");

    println("Produit matriciel entre un tableau de float rempli de 5.5 et un tableau de float rempli de 3.2");
    matrixMult.setFloat2DTable(b,5.5);
    matrixMult.setFloat2DTable(c,3.2);
    floatRes = matrixMult.naiveMultiplyFloat(b,c);
    matrixMult.printFloat2DTable(floatRes);
    println("");

    println("Produit matriciel après modification de plusieurs éléments de b");
    b[0][0] = 2.5;
    b[1][1] = 3.5;
    b[2][2] = 0.5;
    b[2][0] = 7.2;
    c[1][0] = 8.9;
    c[1][1] = 6.7;
    c[2][1] = 0.3;
    c[2][2] = 4.3;
    matrixMult.printFloat2DTable(b);
    matrixMult.printFloat2DTable(c);
    floatRes = matrixMult.naiveMultiplyFloat(b,c);
    matrixMult.printFloat2DTable(floatRes);
    floatRes = matrixMult.naiveMultiplyFloat(c,b);
    matrixMult.printFloat2DTable(floatRes);
}