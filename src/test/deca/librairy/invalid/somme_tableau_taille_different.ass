	ADDSP #57
; start main program
; -------------------------------------
;        Method Table
; -------------------------------------
	LOAD #null, R0
	STORE R0, 8(GB)
	LOAD code.Object.equals, R0
	STORE R0, 9(GB)
	LEA 8(GB), R0
	STORE R0, 10(GB)
	LOAD code.Object.equals, R0
	STORE R0, 11(GB)
	LOAD code.Math.setInt1DTable, R0
	STORE R0, 12(GB)
	LOAD code.Math.setInt2DTable, R0
	STORE R0, 13(GB)
	LOAD code.Math.setFloat1DTable, R0
	STORE R0, 14(GB)
	LOAD code.Math.setFloat2DTable, R0
	STORE R0, 15(GB)
	LOAD code.Math.printInt1DTable, R0
	STORE R0, 16(GB)
	LOAD code.Math.printInt2DTable, R0
	STORE R0, 17(GB)
	LOAD code.Math.printFloat1DTable, R0
	STORE R0, 18(GB)
	LOAD code.Math.printFloat2DTable, R0
	STORE R0, 19(GB)
	LOAD code.Math.copyIntInt1DTable, R0
	STORE R0, 20(GB)
	LOAD code.Math.copyIntInt2DTable, R0
	STORE R0, 21(GB)
	LOAD code.Math.copyFloatFloat1DTable, R0
	STORE R0, 22(GB)
	LOAD code.Math.copyFloatFloat2DTable, R0
	STORE R0, 23(GB)
	LOAD code.Math.copyFloatInt1DTable, R0
	STORE R0, 24(GB)
	LOAD code.Math.copyFloatInt2DTable, R0
	STORE R0, 25(GB)
	LOAD code.Math.copyIntFloat1DTable, R0
	STORE R0, 26(GB)
	LOAD code.Math.copyIntFloat2DTable, R0
	STORE R0, 27(GB)
	LOAD code.Math.dimensionIncompatible, R0
	STORE R0, 28(GB)
	LOAD code.Math.throwError, R0
	STORE R0, 29(GB)
	LEA 10(GB), R0
	STORE R0, 30(GB)
	LOAD code.Object.equals, R0
	STORE R0, 31(GB)
	LOAD code.Math.setInt1DTable, R0
	STORE R0, 32(GB)
	LOAD code.Math.setInt2DTable, R0
	STORE R0, 33(GB)
	LOAD code.Math.setFloat1DTable, R0
	STORE R0, 34(GB)
	LOAD code.Math.setFloat2DTable, R0
	STORE R0, 35(GB)
	LOAD code.Math.printInt1DTable, R0
	STORE R0, 36(GB)
	LOAD code.Math.printInt2DTable, R0
	STORE R0, 37(GB)
	LOAD code.Math.printFloat1DTable, R0
	STORE R0, 38(GB)
	LOAD code.Math.printFloat2DTable, R0
	STORE R0, 39(GB)
	LOAD code.Math.copyIntInt1DTable, R0
	STORE R0, 40(GB)
	LOAD code.Math.copyIntInt2DTable, R0
	STORE R0, 41(GB)
	LOAD code.Math.copyFloatFloat1DTable, R0
	STORE R0, 42(GB)
	LOAD code.Math.copyFloatFloat2DTable, R0
	STORE R0, 43(GB)
	LOAD code.Math.copyFloatInt1DTable, R0
	STORE R0, 44(GB)
	LOAD code.Math.copyFloatInt2DTable, R0
	STORE R0, 45(GB)
	LOAD code.Math.copyIntFloat1DTable, R0
	STORE R0, 46(GB)
	LOAD code.Math.copyIntFloat2DTable, R0
	STORE R0, 47(GB)
	LOAD code.Math.dimensionIncompatible, R0
	STORE R0, 48(GB)
	LOAD code.Math.throwError, R0
	STORE R0, 49(GB)
	LOAD code.Sum.sommeIntInt1D, R0
	STORE R0, 50(GB)
	LOAD code.Sum.sommeIntInt2D, R0
	STORE R0, 51(GB)
	LOAD code.Sum.sommeFloatInt1D, R0
	STORE R0, 52(GB)
	LOAD code.Sum.sommeFloatInt2D, R0
	STORE R0, 53(GB)
	LOAD code.Sum.sommeIntFloat1D, R0
	STORE R0, 54(GB)
	LOAD code.Sum.sommeIntFloat2D, R0
	STORE R0, 55(GB)
	LOAD code.Sum.sommeFloatFloat1D, R0
	STORE R0, 56(GB)
	LOAD code.Sum.sommeFloatFloat2D, R0
	STORE R0, 57(GB)
; -------------------------------------
;        Main program
; -------------------------------------
; Beginning of main instructions:
; --------StartNew--------[12, 20]-----
; [New][loadItemintoRegister] loading new of calss =  Sum into memory at register R2
	NEW #1, R2
	LEA 30(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.Sum
	POP R2
; --------EndNew--------[12, 20]-----
	STORE R2, 1(GB)	; Initializing the variable matrixsum and loading it into memory
; --------StartNewTable--------[13, 14]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  int[] into memory at register R2
	LOAD #7, R3	; loading 7 into memory
	LOAD R3, R1
	ADD #1, R1
	NEW R1, R0
	STORE R3, 0(R0)
	LOAD R0, R2
; --------EndNewTable--------[13, 14]-----
	STORE R2, 2(GB)	; Initializing the variable x and loading it into memory
; --------StartNewTable--------[14, 16]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  float[] into memory at register R2
	LOAD #8, R3	; loading 8 into memory
	LOAD R3, R1
	ADD #1, R1
	NEW R1, R0
	STORE R3, 0(R0)
	LOAD R0, R2
; --------EndNewTable--------[14, 16]-----
	STORE R2, 3(GB)	; Initializing the variable y and loading it into memory
; --------StartNewTable--------[15, 16]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  int[][] into memory at register R2
	LOAD #3, R3	; loading 3 into memory
	LOAD #3, R4	; loading 3 into memory
	LOAD R3, R1
	MUL R4, R1
	ADD #2, R1
	NEW R1, R0
	STORE R3, 0(R0)
	STORE R4, 1(R0)
	LOAD R0, R2
; --------EndNewTable--------[15, 16]-----
	STORE R2, 4(GB)	; Initializing the variable a and loading it into memory
; --------StartNewTable--------[16, 16]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  int[][] into memory at register R2
	LOAD #3, R3	; loading 3 into memory
	LOAD #3, R4	; loading 3 into memory
	LOAD R3, R1
	MUL R4, R1
	ADD #2, R1
	NEW R1, R0
	STORE R3, 0(R0)
	STORE R4, 1(R0)
	LOAD R0, R2
; --------EndNewTable--------[16, 16]-----
	STORE R2, 5(GB)	; Initializing the variable d and loading it into memory
; --------StartNewTable--------[17, 18]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  float[][] into memory at register R2
	LOAD #3, R3	; loading 3 into memory
	LOAD #3, R4	; loading 3 into memory
	LOAD R3, R1
	MUL R4, R1
	ADD #2, R1
	NEW R1, R0
	STORE R3, 0(R0)
	STORE R4, 1(R0)
	LOAD R0, R2
; --------EndNewTable--------[17, 18]-----
	STORE R2, 6(GB)	; Initializing the variable b and loading it into memory
; --------StartNewTable--------[18, 18]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  float[][] into memory at register R2
	LOAD #3, R3	; loading 3 into memory
	LOAD #3, R4	; loading 3 into memory
	LOAD R3, R1
	MUL R4, R1
	ADD #2, R1
	NEW R1, R0
	STORE R3, 0(R0)
	STORE R4, 1(R0)
	LOAD R0, R2
; --------EndNewTable--------[18, 18]-----
	STORE R2, 7(GB)	; Initializing the variable c and loading it into memory
	WSTR "Test somme de tableaux 1D"
	WNL
; --------BeginMethodCall--------[21, 4]-----
	ADDSP #3
	LOAD 1(GB), R2	; loading matrixsum into memory
	STORE R2, 0(SP)
	LOAD 2(GB), R2	; loading x into memory
	STORE R2, -1(SP)
	LOAD #5, R2	; loading 5 into memory
	STORE R2, -2(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 2(R2)
	LOAD R0, R2
	SUBSP #3
; --------EndMethodCall--------[21, 4]-----
; --------BeginMethodCall--------[22, 4]-----
	ADDSP #3
	LOAD 1(GB), R2	; loading matrixsum into memory
	STORE R2, 0(SP)
	LOAD 3(GB), R2	; loading y into memory
	STORE R2, -1(SP)
	LOAD #0x1.8p2, R2	; loading 6.0 into memory
	STORE R2, -2(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 4(R2)
	LOAD R0, R2
	SUBSP #3
; --------EndMethodCall--------[22, 4]-----
; --------BeginMethodCall--------[23, 4]-----
	ADDSP #2
	LOAD 1(GB), R2	; loading matrixsum into memory
	STORE R2, 0(SP)
	LOAD 2(GB), R2	; loading x into memory
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 6(R2)
	LOAD R0, R2
	SUBSP #2
; --------EndMethodCall--------[23, 4]-----
; --------BeginMethodCall--------[24, 4]-----
	ADDSP #2
	LOAD 1(GB), R2	; loading matrixsum into memory
	STORE R2, 0(SP)
	LOAD 3(GB), R2	; loading y into memory
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 8(R2)
	LOAD R0, R2
	SUBSP #2
; --------EndMethodCall--------[24, 4]-----
; --------BeginMethodCall--------[25, 4]-----
	ADDSP #3
	LOAD 1(GB), R2	; loading matrixsum into memory
	STORE R2, 0(SP)
	LOAD 2(GB), R2	; loading x into memory
	STORE R2, -1(SP)
	LOAD 3(GB), R2	; loading y into memory
	STORE R2, -2(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 24(R2)
	LOAD R0, R2
	SUBSP #3
; --------EndMethodCall--------[25, 4]-----
	WSTR "Le r√©sultat de la somme est: "
	WNL
; --------BeginMethodCall--------[27, 4]-----
	ADDSP #2
	LOAD 1(GB), R2	; loading matrixsum into memory
	STORE R2, 0(SP)
	LOAD 2(GB), R2	; loading x into memory
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 6(R2)
	LOAD R0, R2
	SUBSP #2
; --------EndMethodCall--------[27, 4]-----
	WSTR ""
	WNL
	HALT
; -------------------------------------
;        Classes
; -------------------------------------
; ---------------------------------------------------
; ----------------- class : Math -------------------
; ---------------------------------------------------
; ------------Init method for class = Math--------
init.Math:
	RTS
; ------------Code for method : setInt1DTable with label =  code.Math.setInt1DTable--------
code.Math.setInt1DTable:
	ADDSP #1
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIterator and loading it into memory
while_begin1:
; --------StartBinaryOp--------[8, 15]-----
	LOAD 1(LB), R2	; loading tableIterator into memory
; --------BeginSelection--------[8, 31]-----
	LOAD -3(LB), R3	; loading table into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[8, 31]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[8, 15]-----
	CMP #1, R2
	BNE while_end1
; --------BeginAssignOp--------[9, 12]-----
	LOAD -4(LB), R3	; loading value into memory
; --------StartStoreTableElements--------[9, 12]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table the value in R3
	LOAD 1(LB), R4	; loading tableIterator into memory
	LOAD -3(LB), R1	; [saving] loading table into memory
	LOAD 0(R1), R0	; loading size 1d of table into memory
	LOAD R4, R0
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[9, 12]-----
; --------EndAssignOp--------[9, 12]-----
; --------BeginAssignOp--------[10, 12]-----
; --------StartBinaryOp--------[10, 28]-----
	LOAD 1(LB), R3	; loading tableIterator into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[10, 28]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIterator
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorand storing it into R2
; --------EndAssignOp--------[10, 12]-----
	BRA while_begin1
while_end1:
fin.Math.setInt1DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : setInt2DTable with label =  code.Math.setInt2DTable--------
code.Math.setInt2DTable:
	ADDSP #2
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIteratorX and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable tableIteratorY and loading it into memory
while_begin2:
; --------StartBinaryOp--------[17, 15]-----
	LOAD 2(LB), R2	; loading tableIteratorY into memory
; --------BeginSelection--------[17, 32]-----
	LOAD -3(LB), R3	; loading table into memory
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[17, 32]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[17, 15]-----
	CMP #1, R2
	BNE while_end2
while_begin3:
; --------StartBinaryOp--------[18, 19]-----
	LOAD 1(LB), R2	; loading tableIteratorX into memory
; --------BeginSelection--------[18, 36]-----
	LOAD -3(LB), R3	; loading table into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[18, 36]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[18, 19]-----
	CMP #1, R2
	BNE while_end3
; --------BeginAssignOp--------[19, 16]-----
	LOAD -4(LB), R3	; loading value into memory
; --------StartStoreTableElements--------[19, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table the value in R3
	LOAD 1(LB), R4	; loading tableIteratorX into memory
	LOAD 2(LB), R5	; loading tableIteratorY into memory
	LOAD -3(LB), R1	; [saving] loading table into memory
	LOAD 0(R1), R0	; loading size 1d of table into memory
	LOAD 1(R1), R0	; loading size 2d of table into memory
	MUL R0, R4
	ADD R5, R4
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[19, 16]-----
; --------EndAssignOp--------[19, 16]-----
; --------BeginAssignOp--------[20, 16]-----
; --------StartBinaryOp--------[20, 33]-----
	LOAD 1(LB), R3	; loading tableIteratorX into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[20, 33]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[20, 16]-----
	BRA while_begin3
while_end3:
; --------BeginAssignOp--------[22, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[22, 12]-----
; --------BeginAssignOp--------[23, 12]-----
; --------StartBinaryOp--------[23, 29]-----
	LOAD 2(LB), R3	; loading tableIteratorY into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[23, 29]-----
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorY
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorYand storing it into R2
; --------EndAssignOp--------[23, 12]-----
	BRA while_begin2
while_end2:
fin.Math.setInt2DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : setFloat1DTable with label =  code.Math.setFloat1DTable--------
code.Math.setFloat1DTable:
	ADDSP #1
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIterator and loading it into memory
while_begin4:
; --------StartBinaryOp--------[29, 15]-----
	LOAD 1(LB), R2	; loading tableIterator into memory
; --------BeginSelection--------[29, 31]-----
	LOAD -3(LB), R3	; loading table into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[29, 31]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[29, 15]-----
	CMP #1, R2
	BNE while_end4
; --------BeginAssignOp--------[30, 12]-----
	LOAD -4(LB), R3	; loading value into memory
; --------StartStoreTableElements--------[30, 12]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table the value in R3
	LOAD 1(LB), R4	; loading tableIterator into memory
	LOAD -3(LB), R1	; [saving] loading table into memory
	LOAD 0(R1), R0	; loading size 1d of table into memory
	LOAD R4, R0
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[30, 12]-----
; --------EndAssignOp--------[30, 12]-----
; --------BeginAssignOp--------[31, 12]-----
; --------StartBinaryOp--------[31, 28]-----
	LOAD 1(LB), R3	; loading tableIterator into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[31, 28]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIterator
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorand storing it into R2
; --------EndAssignOp--------[31, 12]-----
	BRA while_begin4
while_end4:
fin.Math.setFloat1DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : setFloat2DTable with label =  code.Math.setFloat2DTable--------
code.Math.setFloat2DTable:
	ADDSP #2
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIteratorX and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable tableIteratorY and loading it into memory
while_begin5:
; --------StartBinaryOp--------[38, 15]-----
	LOAD 2(LB), R2	; loading tableIteratorY into memory
; --------BeginSelection--------[38, 32]-----
	LOAD -3(LB), R3	; loading table into memory
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[38, 32]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[38, 15]-----
	CMP #1, R2
	BNE while_end5
while_begin6:
; --------StartBinaryOp--------[39, 19]-----
	LOAD 1(LB), R2	; loading tableIteratorX into memory
; --------BeginSelection--------[39, 36]-----
	LOAD -3(LB), R3	; loading table into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[39, 36]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[39, 19]-----
	CMP #1, R2
	BNE while_end6
; --------BeginAssignOp--------[40, 16]-----
	LOAD -4(LB), R3	; loading value into memory
; --------StartStoreTableElements--------[40, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table the value in R3
	LOAD 1(LB), R4	; loading tableIteratorX into memory
	LOAD 2(LB), R5	; loading tableIteratorY into memory
	LOAD -3(LB), R1	; [saving] loading table into memory
	LOAD 0(R1), R0	; loading size 1d of table into memory
	LOAD 1(R1), R0	; loading size 2d of table into memory
	MUL R0, R4
	ADD R5, R4
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[40, 16]-----
; --------EndAssignOp--------[40, 16]-----
; --------BeginAssignOp--------[41, 16]-----
; --------StartBinaryOp--------[41, 33]-----
	LOAD 1(LB), R3	; loading tableIteratorX into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[41, 33]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[41, 16]-----
	BRA while_begin6
while_end6:
; --------BeginAssignOp--------[43, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[43, 12]-----
; --------BeginAssignOp--------[44, 12]-----
; --------StartBinaryOp--------[44, 29]-----
	LOAD 2(LB), R3	; loading tableIteratorY into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[44, 29]-----
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorY
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorYand storing it into R2
; --------EndAssignOp--------[44, 12]-----
	BRA while_begin5
while_end5:
fin.Math.setFloat2DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : printInt1DTable with label =  code.Math.printInt1DTable--------
code.Math.printInt1DTable:
	ADDSP #1
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIterator and loading it into memory
	WSTR "--------------"
	WNL
	WSTR "Tableau1D = ["
	WNL
while_begin7:
; --------StartBinaryOp--------[52, 15]-----
	LOAD 1(LB), R2	; loading tableIterator into memory
; --------BeginSelection--------[52, 31]-----
	LOAD -3(LB), R3	; loading table into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[52, 31]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[52, 15]-----
	CMP #1, R2
	BNE while_end7
; --------StartGetTableElements--------[53, 18]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table into memory at register R2
	LOAD 1(LB), R3	; loading tableIterator into memory
	LOAD -3(LB), R1	; loading table into memory
	LOAD 0(R1), R0	; loading size 1d of table into memory
	LOAD 1(R1, R3), R0
	LOAD R0, R2
; --------EndGetTableElements--------[53, 18]-----
	LOAD R2, R1
	WINT
	WSTR " ,"
; --------BeginAssignOp--------[54, 12]-----
; --------StartBinaryOp--------[54, 28]-----
	LOAD 1(LB), R3	; loading tableIterator into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[54, 28]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIterator
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorand storing it into R2
; --------EndAssignOp--------[54, 12]-----
	BRA while_begin7
while_end7:
	WSTR "]"
	WSTR "--------------"
	WNL
fin.Math.printInt1DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : printInt2DTable with label =  code.Math.printInt2DTable--------
code.Math.printInt2DTable:
	ADDSP #2
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIteratorX and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable tableIteratorY and loading it into memory
	WSTR "--------------"
	WNL
	WSTR "Tableau2D = ["
	WNL
while_begin8:
; --------StartBinaryOp--------[65, 15]-----
	LOAD 2(LB), R2	; loading tableIteratorY into memory
; --------BeginSelection--------[65, 32]-----
	LOAD -3(LB), R3	; loading table into memory
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[65, 32]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[65, 15]-----
	CMP #1, R2
	BNE while_end8
while_begin9:
; --------StartBinaryOp--------[66, 19]-----
	LOAD 1(LB), R2	; loading tableIteratorX into memory
; --------BeginSelection--------[66, 36]-----
	LOAD -3(LB), R3	; loading table into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[66, 36]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[66, 19]-----
	CMP #1, R2
	BNE while_end9
; --------StartGetTableElements--------[67, 22]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table into memory at register R2
	LOAD 1(LB), R3	; loading tableIteratorX into memory
	LOAD 2(LB), R4	; loading tableIteratorY into memory
	LOAD -3(LB), R1	; loading table into memory
	LOAD 0(R1), R0	; loading size 1d of table into memory
	LOAD 1(R1), R0	; loading size 2d of table into memory
	MUL R0, R3
	ADD R4, R3
	LOAD 2(R1, R3), R0
	LOAD R0, R2
; --------EndGetTableElements--------[67, 22]-----
	LOAD R2, R1
	WINT
	WSTR " ,"
; --------BeginAssignOp--------[68, 16]-----
; --------StartBinaryOp--------[68, 33]-----
	LOAD 1(LB), R3	; loading tableIteratorX into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[68, 33]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[68, 16]-----
	BRA while_begin9
while_end9:
	WSTR ""
	WNL
; --------BeginAssignOp--------[71, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[71, 12]-----
; --------BeginAssignOp--------[72, 12]-----
; --------StartBinaryOp--------[72, 29]-----
	LOAD 2(LB), R3	; loading tableIteratorY into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[72, 29]-----
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorY
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorYand storing it into R2
; --------EndAssignOp--------[72, 12]-----
	BRA while_begin8
while_end8:
	WSTR "]"
	WSTR "--------------"
	WNL
fin.Math.printInt2DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : printFloat1DTable with label =  code.Math.printFloat1DTable--------
code.Math.printFloat1DTable:
	ADDSP #1
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIterator and loading it into memory
	WSTR "--------------"
	WNL
	WSTR "Tableau1D = ["
	WNL
while_begin10:
; --------StartBinaryOp--------[82, 15]-----
	LOAD 1(LB), R2	; loading tableIterator into memory
; --------BeginSelection--------[82, 31]-----
	LOAD -3(LB), R3	; loading table into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[82, 31]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[82, 15]-----
	CMP #1, R2
	BNE while_end10
; --------StartGetTableElements--------[83, 18]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table into memory at register R2
	LOAD 1(LB), R3	; loading tableIterator into memory
	LOAD -3(LB), R1	; loading table into memory
	LOAD 0(R1), R0	; loading size 1d of table into memory
	LOAD 1(R1, R3), R0
	LOAD R0, R2
; --------EndGetTableElements--------[83, 18]-----
	LOAD R2, R1
	WFLOAT
	WSTR " ,"
; --------BeginAssignOp--------[84, 12]-----
; --------StartBinaryOp--------[84, 28]-----
	LOAD 1(LB), R3	; loading tableIterator into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[84, 28]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIterator
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorand storing it into R2
; --------EndAssignOp--------[84, 12]-----
	BRA while_begin10
while_end10:
	WSTR "]"
	WSTR "--------------"
	WNL
fin.Math.printFloat1DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : printFloat2DTable with label =  code.Math.printFloat2DTable--------
code.Math.printFloat2DTable:
	ADDSP #2
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIteratorX and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable tableIteratorY and loading it into memory
	WSTR "--------------"
	WNL
	WSTR "Tableau2D = ["
	WNL
while_begin11:
; --------StartBinaryOp--------[95, 15]-----
	LOAD 2(LB), R2	; loading tableIteratorY into memory
; --------BeginSelection--------[95, 32]-----
	LOAD -3(LB), R3	; loading table into memory
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[95, 32]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[95, 15]-----
	CMP #1, R2
	BNE while_end11
while_begin12:
; --------StartBinaryOp--------[96, 19]-----
	LOAD 1(LB), R2	; loading tableIteratorX into memory
; --------BeginSelection--------[96, 36]-----
	LOAD -3(LB), R3	; loading table into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[96, 36]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[96, 19]-----
	CMP #1, R2
	BNE while_end12
; --------StartGetTableElements--------[97, 22]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table into memory at register R2
	LOAD 1(LB), R3	; loading tableIteratorX into memory
	LOAD 2(LB), R4	; loading tableIteratorY into memory
	LOAD -3(LB), R1	; loading table into memory
	LOAD 0(R1), R0	; loading size 1d of table into memory
	LOAD 1(R1), R0	; loading size 2d of table into memory
	MUL R0, R3
	ADD R4, R3
	LOAD 2(R1, R3), R0
	LOAD R0, R2
; --------EndGetTableElements--------[97, 22]-----
	LOAD R2, R1
	WFLOAT
	WSTR " ,"
; --------BeginAssignOp--------[98, 16]-----
; --------StartBinaryOp--------[98, 33]-----
	LOAD 1(LB), R3	; loading tableIteratorX into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[98, 33]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[98, 16]-----
	BRA while_begin12
while_end12:
	WSTR ""
	WNL
; --------BeginAssignOp--------[101, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[101, 12]-----
; --------BeginAssignOp--------[102, 12]-----
; --------StartBinaryOp--------[102, 29]-----
	LOAD 2(LB), R3	; loading tableIteratorY into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[102, 29]-----
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorY
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorYand storing it into R2
; --------EndAssignOp--------[102, 12]-----
	BRA while_begin11
while_end11:
	WSTR "]"
	WSTR "--------------"
	WNL
fin.Math.printFloat2DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : copyIntInt1DTable with label =  code.Math.copyIntInt1DTable--------
code.Math.copyIntInt1DTable:
	ADDSP #1
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable i and loading it into memory
; --------StartBinaryOp--------[110, 11]-----
; --------BeginSelection--------[110, 11]-----
	LOAD -4(LB), R2	; loading src into memory
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[110, 11]-----
; --------BeginSelection--------[110, 24]-----
	LOAD -3(LB), R3	; loading dest into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[110, 24]-----
	CMP R3, R2	; Comparing registers for Greater operation 
	SGT R2	; Placing Greater result into the register  
; --------EndBinaryOp--------[110, 11]-----
; ---------Startif-----------[110, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else1
	WSTR "La taille du tableau copie doit √™tre sup√©rieure ou √©gale √† la taille du tableau d'origine"
	WNL
; --------BeginMethodCall--------[112, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[112, 12]-----
	BRA end_ifthenelse_1
else1:
end_ifthenelse_1:
; ---------Endif-----------
while_begin13:
; --------StartBinaryOp--------[114, 14]-----
	LOAD 1(LB), R2	; loading i into memory
; --------BeginSelection--------[114, 18]-----
	LOAD -4(LB), R3	; loading src into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[114, 18]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[114, 14]-----
	CMP #1, R2
	BNE while_end13
; --------BeginAssignOp--------[115, 12]-----
; --------StartGetTableElements--------[115, 22]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  src into memory at register R3
	LOAD 1(LB), R4	; loading i into memory
	LOAD -4(LB), R1	; loading src into memory
	LOAD 0(R1), R0	; loading size 1d of src into memory
	LOAD 1(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[115, 22]-----
; --------StartStoreTableElements--------[115, 12]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  dest the value in R3
	LOAD 1(LB), R4	; loading i into memory
	LOAD -3(LB), R1	; [saving] loading dest into memory
	LOAD 0(R1), R0	; loading size 1d of dest into memory
	LOAD R4, R0
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[115, 12]-----
; --------EndAssignOp--------[115, 12]-----
; --------BeginAssignOp--------[116, 12]-----
; --------StartBinaryOp--------[116, 16]-----
	LOAD 1(LB), R3	; loading i into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[116, 16]-----
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[116, 12]-----
	BRA while_begin13
while_end13:
fin.Math.copyIntInt1DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : copyIntInt2DTable with label =  code.Math.copyIntInt2DTable--------
code.Math.copyIntInt2DTable:
	ADDSP #2
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable i and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable j and loading it into memory
; --------StartOr--------[123, 11]-----
; --------StartBinaryOp--------[123, 11]-----
; --------BeginSelection--------[123, 11]-----
	LOAD -4(LB), R2	; loading src into memory
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[123, 11]-----
; --------BeginSelection--------[123, 24]-----
	LOAD -3(LB), R3	; loading dest into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[123, 24]-----
	CMP R3, R2	; Comparing registers for Greater operation 
	SGT R2	; Placing Greater result into the register  
; --------EndBinaryOp--------[123, 11]-----
	CMP #1, R2	; [Or]Comparing in the left branch 
	BEQ End_Or_Id_1	; [Or] checking if the first element is false
; --------StartBinaryOp--------[123, 39]-----
; --------BeginSelection--------[123, 39]-----
	LOAD -4(LB), R3	; loading src into memory
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[123, 39]-----
; --------BeginSelection--------[123, 52]-----
	LOAD -3(LB), R4	; loading dest into memory
	LOAD 1(R4), R4	; Loading the field size2D into a register 
; --------BeginSelection--------[123, 52]-----
	CMP R4, R3	; Comparing registers for Greater operation 
	SGT R3	; Placing Greater result into the register  
; --------EndBinaryOp--------[123, 39]-----
	CMP #0, R3	; [Or]Comparing in the right branch 
	BEQ End_Or_Id_1	; [OR] checking if the second element is true 
	LOAD #1, R2	; Or is true , We place the value 1 in the return Register
End_Or_Id_1:
; --------EndOr--------[123, 11]-----
; ---------Startif-----------[123, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else2
	WSTR "La taille du tableau copie doit √™tre sup√©rieure ou √©gale √† la taille du tableau d'origine"
	WNL
; --------BeginMethodCall--------[125, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[125, 12]-----
	BRA end_ifthenelse_2
else2:
end_ifthenelse_2:
; ---------Endif-----------
while_begin14:
; --------StartBinaryOp--------[127, 15]-----
	LOAD 2(LB), R2	; loading j into memory
; --------BeginSelection--------[127, 19]-----
	LOAD -4(LB), R3	; loading src into memory
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[127, 19]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[127, 15]-----
	CMP #1, R2
	BNE while_end14
while_begin15:
; --------StartBinaryOp--------[128, 19]-----
	LOAD 1(LB), R2	; loading i into memory
; --------BeginSelection--------[128, 23]-----
	LOAD -4(LB), R3	; loading src into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[128, 23]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[128, 19]-----
	CMP #1, R2
	BNE while_end15
; --------BeginAssignOp--------[129, 16]-----
; --------StartGetTableElements--------[129, 29]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  src into memory at register R3
	LOAD 1(LB), R4	; loading i into memory
	LOAD 2(LB), R5	; loading j into memory
	LOAD -4(LB), R1	; loading src into memory
	LOAD 0(R1), R0	; loading size 1d of src into memory
	LOAD 1(R1), R0	; loading size 2d of src into memory
	MUL R0, R4
	ADD R5, R4
	LOAD 2(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[129, 29]-----
; --------StartStoreTableElements--------[129, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  dest the value in R3
	LOAD 1(LB), R4	; loading i into memory
	LOAD 2(LB), R5	; loading j into memory
	LOAD -3(LB), R1	; [saving] loading dest into memory
	LOAD 0(R1), R0	; loading size 1d of dest into memory
	LOAD 1(R1), R0	; loading size 2d of dest into memory
	MUL R0, R4
	ADD R5, R4
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[129, 16]-----
; --------EndAssignOp--------[129, 16]-----
; --------BeginAssignOp--------[130, 16]-----
; --------StartBinaryOp--------[130, 20]-----
	LOAD 1(LB), R3	; loading i into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[130, 20]-----
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[130, 16]-----
	BRA while_begin15
while_end15:
; --------BeginAssignOp--------[132, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[132, 12]-----
; --------BeginAssignOp--------[133, 12]-----
; --------StartBinaryOp--------[133, 16]-----
	LOAD 2(LB), R3	; loading j into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[133, 16]-----
	STORE R3, 2(LB)	;  Assiging a value to j
	LOAD R3, R2	;  Return value of the assignement of =jand storing it into R2
; --------EndAssignOp--------[133, 12]-----
	BRA while_begin14
while_end14:
fin.Math.copyIntInt2DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : copyFloatFloat1DTable with label =  code.Math.copyFloatFloat1DTable--------
code.Math.copyFloatFloat1DTable:
	ADDSP #1
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable i and loading it into memory
; --------StartBinaryOp--------[139, 11]-----
; --------BeginSelection--------[139, 11]-----
	LOAD -4(LB), R2	; loading src into memory
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[139, 11]-----
; --------BeginSelection--------[139, 24]-----
	LOAD -3(LB), R3	; loading dest into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[139, 24]-----
	CMP R3, R2	; Comparing registers for Greater operation 
	SGT R2	; Placing Greater result into the register  
; --------EndBinaryOp--------[139, 11]-----
; ---------Startif-----------[139, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else3
	WSTR "La taille du tableau copie doit √™tre sup√©rieure ou √©gale √† la taille du tableau d'origine"
	WNL
; --------BeginMethodCall--------[141, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[141, 12]-----
	BRA end_ifthenelse_3
else3:
end_ifthenelse_3:
; ---------Endif-----------
while_begin16:
; --------StartBinaryOp--------[143, 14]-----
	LOAD 1(LB), R2	; loading i into memory
; --------BeginSelection--------[143, 18]-----
	LOAD -4(LB), R3	; loading src into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[143, 18]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[143, 14]-----
	CMP #1, R2
	BNE while_end16
; --------BeginAssignOp--------[144, 12]-----
; --------StartGetTableElements--------[144, 22]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  src into memory at register R3
	LOAD 1(LB), R4	; loading i into memory
	LOAD -4(LB), R1	; loading src into memory
	LOAD 0(R1), R0	; loading size 1d of src into memory
	LOAD 1(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[144, 22]-----
; --------StartStoreTableElements--------[144, 12]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  dest the value in R3
	LOAD 1(LB), R4	; loading i into memory
	LOAD -3(LB), R1	; [saving] loading dest into memory
	LOAD 0(R1), R0	; loading size 1d of dest into memory
	LOAD R4, R0
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[144, 12]-----
; --------EndAssignOp--------[144, 12]-----
; --------BeginAssignOp--------[145, 12]-----
; --------StartBinaryOp--------[145, 16]-----
	LOAD 1(LB), R3	; loading i into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[145, 16]-----
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[145, 12]-----
	BRA while_begin16
while_end16:
fin.Math.copyFloatFloat1DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : copyFloatFloat2DTable with label =  code.Math.copyFloatFloat2DTable--------
code.Math.copyFloatFloat2DTable:
	ADDSP #2
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable i and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable j and loading it into memory
; --------StartOr--------[152, 11]-----
; --------StartBinaryOp--------[152, 11]-----
; --------BeginSelection--------[152, 11]-----
	LOAD -4(LB), R2	; loading src into memory
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[152, 11]-----
; --------BeginSelection--------[152, 24]-----
	LOAD -3(LB), R3	; loading dest into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[152, 24]-----
	CMP R3, R2	; Comparing registers for Greater operation 
	SGT R2	; Placing Greater result into the register  
; --------EndBinaryOp--------[152, 11]-----
	CMP #1, R2	; [Or]Comparing in the left branch 
	BEQ End_Or_Id_2	; [Or] checking if the first element is false
; --------StartBinaryOp--------[152, 39]-----
; --------BeginSelection--------[152, 39]-----
	LOAD -4(LB), R3	; loading src into memory
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[152, 39]-----
; --------BeginSelection--------[152, 52]-----
	LOAD -3(LB), R4	; loading dest into memory
	LOAD 1(R4), R4	; Loading the field size2D into a register 
; --------BeginSelection--------[152, 52]-----
	CMP R4, R3	; Comparing registers for Greater operation 
	SGT R3	; Placing Greater result into the register  
; --------EndBinaryOp--------[152, 39]-----
	CMP #0, R3	; [Or]Comparing in the right branch 
	BEQ End_Or_Id_2	; [OR] checking if the second element is true 
	LOAD #1, R2	; Or is true , We place the value 1 in the return Register
End_Or_Id_2:
; --------EndOr--------[152, 11]-----
; ---------Startif-----------[152, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else4
	WSTR "La taille du tableau copie doit √™tre sup√©rieure ou √©gale √† la taille du tableau d'origine"
	WNL
; --------BeginMethodCall--------[154, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[154, 12]-----
	BRA end_ifthenelse_4
else4:
end_ifthenelse_4:
; ---------Endif-----------
while_begin17:
; --------StartBinaryOp--------[156, 15]-----
	LOAD 2(LB), R2	; loading j into memory
; --------BeginSelection--------[156, 19]-----
	LOAD -4(LB), R3	; loading src into memory
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[156, 19]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[156, 15]-----
	CMP #1, R2
	BNE while_end17
while_begin18:
; --------StartBinaryOp--------[157, 19]-----
	LOAD 1(LB), R2	; loading i into memory
; --------BeginSelection--------[157, 23]-----
	LOAD -4(LB), R3	; loading src into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[157, 23]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[157, 19]-----
	CMP #1, R2
	BNE while_end18
; --------BeginAssignOp--------[158, 16]-----
; --------StartGetTableElements--------[158, 29]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  src into memory at register R3
	LOAD 1(LB), R4	; loading i into memory
	LOAD 2(LB), R5	; loading j into memory
	LOAD -4(LB), R1	; loading src into memory
	LOAD 0(R1), R0	; loading size 1d of src into memory
	LOAD 1(R1), R0	; loading size 2d of src into memory
	MUL R0, R4
	ADD R5, R4
	LOAD 2(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[158, 29]-----
; --------StartStoreTableElements--------[158, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  dest the value in R3
	LOAD 1(LB), R4	; loading i into memory
	LOAD 2(LB), R5	; loading j into memory
	LOAD -3(LB), R1	; [saving] loading dest into memory
	LOAD 0(R1), R0	; loading size 1d of dest into memory
	LOAD 1(R1), R0	; loading size 2d of dest into memory
	MUL R0, R4
	ADD R5, R4
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[158, 16]-----
; --------EndAssignOp--------[158, 16]-----
; --------BeginAssignOp--------[159, 16]-----
; --------StartBinaryOp--------[159, 20]-----
	LOAD 1(LB), R3	; loading i into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[159, 20]-----
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[159, 16]-----
	BRA while_begin18
while_end18:
; --------BeginAssignOp--------[161, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[161, 12]-----
; --------BeginAssignOp--------[162, 12]-----
; --------StartBinaryOp--------[162, 16]-----
	LOAD 2(LB), R3	; loading j into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[162, 16]-----
	STORE R3, 2(LB)	;  Assiging a value to j
	LOAD R3, R2	;  Return value of the assignement of =jand storing it into R2
; --------EndAssignOp--------[162, 12]-----
	BRA while_begin17
while_end17:
fin.Math.copyFloatFloat2DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : copyFloatInt1DTable with label =  code.Math.copyFloatInt1DTable--------
code.Math.copyFloatInt1DTable:
	ADDSP #1
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable i and loading it into memory
; --------StartBinaryOp--------[168, 11]-----
; --------BeginSelection--------[168, 11]-----
	LOAD -4(LB), R2	; loading src into memory
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[168, 11]-----
; --------BeginSelection--------[168, 24]-----
	LOAD -3(LB), R3	; loading dest into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[168, 24]-----
	CMP R3, R2	; Comparing registers for Greater operation 
	SGT R2	; Placing Greater result into the register  
; --------EndBinaryOp--------[168, 11]-----
; ---------Startif-----------[168, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else5
	WSTR "La taille du tableau copie doit √™tre sup√©rieure ou √©gale √† la taille du tableau d'origine"
	WNL
; --------BeginMethodCall--------[170, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[170, 12]-----
	BRA end_ifthenelse_5
else5:
end_ifthenelse_5:
; ---------Endif-----------
while_begin19:
; --------StartBinaryOp--------[172, 14]-----
	LOAD 1(LB), R2	; loading i into memory
; --------BeginSelection--------[172, 18]-----
	LOAD -4(LB), R3	; loading src into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[172, 18]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[172, 14]-----
	CMP #1, R2
	BNE while_end19
; --------BeginAssignOp--------[173, 12]-----
; --------StartGetTableElements--------[173, 30]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  src into memory at register R3
	LOAD 1(LB), R4	; loading i into memory
	LOAD -4(LB), R1	; loading src into memory
	LOAD 0(R1), R0	; loading size 1d of src into memory
	LOAD 1(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[173, 30]-----
	FLOAT R3, R3
; --------StartStoreTableElements--------[173, 12]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  dest the value in R3
	LOAD 1(LB), R4	; loading i into memory
	LOAD -3(LB), R1	; [saving] loading dest into memory
	LOAD 0(R1), R0	; loading size 1d of dest into memory
	LOAD R4, R0
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[173, 12]-----
; --------EndAssignOp--------[173, 12]-----
; --------BeginAssignOp--------[174, 12]-----
; --------StartBinaryOp--------[174, 16]-----
	LOAD 1(LB), R3	; loading i into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[174, 16]-----
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[174, 12]-----
	BRA while_begin19
while_end19:
fin.Math.copyFloatInt1DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : copyFloatInt2DTable with label =  code.Math.copyFloatInt2DTable--------
code.Math.copyFloatInt2DTable:
	ADDSP #2
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable i and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable j and loading it into memory
; --------StartOr--------[181, 11]-----
; --------StartBinaryOp--------[181, 11]-----
; --------BeginSelection--------[181, 11]-----
	LOAD -4(LB), R2	; loading src into memory
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[181, 11]-----
; --------BeginSelection--------[181, 24]-----
	LOAD -3(LB), R3	; loading dest into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[181, 24]-----
	CMP R3, R2	; Comparing registers for Greater operation 
	SGT R2	; Placing Greater result into the register  
; --------EndBinaryOp--------[181, 11]-----
	CMP #1, R2	; [Or]Comparing in the left branch 
	BEQ End_Or_Id_3	; [Or] checking if the first element is false
; --------StartBinaryOp--------[181, 39]-----
; --------BeginSelection--------[181, 39]-----
	LOAD -4(LB), R3	; loading src into memory
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[181, 39]-----
; --------BeginSelection--------[181, 52]-----
	LOAD -3(LB), R4	; loading dest into memory
	LOAD 1(R4), R4	; Loading the field size2D into a register 
; --------BeginSelection--------[181, 52]-----
	CMP R4, R3	; Comparing registers for Greater operation 
	SGT R3	; Placing Greater result into the register  
; --------EndBinaryOp--------[181, 39]-----
	CMP #0, R3	; [Or]Comparing in the right branch 
	BEQ End_Or_Id_3	; [OR] checking if the second element is true 
	LOAD #1, R2	; Or is true , We place the value 1 in the return Register
End_Or_Id_3:
; --------EndOr--------[181, 11]-----
; ---------Startif-----------[181, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else6
	WSTR "La taille du tableau copie doit √™tre sup√©rieure ou √©gale √† la taille du tableau d'origine"
	WNL
; --------BeginMethodCall--------[183, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[183, 12]-----
	BRA end_ifthenelse_6
else6:
end_ifthenelse_6:
; ---------Endif-----------
while_begin20:
; --------StartBinaryOp--------[185, 15]-----
	LOAD 2(LB), R2	; loading j into memory
; --------BeginSelection--------[185, 19]-----
	LOAD -4(LB), R3	; loading src into memory
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[185, 19]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[185, 15]-----
	CMP #1, R2
	BNE while_end20
while_begin21:
; --------StartBinaryOp--------[186, 19]-----
	LOAD 1(LB), R2	; loading i into memory
; --------BeginSelection--------[186, 23]-----
	LOAD -4(LB), R3	; loading src into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[186, 23]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[186, 19]-----
	CMP #1, R2
	BNE while_end21
; --------BeginAssignOp--------[187, 16]-----
; --------StartGetTableElements--------[187, 37]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  src into memory at register R3
	LOAD 1(LB), R4	; loading i into memory
	LOAD 2(LB), R5	; loading j into memory
	LOAD -4(LB), R1	; loading src into memory
	LOAD 0(R1), R0	; loading size 1d of src into memory
	LOAD 1(R1), R0	; loading size 2d of src into memory
	MUL R0, R4
	ADD R5, R4
	LOAD 2(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[187, 37]-----
	FLOAT R3, R3
; --------StartStoreTableElements--------[187, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  dest the value in R3
	LOAD 1(LB), R4	; loading i into memory
	LOAD 2(LB), R5	; loading j into memory
	LOAD -3(LB), R1	; [saving] loading dest into memory
	LOAD 0(R1), R0	; loading size 1d of dest into memory
	LOAD 1(R1), R0	; loading size 2d of dest into memory
	MUL R0, R4
	ADD R5, R4
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[187, 16]-----
; --------EndAssignOp--------[187, 16]-----
; --------BeginAssignOp--------[188, 16]-----
; --------StartBinaryOp--------[188, 20]-----
	LOAD 1(LB), R3	; loading i into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[188, 20]-----
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[188, 16]-----
	BRA while_begin21
while_end21:
; --------BeginAssignOp--------[190, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[190, 12]-----
; --------BeginAssignOp--------[191, 12]-----
; --------StartBinaryOp--------[191, 16]-----
	LOAD 2(LB), R3	; loading j into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[191, 16]-----
	STORE R3, 2(LB)	;  Assiging a value to j
	LOAD R3, R2	;  Return value of the assignement of =jand storing it into R2
; --------EndAssignOp--------[191, 12]-----
	BRA while_begin20
while_end20:
fin.Math.copyFloatInt2DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : copyIntFloat1DTable with label =  code.Math.copyIntFloat1DTable--------
code.Math.copyIntFloat1DTable:
	ADDSP #1
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable i and loading it into memory
; --------StartBinaryOp--------[197, 11]-----
; --------BeginSelection--------[197, 11]-----
	LOAD -4(LB), R2	; loading src into memory
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[197, 11]-----
; --------BeginSelection--------[197, 24]-----
	LOAD -3(LB), R3	; loading dest into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[197, 24]-----
	CMP R3, R2	; Comparing registers for Greater operation 
	SGT R2	; Placing Greater result into the register  
; --------EndBinaryOp--------[197, 11]-----
; ---------Startif-----------[197, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else7
	WSTR "La taille du tableau copie doit √™tre sup√©rieure ou √©gale √† la taille du tableau d'origine"
	WNL
; --------BeginMethodCall--------[199, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[199, 12]-----
	BRA end_ifthenelse_7
else7:
end_ifthenelse_7:
; ---------Endif-----------
while_begin22:
; --------StartBinaryOp--------[201, 14]-----
	LOAD 1(LB), R2	; loading i into memory
; --------BeginSelection--------[201, 18]-----
	LOAD -4(LB), R3	; loading src into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[201, 18]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[201, 14]-----
	CMP #1, R2
	BNE while_end22
; --------BeginAssignOp--------[202, 12]-----
; --------StartGetTableElements--------[202, 28]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  src into memory at register R3
	LOAD 1(LB), R4	; loading i into memory
	LOAD -4(LB), R1	; loading src into memory
	LOAD 0(R1), R0	; loading size 1d of src into memory
	LOAD 1(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[202, 28]-----
; --------StartStoreTableElements--------[202, 12]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  dest the value in R3
	LOAD 1(LB), R4	; loading i into memory
	LOAD -3(LB), R1	; [saving] loading dest into memory
	LOAD 0(R1), R0	; loading size 1d of dest into memory
	LOAD R4, R0
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[202, 12]-----
; --------EndAssignOp--------[202, 12]-----
; --------BeginAssignOp--------[203, 12]-----
; --------StartBinaryOp--------[203, 16]-----
	LOAD 1(LB), R3	; loading i into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[203, 16]-----
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[203, 12]-----
	BRA while_begin22
while_end22:
fin.Math.copyIntFloat1DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : copyIntFloat2DTable with label =  code.Math.copyIntFloat2DTable--------
code.Math.copyIntFloat2DTable:
	ADDSP #2
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable i and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable j and loading it into memory
; --------StartOr--------[210, 11]-----
; --------StartBinaryOp--------[210, 11]-----
; --------BeginSelection--------[210, 11]-----
	LOAD -4(LB), R2	; loading src into memory
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[210, 11]-----
; --------BeginSelection--------[210, 24]-----
	LOAD -3(LB), R3	; loading dest into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[210, 24]-----
	CMP R3, R2	; Comparing registers for Greater operation 
	SGT R2	; Placing Greater result into the register  
; --------EndBinaryOp--------[210, 11]-----
	CMP #1, R2	; [Or]Comparing in the left branch 
	BEQ End_Or_Id_4	; [Or] checking if the first element is false
; --------StartBinaryOp--------[210, 39]-----
; --------BeginSelection--------[210, 39]-----
	LOAD -4(LB), R3	; loading src into memory
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[210, 39]-----
; --------BeginSelection--------[210, 52]-----
	LOAD -3(LB), R4	; loading dest into memory
	LOAD 1(R4), R4	; Loading the field size2D into a register 
; --------BeginSelection--------[210, 52]-----
	CMP R4, R3	; Comparing registers for Greater operation 
	SGT R3	; Placing Greater result into the register  
; --------EndBinaryOp--------[210, 39]-----
	CMP #0, R3	; [Or]Comparing in the right branch 
	BEQ End_Or_Id_4	; [OR] checking if the second element is true 
	LOAD #1, R2	; Or is true , We place the value 1 in the return Register
End_Or_Id_4:
; --------EndOr--------[210, 11]-----
; ---------Startif-----------[210, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else8
	WSTR "La taille du tableau copie doit √™tre sup√©rieure ou √©gale √† la taille du tableau d'origine"
	WNL
; --------BeginMethodCall--------[212, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[212, 12]-----
	BRA end_ifthenelse_8
else8:
end_ifthenelse_8:
; ---------Endif-----------
while_begin23:
; --------StartBinaryOp--------[214, 15]-----
	LOAD 2(LB), R2	; loading j into memory
; --------BeginSelection--------[214, 19]-----
	LOAD -4(LB), R3	; loading src into memory
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[214, 19]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[214, 15]-----
	CMP #1, R2
	BNE while_end23
while_begin24:
; --------StartBinaryOp--------[215, 19]-----
	LOAD 1(LB), R2	; loading i into memory
; --------BeginSelection--------[215, 23]-----
	LOAD -4(LB), R3	; loading src into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[215, 23]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[215, 19]-----
	CMP #1, R2
	BNE while_end24
; --------BeginAssignOp--------[216, 16]-----
; --------StartGetTableElements--------[216, 35]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  src into memory at register R3
	LOAD 1(LB), R4	; loading i into memory
	LOAD 2(LB), R5	; loading j into memory
	LOAD -4(LB), R1	; loading src into memory
	LOAD 0(R1), R0	; loading size 1d of src into memory
	LOAD 1(R1), R0	; loading size 2d of src into memory
	MUL R0, R4
	ADD R5, R4
	LOAD 2(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[216, 35]-----
	INT R3, R3
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[216, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  dest the value in R3
	LOAD 1(LB), R4	; loading i into memory
	LOAD 2(LB), R5	; loading j into memory
	LOAD -3(LB), R1	; [saving] loading dest into memory
	LOAD 0(R1), R0	; loading size 1d of dest into memory
	LOAD 1(R1), R0	; loading size 2d of dest into memory
	MUL R0, R4
	ADD R5, R4
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[216, 16]-----
; --------EndAssignOp--------[216, 16]-----
; --------BeginAssignOp--------[217, 16]-----
; --------StartBinaryOp--------[217, 20]-----
	LOAD 1(LB), R3	; loading i into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[217, 20]-----
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[217, 16]-----
	BRA while_begin24
while_end24:
; --------BeginAssignOp--------[219, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 1(LB)	;  Assiging a value to i
	LOAD R3, R2	;  Return value of the assignement of =iand storing it into R2
; --------EndAssignOp--------[219, 12]-----
; --------BeginAssignOp--------[220, 12]-----
; --------StartBinaryOp--------[220, 16]-----
	LOAD 2(LB), R3	; loading j into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[220, 16]-----
	STORE R3, 2(LB)	;  Assiging a value to j
	LOAD R3, R2	;  Return value of the assignement of =jand storing it into R2
; --------EndAssignOp--------[220, 12]-----
	BRA while_begin23
while_end23:
fin.Math.copyIntFloat2DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : dimensionIncompatible with label =  code.Math.dimensionIncompatible--------
code.Math.dimensionIncompatible:
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	WSTR "Erreur de dimension"
	WNL
; --------BeginMethodCall--------[226, 8]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 19(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[226, 8]-----
fin.Math.dimensionIncompatible:
	POP R2	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : throwError with label =  code.Math.throwError--------
code.Math.throwError:
;  ---------ClassBodyAsmCodeGeneration------
ERROR 
fin.Math.throwError:
	RTS
; ---------------------------------------------------
; ----------------- class : Sum -------------------
; ---------------------------------------------------
; ------------Init method for class = Sum--------
init.Sum:
	LOAD -2(LB), R0	; Placing the current class = Sum adresse in the the stack before calling parent 
	PUSH R0	; Placing this = Sum into the stack
	BSR init.Math	; Calling the initialisation method of parent classMath
	SUBSP #1
	RTS
; ------------Code for method : sommeIntInt1D with label =  code.Sum.sommeIntInt1D--------
code.Sum.sommeIntInt1D:
	ADDSP #1
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIterator and loading it into memory
; --------StartBinaryOp--------[6, 12]-----
; --------BeginSelection--------[6, 12]-----
	LOAD -3(LB), R2	; loading table1 into memory
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[6, 12]-----
; --------BeginSelection--------[6, 29]-----
	LOAD -4(LB), R3	; loading table2 into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[6, 29]-----
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[6, 12]-----
; ---------Startif-----------[6, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else9
while_begin25:
; --------StartBinaryOp--------[7, 19]-----
	LOAD 1(LB), R2	; loading tableIterator into memory
; --------BeginSelection--------[7, 35]-----
	LOAD -3(LB), R3	; loading table1 into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[7, 35]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[7, 19]-----
	CMP #1, R2
	BNE while_end25
; --------BeginAssignOp--------[8, 16]-----
; --------StartBinaryOp--------[8, 40]-----
; --------StartGetTableElements--------[8, 40]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table1 into memory at register R3
	LOAD 1(LB), R4	; loading tableIterator into memory
	LOAD -3(LB), R1	; loading table1 into memory
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	LOAD 1(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[8, 40]-----
; --------StartGetTableElements--------[8, 64]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table2 into memory at register R4
	LOAD 1(LB), R5	; loading tableIterator into memory
	LOAD -4(LB), R1	; loading table2 into memory
	LOAD 0(R1), R0	; loading size 1d of table2 into memory
	LOAD 1(R1, R5), R0
	LOAD R0, R4
; --------EndGetTableElements--------[8, 64]-----
	ADD R4, R3
; --------EndBinaryOp--------[8, 40]-----
; --------StartStoreTableElements--------[8, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table1 the value in R3
	LOAD 1(LB), R4	; loading tableIterator into memory
	LOAD -3(LB), R1	; [saving] loading table1 into memory
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	LOAD R4, R0
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[8, 16]-----
; --------EndAssignOp--------[8, 16]-----
; --------BeginAssignOp--------[9, 16]-----
; --------StartBinaryOp--------[9, 32]-----
	LOAD 1(LB), R3	; loading tableIterator into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[9, 32]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIterator
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorand storing it into R2
; --------EndAssignOp--------[9, 16]-----
	BRA while_begin25
while_end25:
	BRA end_ifthenelse_9
else9:
	WSTR "Les deux matrices doivent √™tre de la m√™me taille pour la somme de matrices"
	WNL
; --------BeginMethodCall--------[14, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[14, 12]-----
end_ifthenelse_9:
; ---------Endif-----------
fin.Sum.sommeIntInt1D:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : sommeIntInt2D with label =  code.Sum.sommeIntInt2D--------
code.Sum.sommeIntInt2D:
	ADDSP #2
	PUSH R6	; Pushing and poping registers used in the method
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIteratorY and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable tableIteratorX and loading it into memory
; --------StartAND--------[21, 12]-----
; --------StartBinaryOp--------[21, 13]-----
; --------BeginSelection--------[21, 13]-----
	LOAD -3(LB), R2	; loading table1 into memory
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[21, 13]-----
; --------BeginSelection--------[21, 30]-----
	LOAD -4(LB), R3	; loading table2 into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[21, 30]-----
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[21, 13]-----
	CMP #0, R2	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_5	; [AND] checking if the first element is false
; --------StartBinaryOp--------[21, 49]-----
; --------BeginSelection--------[21, 49]-----
	LOAD -3(LB), R3	; loading table1 into memory
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[21, 49]-----
; --------BeginSelection--------[21, 66]-----
	LOAD -4(LB), R4	; loading table2 into memory
	LOAD 1(R4), R4	; Loading the field size2D into a register 
; --------BeginSelection--------[21, 66]-----
	CMP R4, R3	; Comparing registers for Equals operation 
	SEQ R3	; Placing Equals result into the register  
; --------EndBinaryOp--------[21, 49]-----
	CMP #0, R3	; [AND]Comparing in the right branch 
	BNE AND_Success_id5	; [AND] checking if the first element is true
End_And_False_Id_5:
	LOAD #0, R2	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id5	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id5:
QUIT_AND_Called_When_Fail_id5:
; --------EndAND--------[21, 12]-----
; ---------Startif-----------[21, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else10
while_begin26:
; --------StartBinaryOp--------[22, 19]-----
	LOAD 1(LB), R2	; loading tableIteratorY into memory
; --------BeginSelection--------[22, 36]-----
	LOAD -3(LB), R3	; loading table1 into memory
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[22, 36]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[22, 19]-----
	CMP #1, R2
	BNE while_end26
while_begin27:
; --------StartBinaryOp--------[23, 23]-----
	LOAD 2(LB), R2	; loading tableIteratorX into memory
; --------BeginSelection--------[23, 40]-----
	LOAD -3(LB), R3	; loading table1 into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[23, 40]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[23, 23]-----
	CMP #1, R2
	BNE while_end27
; --------BeginAssignOp--------[24, 20]-----
; --------StartBinaryOp--------[24, 61]-----
; --------StartGetTableElements--------[24, 61]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table1 into memory at register R3
	LOAD 1(LB), R4	; loading tableIteratorY into memory
	LOAD 2(LB), R5	; loading tableIteratorX into memory
	LOAD -3(LB), R1	; loading table1 into memory
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	LOAD 1(R1), R0	; loading size 2d of table1 into memory
	MUL R0, R4
	ADD R5, R4
	LOAD 2(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[24, 61]-----
; --------StartGetTableElements--------[24, 102]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table2 into memory at register R4
	LOAD 1(LB), R5	; loading tableIteratorY into memory
	LOAD 2(LB), R6	; loading tableIteratorX into memory
	LOAD -4(LB), R1	; loading table2 into memory
	LOAD 0(R1), R0	; loading size 1d of table2 into memory
	LOAD 1(R1), R0	; loading size 2d of table2 into memory
	MUL R0, R5
	ADD R6, R5
	LOAD 2(R1, R5), R0
	LOAD R0, R4
; --------EndGetTableElements--------[24, 102]-----
	ADD R4, R3
; --------EndBinaryOp--------[24, 61]-----
; --------StartStoreTableElements--------[24, 20]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table1 the value in R3
	LOAD 1(LB), R4	; loading tableIteratorY into memory
	LOAD 2(LB), R5	; loading tableIteratorX into memory
	LOAD -3(LB), R1	; [saving] loading table1 into memory
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	LOAD 1(R1), R0	; loading size 2d of table1 into memory
	MUL R0, R4
	ADD R5, R4
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[24, 20]-----
; --------EndAssignOp--------[24, 20]-----
; --------BeginAssignOp--------[25, 20]-----
; --------StartBinaryOp--------[25, 37]-----
	LOAD 2(LB), R3	; loading tableIteratorX into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[25, 37]-----
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[25, 20]-----
	BRA while_begin27
while_end27:
; --------BeginAssignOp--------[27, 16]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[27, 16]-----
; --------BeginAssignOp--------[28, 16]-----
; --------StartBinaryOp--------[28, 33]-----
	LOAD 1(LB), R3	; loading tableIteratorY into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[28, 33]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorY
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorYand storing it into R2
; --------EndAssignOp--------[28, 16]-----
	BRA while_begin26
while_end26:
	BRA end_ifthenelse_10
else10:
	WSTR "Les deux matrices doivent √™tre de la m√™me taille pour la somme de matrices"
	WNL
; --------BeginMethodCall--------[33, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[33, 12]-----
end_ifthenelse_10:
; ---------Endif-----------
fin.Sum.sommeIntInt2D:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	POP R6	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : sommeFloatInt1D with label =  code.Sum.sommeFloatInt1D--------
code.Sum.sommeFloatInt1D:
	ADDSP #1
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIterator and loading it into memory
; --------StartBinaryOp--------[39, 12]-----
; --------BeginSelection--------[39, 12]-----
	LOAD -3(LB), R2	; loading table1 into memory
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[39, 12]-----
; --------BeginSelection--------[39, 29]-----
	LOAD -4(LB), R3	; loading table2 into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[39, 29]-----
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[39, 12]-----
; ---------Startif-----------[39, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else11
while_begin28:
; --------StartBinaryOp--------[40, 19]-----
	LOAD 1(LB), R2	; loading tableIterator into memory
; --------BeginSelection--------[40, 35]-----
	LOAD -3(LB), R3	; loading table1 into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[40, 35]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[40, 19]-----
	CMP #1, R2
	BNE while_end28
; --------BeginAssignOp--------[41, 16]-----
; --------StartBinaryOp--------[41, 40]-----
; --------StartGetTableElements--------[41, 40]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table1 into memory at register R3
	LOAD 1(LB), R4	; loading tableIterator into memory
	LOAD -3(LB), R1	; loading table1 into memory
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	LOAD 1(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[41, 40]-----
; --------StartGetTableElements--------[41, 72]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table2 into memory at register R4
	LOAD 1(LB), R5	; loading tableIterator into memory
	LOAD -4(LB), R1	; loading table2 into memory
	LOAD 0(R1), R0	; loading size 1d of table2 into memory
	LOAD 1(R1, R5), R0
	LOAD R0, R4
; --------EndGetTableElements--------[41, 72]-----
	FLOAT R4, R4
	ADD R4, R3
; --------EndBinaryOp--------[41, 40]-----
; --------StartStoreTableElements--------[41, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table1 the value in R3
	LOAD 1(LB), R4	; loading tableIterator into memory
	LOAD -3(LB), R1	; [saving] loading table1 into memory
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	LOAD R4, R0
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[41, 16]-----
; --------EndAssignOp--------[41, 16]-----
; --------BeginAssignOp--------[42, 16]-----
; --------StartBinaryOp--------[42, 32]-----
	LOAD 1(LB), R3	; loading tableIterator into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[42, 32]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIterator
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorand storing it into R2
; --------EndAssignOp--------[42, 16]-----
	BRA while_begin28
while_end28:
	BRA end_ifthenelse_11
else11:
	WSTR "Les deux matrices doivent √™tre de la m√™me taille pour la somme de matrices"
	WNL
; --------BeginMethodCall--------[47, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[47, 12]-----
end_ifthenelse_11:
; ---------Endif-----------
fin.Sum.sommeFloatInt1D:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : sommeFloatInt2D with label =  code.Sum.sommeFloatInt2D--------
code.Sum.sommeFloatInt2D:
	ADDSP #2
	PUSH R6	; Pushing and poping registers used in the method
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIteratorY and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable tableIteratorX and loading it into memory
; --------StartAND--------[54, 12]-----
; --------StartBinaryOp--------[54, 13]-----
; --------BeginSelection--------[54, 13]-----
	LOAD -3(LB), R2	; loading table1 into memory
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[54, 13]-----
; --------BeginSelection--------[54, 30]-----
	LOAD -4(LB), R3	; loading table2 into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[54, 30]-----
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[54, 13]-----
	CMP #0, R2	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_6	; [AND] checking if the first element is false
; --------StartBinaryOp--------[54, 49]-----
; --------BeginSelection--------[54, 49]-----
	LOAD -3(LB), R3	; loading table1 into memory
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[54, 49]-----
; --------BeginSelection--------[54, 66]-----
	LOAD -4(LB), R4	; loading table2 into memory
	LOAD 1(R4), R4	; Loading the field size2D into a register 
; --------BeginSelection--------[54, 66]-----
	CMP R4, R3	; Comparing registers for Equals operation 
	SEQ R3	; Placing Equals result into the register  
; --------EndBinaryOp--------[54, 49]-----
	CMP #0, R3	; [AND]Comparing in the right branch 
	BNE AND_Success_id6	; [AND] checking if the first element is true
End_And_False_Id_6:
	LOAD #0, R2	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id6	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id6:
QUIT_AND_Called_When_Fail_id6:
; --------EndAND--------[54, 12]-----
; ---------Startif-----------[54, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else12
while_begin29:
; --------StartBinaryOp--------[55, 19]-----
	LOAD 1(LB), R2	; loading tableIteratorY into memory
; --------BeginSelection--------[55, 36]-----
	LOAD -3(LB), R3	; loading table1 into memory
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[55, 36]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[55, 19]-----
	CMP #1, R2
	BNE while_end29
while_begin30:
; --------StartBinaryOp--------[56, 23]-----
	LOAD 2(LB), R2	; loading tableIteratorX into memory
; --------BeginSelection--------[56, 40]-----
	LOAD -3(LB), R3	; loading table1 into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[56, 40]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[56, 23]-----
	CMP #1, R2
	BNE while_end30
; --------BeginAssignOp--------[57, 20]-----
; --------StartBinaryOp--------[57, 61]-----
; --------StartGetTableElements--------[57, 61]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table1 into memory at register R3
	LOAD 1(LB), R4	; loading tableIteratorY into memory
	LOAD 2(LB), R5	; loading tableIteratorX into memory
	LOAD -3(LB), R1	; loading table1 into memory
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	LOAD 1(R1), R0	; loading size 2d of table1 into memory
	MUL R0, R4
	ADD R5, R4
	LOAD 2(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[57, 61]-----
; --------StartGetTableElements--------[57, 110]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table2 into memory at register R4
	LOAD 1(LB), R5	; loading tableIteratorY into memory
	LOAD 2(LB), R6	; loading tableIteratorX into memory
	LOAD -4(LB), R1	; loading table2 into memory
	LOAD 0(R1), R0	; loading size 1d of table2 into memory
	LOAD 1(R1), R0	; loading size 2d of table2 into memory
	MUL R0, R5
	ADD R6, R5
	LOAD 2(R1, R5), R0
	LOAD R0, R4
; --------EndGetTableElements--------[57, 110]-----
	FLOAT R4, R4
	ADD R4, R3
; --------EndBinaryOp--------[57, 61]-----
; --------StartStoreTableElements--------[57, 20]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table1 the value in R3
	LOAD 1(LB), R4	; loading tableIteratorY into memory
	LOAD 2(LB), R5	; loading tableIteratorX into memory
	LOAD -3(LB), R1	; [saving] loading table1 into memory
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	LOAD 1(R1), R0	; loading size 2d of table1 into memory
	MUL R0, R4
	ADD R5, R4
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[57, 20]-----
; --------EndAssignOp--------[57, 20]-----
; --------BeginAssignOp--------[58, 20]-----
; --------StartBinaryOp--------[58, 37]-----
	LOAD 2(LB), R3	; loading tableIteratorX into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[58, 37]-----
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[58, 20]-----
	BRA while_begin30
while_end30:
; --------BeginAssignOp--------[60, 16]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[60, 16]-----
; --------BeginAssignOp--------[61, 16]-----
; --------StartBinaryOp--------[61, 33]-----
	LOAD 1(LB), R3	; loading tableIteratorY into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[61, 33]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorY
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorYand storing it into R2
; --------EndAssignOp--------[61, 16]-----
	BRA while_begin29
while_end29:
	BRA end_ifthenelse_12
else12:
	WSTR "Les deux matrices doivent √™tre de la m√™me taille pour la somme de matrices"
	WNL
; --------BeginMethodCall--------[66, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[66, 12]-----
end_ifthenelse_12:
; ---------Endif-----------
fin.Sum.sommeFloatInt2D:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	POP R6	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : sommeIntFloat1D with label =  code.Sum.sommeIntFloat1D--------
code.Sum.sommeIntFloat1D:
	ADDSP #1
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIterator and loading it into memory
; --------StartBinaryOp--------[72, 12]-----
; --------BeginSelection--------[72, 12]-----
	LOAD -3(LB), R2	; loading table1 into memory
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[72, 12]-----
; --------BeginSelection--------[72, 29]-----
	LOAD -4(LB), R3	; loading table2 into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[72, 29]-----
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[72, 12]-----
; ---------Startif-----------[72, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else13
while_begin31:
; --------StartBinaryOp--------[73, 19]-----
	LOAD 1(LB), R2	; loading tableIterator into memory
; --------BeginSelection--------[73, 35]-----
	LOAD -3(LB), R3	; loading table1 into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[73, 35]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[73, 19]-----
	CMP #1, R2
	BNE while_end31
; --------BeginAssignOp--------[74, 16]-----
; --------StartBinaryOp--------[74, 40]-----
; --------StartGetTableElements--------[74, 40]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table1 into memory at register R3
	LOAD 1(LB), R4	; loading tableIterator into memory
	LOAD -3(LB), R1	; loading table1 into memory
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	LOAD 1(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[74, 40]-----
; --------StartGetTableElements--------[74, 70]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table2 into memory at register R4
	LOAD 1(LB), R5	; loading tableIterator into memory
	LOAD -4(LB), R1	; loading table2 into memory
	LOAD 0(R1), R0	; loading size 1d of table2 into memory
	LOAD 1(R1, R5), R0
	LOAD R0, R4
; --------EndGetTableElements--------[74, 70]-----
	INT R4, R4
	ADD R4, R3
; --------EndBinaryOp--------[74, 40]-----
; --------StartStoreTableElements--------[74, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table1 the value in R3
	LOAD 1(LB), R4	; loading tableIterator into memory
	LOAD -3(LB), R1	; [saving] loading table1 into memory
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	LOAD R4, R0
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[74, 16]-----
; --------EndAssignOp--------[74, 16]-----
; --------BeginAssignOp--------[75, 16]-----
; --------StartBinaryOp--------[75, 32]-----
	LOAD 1(LB), R3	; loading tableIterator into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[75, 32]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIterator
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorand storing it into R2
; --------EndAssignOp--------[75, 16]-----
	BRA while_begin31
while_end31:
	BRA end_ifthenelse_13
else13:
	WSTR "Les deux matrices doivent √™tre de la m√™me taille pour la somme de matrices"
	WNL
; --------BeginMethodCall--------[80, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[80, 12]-----
end_ifthenelse_13:
; ---------Endif-----------
fin.Sum.sommeIntFloat1D:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : sommeIntFloat2D with label =  code.Sum.sommeIntFloat2D--------
code.Sum.sommeIntFloat2D:
	ADDSP #2
	PUSH R6	; Pushing and poping registers used in the method
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIteratorY and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable tableIteratorX and loading it into memory
; --------StartAND--------[87, 12]-----
; --------StartBinaryOp--------[87, 13]-----
; --------BeginSelection--------[87, 13]-----
	LOAD -3(LB), R2	; loading table1 into memory
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[87, 13]-----
; --------BeginSelection--------[87, 30]-----
	LOAD -4(LB), R3	; loading table2 into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[87, 30]-----
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[87, 13]-----
	CMP #0, R2	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_7	; [AND] checking if the first element is false
; --------StartBinaryOp--------[87, 49]-----
; --------BeginSelection--------[87, 49]-----
	LOAD -3(LB), R3	; loading table1 into memory
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[87, 49]-----
; --------BeginSelection--------[87, 66]-----
	LOAD -4(LB), R4	; loading table2 into memory
	LOAD 1(R4), R4	; Loading the field size2D into a register 
; --------BeginSelection--------[87, 66]-----
	CMP R4, R3	; Comparing registers for Equals operation 
	SEQ R3	; Placing Equals result into the register  
; --------EndBinaryOp--------[87, 49]-----
	CMP #0, R3	; [AND]Comparing in the right branch 
	BNE AND_Success_id7	; [AND] checking if the first element is true
End_And_False_Id_7:
	LOAD #0, R2	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id7	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id7:
QUIT_AND_Called_When_Fail_id7:
; --------EndAND--------[87, 12]-----
; ---------Startif-----------[87, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else14
while_begin32:
; --------StartBinaryOp--------[88, 19]-----
	LOAD 1(LB), R2	; loading tableIteratorY into memory
; --------BeginSelection--------[88, 36]-----
	LOAD -3(LB), R3	; loading table1 into memory
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[88, 36]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[88, 19]-----
	CMP #1, R2
	BNE while_end32
while_begin33:
; --------StartBinaryOp--------[89, 23]-----
	LOAD 2(LB), R2	; loading tableIteratorX into memory
; --------BeginSelection--------[89, 40]-----
	LOAD -3(LB), R3	; loading table1 into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[89, 40]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[89, 23]-----
	CMP #1, R2
	BNE while_end33
; --------BeginAssignOp--------[90, 20]-----
; --------StartBinaryOp--------[90, 61]-----
; --------StartGetTableElements--------[90, 61]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table1 into memory at register R3
	LOAD 1(LB), R4	; loading tableIteratorY into memory
	LOAD 2(LB), R5	; loading tableIteratorX into memory
	LOAD -3(LB), R1	; loading table1 into memory
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	LOAD 1(R1), R0	; loading size 2d of table1 into memory
	MUL R0, R4
	ADD R5, R4
	LOAD 2(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[90, 61]-----
; --------StartGetTableElements--------[90, 108]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table2 into memory at register R4
	LOAD 1(LB), R5	; loading tableIteratorY into memory
	LOAD 2(LB), R6	; loading tableIteratorX into memory
	LOAD -4(LB), R1	; loading table2 into memory
	LOAD 0(R1), R0	; loading size 1d of table2 into memory
	LOAD 1(R1), R0	; loading size 2d of table2 into memory
	MUL R0, R5
	ADD R6, R5
	LOAD 2(R1, R5), R0
	LOAD R0, R4
; --------EndGetTableElements--------[90, 108]-----
	INT R4, R4
	ADD R4, R3
; --------EndBinaryOp--------[90, 61]-----
; --------StartStoreTableElements--------[90, 20]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table1 the value in R3
	LOAD 1(LB), R4	; loading tableIteratorY into memory
	LOAD 2(LB), R5	; loading tableIteratorX into memory
	LOAD -3(LB), R1	; [saving] loading table1 into memory
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	LOAD 1(R1), R0	; loading size 2d of table1 into memory
	MUL R0, R4
	ADD R5, R4
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[90, 20]-----
; --------EndAssignOp--------[90, 20]-----
; --------BeginAssignOp--------[91, 20]-----
; --------StartBinaryOp--------[91, 37]-----
	LOAD 2(LB), R3	; loading tableIteratorX into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[91, 37]-----
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[91, 20]-----
	BRA while_begin33
while_end33:
; --------BeginAssignOp--------[93, 16]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[93, 16]-----
; --------BeginAssignOp--------[94, 16]-----
; --------StartBinaryOp--------[94, 33]-----
	LOAD 1(LB), R3	; loading tableIteratorY into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[94, 33]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorY
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorYand storing it into R2
; --------EndAssignOp--------[94, 16]-----
	BRA while_begin32
while_end32:
	BRA end_ifthenelse_14
else14:
	WSTR "Les deux matrices doivent √™tre de la m√™me taille pour la somme de matrices"
	WNL
; --------BeginMethodCall--------[99, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[99, 12]-----
end_ifthenelse_14:
; ---------Endif-----------
fin.Sum.sommeIntFloat2D:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	POP R6	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : sommeFloatFloat1D with label =  code.Sum.sommeFloatFloat1D--------
code.Sum.sommeFloatFloat1D:
	ADDSP #1
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIterator and loading it into memory
; --------StartBinaryOp--------[105, 12]-----
; --------BeginSelection--------[105, 12]-----
	LOAD -3(LB), R2	; loading table1 into memory
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[105, 12]-----
; --------BeginSelection--------[105, 29]-----
	LOAD -4(LB), R3	; loading table2 into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[105, 29]-----
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[105, 12]-----
; ---------Startif-----------[105, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else15
while_begin34:
; --------StartBinaryOp--------[106, 19]-----
	LOAD 1(LB), R2	; loading tableIterator into memory
; --------BeginSelection--------[106, 35]-----
	LOAD -3(LB), R3	; loading table1 into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[106, 35]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[106, 19]-----
	CMP #1, R2
	BNE while_end34
; --------BeginAssignOp--------[107, 16]-----
; --------StartBinaryOp--------[107, 40]-----
; --------StartGetTableElements--------[107, 40]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table1 into memory at register R3
	LOAD 1(LB), R4	; loading tableIterator into memory
	LOAD -3(LB), R1	; loading table1 into memory
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	LOAD 1(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[107, 40]-----
; --------StartGetTableElements--------[107, 64]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table2 into memory at register R4
	LOAD 1(LB), R5	; loading tableIterator into memory
	LOAD -4(LB), R1	; loading table2 into memory
	LOAD 0(R1), R0	; loading size 1d of table2 into memory
	LOAD 1(R1, R5), R0
	LOAD R0, R4
; --------EndGetTableElements--------[107, 64]-----
	ADD R4, R3
; --------EndBinaryOp--------[107, 40]-----
; --------StartStoreTableElements--------[107, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table1 the value in R3
	LOAD 1(LB), R4	; loading tableIterator into memory
	LOAD -3(LB), R1	; [saving] loading table1 into memory
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	LOAD R4, R0
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[107, 16]-----
; --------EndAssignOp--------[107, 16]-----
; --------BeginAssignOp--------[108, 16]-----
; --------StartBinaryOp--------[108, 32]-----
	LOAD 1(LB), R3	; loading tableIterator into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[108, 32]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIterator
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorand storing it into R2
; --------EndAssignOp--------[108, 16]-----
	BRA while_begin34
while_end34:
	BRA end_ifthenelse_15
else15:
	WSTR "Les deux matrices doivent √™tre de la m√™me taille pour la somme de matrices"
	WNL
; --------BeginMethodCall--------[113, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[113, 12]-----
end_ifthenelse_15:
; ---------Endif-----------
fin.Sum.sommeFloatFloat1D:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : sommeFloatFloat2D with label =  code.Sum.sommeFloatFloat2D--------
code.Sum.sommeFloatFloat2D:
	ADDSP #2
	PUSH R6	; Pushing and poping registers used in the method
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIteratorY and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable tableIteratorX and loading it into memory
; --------StartAND--------[120, 12]-----
; --------StartBinaryOp--------[120, 13]-----
; --------BeginSelection--------[120, 13]-----
	LOAD -3(LB), R2	; loading table1 into memory
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[120, 13]-----
; --------BeginSelection--------[120, 30]-----
	LOAD -4(LB), R3	; loading table2 into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[120, 30]-----
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[120, 13]-----
	CMP #0, R2	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_8	; [AND] checking if the first element is false
; --------StartBinaryOp--------[120, 49]-----
; --------BeginSelection--------[120, 49]-----
	LOAD -3(LB), R3	; loading table1 into memory
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[120, 49]-----
; --------BeginSelection--------[120, 66]-----
	LOAD -4(LB), R4	; loading table2 into memory
	LOAD 1(R4), R4	; Loading the field size2D into a register 
; --------BeginSelection--------[120, 66]-----
	CMP R4, R3	; Comparing registers for Equals operation 
	SEQ R3	; Placing Equals result into the register  
; --------EndBinaryOp--------[120, 49]-----
	CMP #0, R3	; [AND]Comparing in the right branch 
	BNE AND_Success_id8	; [AND] checking if the first element is true
End_And_False_Id_8:
	LOAD #0, R2	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id8	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id8:
QUIT_AND_Called_When_Fail_id8:
; --------EndAND--------[120, 12]-----
; ---------Startif-----------[120, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else16
while_begin35:
; --------StartBinaryOp--------[121, 19]-----
	LOAD 1(LB), R2	; loading tableIteratorY into memory
; --------BeginSelection--------[121, 36]-----
	LOAD -3(LB), R3	; loading table1 into memory
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[121, 36]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[121, 19]-----
	CMP #1, R2
	BNE while_end35
while_begin36:
; --------StartBinaryOp--------[122, 23]-----
	LOAD 2(LB), R2	; loading tableIteratorX into memory
; --------BeginSelection--------[122, 40]-----
	LOAD -3(LB), R3	; loading table1 into memory
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[122, 40]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[122, 23]-----
	CMP #1, R2
	BNE while_end36
; --------BeginAssignOp--------[123, 20]-----
; --------StartBinaryOp--------[123, 61]-----
; --------StartGetTableElements--------[123, 61]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table1 into memory at register R3
	LOAD 1(LB), R4	; loading tableIteratorY into memory
	LOAD 2(LB), R5	; loading tableIteratorX into memory
	LOAD -3(LB), R1	; loading table1 into memory
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	LOAD 1(R1), R0	; loading size 2d of table1 into memory
	MUL R0, R4
	ADD R5, R4
	LOAD 2(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[123, 61]-----
; --------StartGetTableElements--------[123, 102]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table2 into memory at register R4
	LOAD 1(LB), R5	; loading tableIteratorY into memory
	LOAD 2(LB), R6	; loading tableIteratorX into memory
	LOAD -4(LB), R1	; loading table2 into memory
	LOAD 0(R1), R0	; loading size 1d of table2 into memory
	LOAD 1(R1), R0	; loading size 2d of table2 into memory
	MUL R0, R5
	ADD R6, R5
	LOAD 2(R1, R5), R0
	LOAD R0, R4
; --------EndGetTableElements--------[123, 102]-----
	ADD R4, R3
; --------EndBinaryOp--------[123, 61]-----
; --------StartStoreTableElements--------[123, 20]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table1 the value in R3
	LOAD 1(LB), R4	; loading tableIteratorY into memory
	LOAD 2(LB), R5	; loading tableIteratorX into memory
	LOAD -3(LB), R1	; [saving] loading table1 into memory
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	LOAD 1(R1), R0	; loading size 2d of table1 into memory
	MUL R0, R4
	ADD R5, R4
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[123, 20]-----
; --------EndAssignOp--------[123, 20]-----
; --------BeginAssignOp--------[124, 20]-----
; --------StartBinaryOp--------[124, 37]-----
	LOAD 2(LB), R3	; loading tableIteratorX into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[124, 37]-----
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[124, 20]-----
	BRA while_begin36
while_end36:
; --------BeginAssignOp--------[126, 16]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[126, 16]-----
; --------BeginAssignOp--------[127, 16]-----
; --------StartBinaryOp--------[127, 33]-----
	LOAD 1(LB), R3	; loading tableIteratorY into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[127, 33]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorY
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorYand storing it into R2
; --------EndAssignOp--------[127, 16]-----
	BRA while_begin35
while_end35:
	BRA end_ifthenelse_16
else16:
	WSTR "Les deux matrices doivent √™tre de la m√™me taille pour la somme de matrices"
	WNL
; --------BeginMethodCall--------[132, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[132, 12]-----
end_ifthenelse_16:
; ---------Endif-----------
fin.Sum.sommeFloatFloat2D:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	POP R6	; Pushing and poping registers used in the method
	RTS
; -------------------------------------
;        Method equal
; -------------------------------------
; ------------------Start generateCodeForObjectEquals location:
code.Object.equals:
	LOAD -2(LB), R0
	CMP -3(LB), R0
	SEQ R0	; Comparaison this et param√®tre d'equals
fin.Object.equals:
	RTS
init.Object:
	RTS
; -------------------------------------
;        Liste Erreur
; -------------------------------------
stack_overflow_error:
	WSTR "Error: stack_overflow_error"
	WNL
	ERROR
; end main program
