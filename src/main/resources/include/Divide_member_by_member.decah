#include "Math.decah"

class DivMember extends Math{
    void divMbIntInt1D(int[] table1, int[] table2){
        int tableIterator = 0;
        if (table1.size1D == table2.size1D){
            while (tableIterator < table1.size1D ){
                table1[tableIterator] = table1[tableIterator] / table2[tableIterator];
                tableIterator = tableIterator + 1;
            }
        }
        else{
            println("Les deux matrices doivent être de la même taille pour la division membre par membre");
            dimensionIncompatible();
        }
    }

    void divMbIntInt2D(int[][] table1, int[][] table2){
        int tableIteratorY = 0;
        int tableIteratorX = 0;
        if ((table1.size1D == table2.size1D) && (table1.size2D == table2.size2D)){
            while (tableIteratorY < table1.size2D ){
                while (tableIteratorX < table1.size1D ){
                    table1[tableIteratorY][tableIteratorX] = table1[tableIteratorY][tableIteratorX] / table2[tableIteratorY][tableIteratorX];
                    tableIteratorX = tableIteratorX + 1;
                }
                tableIteratorX = 0;
                tableIteratorY = tableIteratorY + 1;
            }
        }
        else{
            println("Les deux matrices doivent être de la même taille pour la division membre par membre");
            dimensionIncompatible();
        }
    }

    void divMbFloatInt1D(float[] table1, int[] table2){
        int tableIterator = 0;
        if (table1.size1D == table2.size1D){
            while (tableIterator < table1.size1D ){
                table1[tableIterator] = table1[tableIterator] / (float)(table2[tableIterator]);
                tableIterator = tableIterator + 1;
            }
        }
        else{
            println("Les deux matrices doivent être de la même taille pour la division membre par membre");
            dimensionIncompatible();
        }
    }

    void divMbFloatInt2D(float[][] table1, int[][] table2){
        int tableIteratorY = 0;
        int tableIteratorX = 0;
        if ((table1.size1D == table2.size1D) && (table1.size2D == table2.size2D)){
            while (tableIteratorY < table1.size2D ){
                while (tableIteratorX < table1.size1D ){
                    table1[tableIteratorY][tableIteratorX] = table1[tableIteratorY][tableIteratorX] / (float)(table2[tableIteratorY][tableIteratorX]);
                    tableIteratorX = tableIteratorX + 1;
                }
                tableIteratorX = 0;
                tableIteratorY = tableIteratorY + 1;
            }
        }
        else{
            println("Les deux matrices doivent être de la même taille pour la division membre par membre");
            dimensionIncompatible();
        }
    }

    void divMbIntFloat1D(int[] table1, float[] table2){
        int tableIterator = 0;
        if (table1.size1D == table2.size1D){
            while (tableIterator < table1.size1D ){
                table1[tableIterator] = table1[tableIterator] / (int)(table2[tableIterator]);
                tableIterator = tableIterator + 1;
            }
        }
        else{
            println("Les deux matrices doivent être de la même taille pour la division membre par membre");
            dimensionIncompatible();
        }
    }

    void divMbIntFloat2D(int[][] table1, float[][] table2){
        int tableIteratorY = 0;
        int tableIteratorX = 0;
        if ((table1.size1D == table2.size1D) && (table1.size2D == table2.size2D)){
            while (tableIteratorY < table1.size2D ){
                while (tableIteratorX < table1.size1D ){
                    table1[tableIteratorY][tableIteratorX] = table1[tableIteratorY][tableIteratorX] / (int)(table2[tableIteratorY][tableIteratorX]);
                    tableIteratorX = tableIteratorX + 1;
                }
                tableIteratorX = 0;
                tableIteratorY = tableIteratorY + 1;
            }
        }
        else{
            println("Les deux matrices doivent être de la même taille pour la division membre par membre");
            dimensionIncompatible();
        }
    }

    void divMbFloatFloat1D(float[] table1, float[] table2){
        int tableIterator = 0;
        if (table1.size1D == table2.size1D){
            while (tableIterator < table1.size1D ){
                table1[tableIterator] = table1[tableIterator] / table2[tableIterator];
                tableIterator = tableIterator + 1;
            }
        }
        else{
            println("Les deux matrices doivent être de la même taille pour la division membre par membre");
            dimensionIncompatible();
        }
    }

    void divMbFloatFloat2D(float[][] table1, float[][] table2){
        int tableIteratorY = 0;
        int tableIteratorX = 0;
        if ((table1.size1D == table2.size1D) && (table1.size2D == table2.size2D)){
            while (tableIteratorY < table1.size2D ){
                while (tableIteratorX < table1.size1D ){
                    table1[tableIteratorY][tableIteratorX] = table1[tableIteratorY][tableIteratorX] / table2[tableIteratorY][tableIteratorX];
                    tableIteratorX = tableIteratorX + 1;
                }
                tableIteratorX = 0;
                tableIteratorY = tableIteratorY + 1;
            }
        }
        else{
            println("Les deux matrices doivent être de la même taille pour la division membre par membre");
            dimensionIncompatible();
        }
    }

}