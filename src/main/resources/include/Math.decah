// Grenoble INP - Ensimag projet GL -*- mode: java -*-
// Library for class Math of Deca, coded in Deca

class Math {

    void setInt1DTable(int[] table, int value){
        int tableIterator = 0;
        while (tableIterator < table.size1D ){
            table[tableIterator] = value;
            tableIterator = tableIterator + 1;
        }
    }

    void setInt2DTable(int[][] table, int value){
        int tableIteratorX = 0;
        int tableIteratorY = 0;
        while (tableIteratorY < table.size2D ){
            while (tableIteratorX < table.size1D ){
                table[tableIteratorX][tableIteratorY] = value;
                tableIteratorX = tableIteratorX + 1;
            }
            tableIteratorX = 0;
            tableIteratorY = tableIteratorY + 1;
        }
    }

    void setFloat1DTable(float[] table, float value){
        int tableIterator = 0;
        while (tableIterator < table.size1D ){
            table[tableIterator] = value;
            tableIterator = tableIterator + 1;
        }
    }

    void setFloat2DTable(float[][] table, float value){
        int tableIteratorX = 0;
        int tableIteratorY = 0;
        while (tableIteratorY < table.size2D ){
            while (tableIteratorX < table.size1D ){
                table[tableIteratorX][tableIteratorY] = value;
                tableIteratorX = tableIteratorX + 1;
            }
            tableIteratorX = 0;
            tableIteratorY = tableIteratorY + 1;
        }
    }

    void printInt1DTable(int[] table){
        int tableIterator = 0;
        println("--------------");
        print("Tableau1D = [");
        while (tableIterator < table.size1D ){
            print(table[tableIterator]," ,");
            tableIterator = tableIterator + 1;
        }
        print("]");
        println("--------------");
    }

    void printInt2DTable(int[][] table){
        int tableIteratorX = 0;
        int tableIteratorY = 0;
        println("--------------");
        print("Tableau2D = [");
        while (tableIteratorY < table.size2D ){
            while (tableIteratorX < table.size1D ){
                print(table[tableIteratorX][tableIteratorY]," ,");
                tableIteratorX = tableIteratorX + 1;
            }
            println("");
            tableIteratorX = 0;
            tableIteratorY = tableIteratorY + 1;
        }
        print("]");
        println("--------------");
    }

    void printFloat1DTable(float[] table){
        int tableIterator = 0;
        println("--------------");
        print("Tableau1D = [");
        while (tableIterator < table.size1D ){
            print(table[tableIterator]," ,");
            tableIterator = tableIterator + 1;
        }
        print("]");
        println("--------------");
    }

    void printFloat2DTable(float[][] table){
        int tableIteratorX = 0;
        int tableIteratorY = 0;
        println("--------------");
        print("Tableau2D = [");
        while (tableIteratorY < table.size2D ){
            while (tableIteratorX < table.size1D ){
                print(table[tableIteratorX][tableIteratorY]," ,");
                tableIteratorX = tableIteratorX + 1;
            }
            println("");
            tableIteratorX = 0;
            tableIteratorY = tableIteratorY + 1;
        }
        print("]");
        println("--------------");
    }

    void copyIntInt1DTable(int[] dest, int[] src){
        int i = 0;
        if(src.size1D > dest.size1D ){
            println("La taille du tableau copie doit être supérieure ou égale à la taille du tableau d'origine");
            dimensionIncompatible();
        }
        while(i < src.size1D){
            dest[i] = src[i];
            i = i + 1;
        }
    }

    void copyIntInt2DTable(int[][] dest, int[][] src){
        int i = 0;
        int j = 0;
        if(src.size1D > dest.size1D || src.size2D > dest.size2D){
            println("La taille du tableau copie doit être supérieure ou égale à la taille du tableau d'origine");
            dimensionIncompatible();
        }
        while (j < src.size2D){
            while (i < src.size1D){
                dest[i][j] = src[i][j];
                i = i +1;
            }
            i = 0;
            j = j + 1;
        }
    }

    void copyFloatFloat1DTable(float[] dest, float[] src){
        int i = 0;
        if(src.size1D > dest.size1D ){
            println("La taille du tableau copie doit être supérieure ou égale à la taille du tableau d'origine");
            dimensionIncompatible();
        }
        while(i < src.size1D){
            dest[i] = src[i];
            i = i + 1;
        }
    }

    void copyFloatFloat2DTable(float[][] dest, float[][] src){
        int i = 0;
        int j = 0;
        if(src.size1D > dest.size1D || src.size2D > dest.size2D){
            println("La taille du tableau copie doit être supérieure ou égale à la taille du tableau d'origine");
            dimensionIncompatible();
        }
        while (j < src.size2D){
            while (i < src.size1D){
                dest[i][j] = src[i][j];
                i = i +1;
            }
            i = 0;
            j = j + 1;
        }
    }

    void copyFloatInt1DTable(float[] dest, int[] src){
        int i = 0;
        if(src.size1D > dest.size1D ){
            println("La taille du tableau copie doit être supérieure ou égale à la taille du tableau d'origine");
            dimensionIncompatible();
        }
        while(i < src.size1D){
            dest[i] = (float)(src[i]);
            i = i + 1;
        }
    }

    void copyFloatInt2DTable(float[][] dest, int[][] src){
        int i = 0;
        int j = 0;
        if(src.size1D > dest.size1D || src.size2D > dest.size2D){
            println("La taille du tableau copie doit être supérieure ou égale à la taille du tableau d'origine");
            dimensionIncompatible();
        }
        while (j < src.size2D){
            while (i < src.size1D){
                dest[i][j] = (float)(src[i][j]);
                i = i +1;
            }
            i = 0;
            j = j + 1;
        }
    }

    void copyIntFloat1DTable(int[] dest, int[] src){
        int i = 0;
        if(src.size1D > dest.size1D ){
            println("La taille du tableau copie doit être supérieure ou égale à la taille du tableau d'origine");
            dimensionIncompatible();
        }
        while(i < src.size1D){
            dest[i] = (int)(src[i]);
            i = i + 1;
        }
    }

    void copyIntFloat2DTable(float[][] dest, float[][] src){
        int i = 0;
        int j = 0;
        if(src.size1D > dest.size1D || src.size2D > dest.size2D){
            println("La taille du tableau copie doit être supérieure ou égale à la taille du tableau d'origine");
            dimensionIncompatible();
        }
        while (j < src.size2D){
            while (i < src.size1D){
                dest[i][j] = (int)(src[i][j]);
                i = i +1;
            }
            i = 0;
            j = j + 1;
        }
    }

    void dimensionIncompatible(){
        println("Erreur de dimension");
        throwError();
    }

    void throwError()
        asm ("ERROR ");
}

// End of Deca Math library
