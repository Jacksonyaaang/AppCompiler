class Math {

    void setInt1DTable(int[] table, int value){
        int tableIterator = 0;
        while (tableIterator < table.size1D ){
            table[tableIterator] = value;
            tableIterator = tableIterator + 1;
        }
    }

    void setInt2DTable(int[][] table, int value){
        int tableIteratorX = 0;
        int tableIteratorY = 0;
        while (tableIteratorY < table.size2D ){
            while (tableIteratorX < table.size1D ){
                table[tableIteratorX][tableIteratorY] = value;
                tableIteratorX = tableIteratorX + 1;
            }
            tableIteratorX = 0;
            tableIteratorY = tableIteratorY + 1;
        }
    }

    void set1DTableIntValue(int[] table, int value, int index){
        table[index] = value;
    }

    void set2DTableIntValue(int[][] table, int value, int indexX, int indexY){
        table[indexX][indexY] = value;
    }

    void setFloat1DTable(float[] table, float value){
        int tableIterator = 0;
        while (tableIterator < table.size1D ){
            table[tableIterator] = value;
            tableIterator = tableIterator + 1;
        }
    }

    void setFloat2DTable(float[][] table, float value){
        int tableIteratorX = 0;
        int tableIteratorY = 0;
        while (tableIteratorY < table.size2D ){
            while (tableIteratorX < table.size1D ){
                table[tableIteratorX][tableIteratorY] = value;
                tableIteratorX = tableIteratorX + 1;
            }
            tableIteratorX = 0;
            tableIteratorY = tableIteratorY + 1;
        }
    }

    void set1DTableFloatValue(float[] table, float value, int index){
        table[index] = value;
    }

    void set2DTableFloatValue(float[][] table, float value, int indexX, int indexY){
        table[indexX][indexY] = value;
    }

    void printInt1DTable(int[] table){
        int tableIterator = 0;
        println("--------------");
        print("Tableau1D = [");
        while (tableIterator < table.size1D ){
            print(table[tableIterator]," ,");
            tableIterator = tableIterator + 1;
        }
        print("]");
        println("--------------");
    }

    void printInt2DTable(int[][] table){
        int tableIteratorX = 0;
        int tableIteratorY = 0;
        println("--------------");
        print("Tableau2D = [");
        while (tableIteratorY < table.size2D ){
            while (tableIteratorX < table.size1D ){
                print(table[tableIteratorX][tableIteratorY]," ,");
                tableIteratorX = tableIteratorX + 1;
            }
            println("");
            tableIteratorX = 0;
            tableIteratorY = tableIteratorY + 1;
        }
        print("]");
        println("--------------");
    }

    void printFloat1DTable(float[] table){
        int tableIterator = 0;
        println("--------------");
        print("Tableau1D = [");
        while (tableIterator < table.size1D ){
            print(table[tableIterator]," ,");
            tableIterator = tableIterator + 1;
        }
        print("]");
        println("--------------");
    }

    void printFloat2DTable(float[][] table){
        int tableIteratorX = 0;
        int tableIteratorY = 0;
        println("--------------");
        print("Tableau2D = [");
        while (tableIteratorY < table.size2D ){
            while (tableIteratorX < table.size1D ){
                print(table[tableIteratorX][tableIteratorY]," ,");
                tableIteratorX = tableIteratorX + 1;
            }
            println("");
            tableIteratorX = 0;
            tableIteratorY = tableIteratorY + 1;
        }
        print("]");
        println("--------------");
    }
}

class Sum extends Math{
    void sommeIntInt1D(int[] table1, int[] table2){
        int tableIterator = 0;
        if (table1.size1D == table2.size1D){
            while (tableIterator < table1.size1D ){
                table1[tableIterator] = table1[tableIterator] + table2[tableIterator];
                tableIterator = tableIterator + 1;
            }
        }
        else{
            dimensionIncompatible();
        }
    }

    void sommeIntInt2D(int[][] table1, int[][] table2){
        int tableIteratorY = 0;
        int tableIteratorX = 0;
        if ((table1.size1D == table2.size1D) && (table1.size2D == table2.size2D)){
            while (tableIteratorY < table1.size2D ){
                while (tableIteratorX < table1.size1D ){
                    table1[tableIteratorY][tableIteratorX] = table1[tableIteratorY][tableIteratorX] + table2[tableIteratorY][tableIteratorX];
                    tableIteratorX = tableIteratorX + 1;
                }
                tableIteratorX = 0;
                tableIteratorY = tableIteratorY + 1;
            }
        }
        else{
            dimensionIncompatible();
        }
    }

    void sommeFloatInt1D(float[] table1, int[] table2){
        int tableIterator = 0;
        if (table1.size1D == table2.size1D){
            while (tableIterator < table1.size1D ){
                table1[tableIterator] = table1[tableIterator] + (float)(table2[tableIterator]);
                tableIterator = tableIterator + 1;
            }
        }
        else{
            dimensionIncompatible();
        }
    }

    void sommeFloatInt2D(float[][] table1, int[][] table2){
        int tableIteratorY = 0;
        int tableIteratorX = 0;
        if ((table1.size1D == table2.size1D) && (table1.size2D == table2.size2D)){
            while (tableIteratorY < table1.size2D ){
                while (tableIteratorX < table1.size1D ){
                    table1[tableIteratorY][tableIteratorX] = table1[tableIteratorY][tableIteratorX] + (float)(table2[tableIteratorY][tableIteratorX]);
                    tableIteratorX = tableIteratorX + 1;
                }
                tableIteratorX = 0;
                tableIteratorY = tableIteratorY + 1;
            }
        }
        else{
            dimensionIncompatible();
        }
    }

    void sommeIntFloat1D(int[] table1, float[] table2){
        int tableIterator = 0;
        if (table1.size1D == table2.size1D){
            while (tableIterator < table1.size1D ){
                table1[tableIterator] = table1[tableIterator] + (int)(table2[tableIterator]);
                tableIterator = tableIterator + 1;
            }
        }
        else{
            dimensionIncompatible();
        }
    }

    void sommeIntFloat2D(int[][] table1, float[][] table2){
        int tableIteratorY = 0;
        int tableIteratorX = 0;
        if ((table1.size1D == table2.size1D) && (table1.size2D == table2.size2D)){
            while (tableIteratorY < table1.size2D ){
                while (tableIteratorX < table1.size1D ){
                    table1[tableIteratorY][tableIteratorX] = table1[tableIteratorY][tableIteratorX] + (int)(table2[tableIteratorY][tableIteratorX]);
                    tableIteratorX = tableIteratorX + 1;
                }
                tableIteratorX = 0;
                tableIteratorY = tableIteratorY + 1;
            }
        }
        else{
            dimensionIncompatible();
        }
    }

    void sommeFloatFloat1D(float[] table1, float[] table2){
        int tableIterator = 0;
        if (table1.size1D == table2.size1D){
            while (tableIterator < table1.size1D ){
                table1[tableIterator] = table1[tableIterator] + table2[tableIterator];
                tableIterator = tableIterator + 1;
            }
        }
        else{
            dimensionIncompatible();
        }
    }

    void sommeFloatFloat2D(float[][] table1, float[][] table2){
        int tableIteratorY = 0;
        int tableIteratorX = 0;
        if ((table1.size1D == table2.size1D) && (table1.size2D == table2.size2D)){
            while (tableIteratorY < table1.size2D ){
                while (tableIteratorX < table1.size1D ){
                    table1[tableIteratorY][tableIteratorX] = table1[tableIteratorY][tableIteratorX] + table2[tableIteratorY][tableIteratorX];
                    tableIteratorX = tableIteratorX + 1;
                }
                tableIteratorX = 0;
                tableIteratorY = tableIteratorY + 1;
            }
        }
        else{
            dimensionIncompatible();
        }
    }

    void dimensionIncompatible(){
        println("Erreur de dimension");
    }

}

{

        Sum matrixsum1D = new Sum();
        int[] x = new int[7];
        float[] y = new float[7];
        Sum matrixsum2D = new Sum();
        int[][] a = new int[3][3];
        int[][] d = new int[3][3];
        float[][] b = new float[3][3];
        float[][] c = new float[3][3];

        println("Test somme tableau 1D");
        matrixsum1D.setInt1DTable(x,5);
        matrixsum1D.setFloat1DTable(y,6.0);
        matrixsum1D.printInt1DTable(x);
        matrixsum1D.printFloat1DTable(y);
        matrixsum1D.sommeIntFloat1D(x,y);
        matrixsum1D.printInt1DTable(x);

        println("Test somme tableau 2D a");
        matrixsum2D.setInt2DTable(a,5);
        matrixsum2D.setFloat2DTable(b,6.0);
        matrixsum2D.printInt2DTable(a);
        matrixsum2D.printFloat2DTable(b);
        matrixsum2D.sommeIntFloat2D(a,b);
        matrixsum2D.printInt2DTable(a);

        println("somme float int b");
        matrixsum2D.sommeFloatInt2D(b,a);
        matrixsum2D.printFloat2DTable(b);

        println("somme float float b");
        matrixsum2D.setFloat2DTable(c,10.5);
        matrixsum2D.sommeFloatFloat2D(b,c);
        matrixsum2D.printFloat2DTable(b);

        println("somme int int a");
        matrixsum2D.setInt2DTable(d,2);
        matrixsum2D.sommeIntInt2D(a,d);
        matrixsum2D.printInt2DTable(a);

        matrixsum2D.set2DTableIntValue(a,5,0,0);
        matrixsum2D.set2DTableIntValue(a,3,2,2);
        matrixsum2D.printInt2DTable(a);

        matrixsum2D.set2DTableFloatValue(b,3.2,0,0);
        matrixsum2D.set2DTableFloatValue(b,5.9,2,2);
        matrixsum2D.printFloat2DTable(b);

        b[0][1] = 3*b[0][0];
        matrixsum2D.printFloat2DTable(b);

        }