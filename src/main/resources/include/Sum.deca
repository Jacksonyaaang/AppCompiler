class Math {

    void setInt1DTable(int[] table, int value){
        int tableIterator = 0;
        while (tableIterator < table.size1D ){
            table[tableIterator] = value;
            tableIterator = tableIterator + 1;
        }
    }

    void setInt2DTable(int[][] table, int value){
        int tableIteratorX = 0;
        int tableIteratorY = 0;
        while (tableIteratorY < table.size1D ){
            while (tableIteratorX < table.size1D ){
                table[tableIteratorX][tableIteratorY] = value;
                tableIteratorX = tableIteratorX + 1;
            }
            tableIteratorY = tableIteratorY + 1;
        }
    }

    void set1DTableIntValue(int[] table, int value, int index){
        table[index] = value;
    }

    void set2DTableIntValue(int[][] table, int value, int indexX, int indexY){
        table[indexX][indexY] = value;
    }

    void printInt1DTable(int[] table){
        int tableIterator = 0;
        println("--------------");
        print("Tableau1D = [");
        while (tableIterator < table.size1D ){
            print(table[tableIterator]," ,");
            tableIterator = tableIterator + 1;
        }
        print("]");
        println("--------------");
    }

    void printInt2DTable(int[][] table){
        int tableIteratorX = 0;
        int tableIteratorY = 0;
        println("--------------");
        print("Tableau2D = [");
        while (tableIteratorY < table.size1D ){
            while (tableIteratorX < table.size1D-1 ){
                print(table[tableIteratorX][tableIteratorY]," ,");
                tableIteratorX = tableIteratorX + 1;
            }
            println(table[tableIteratorY][tableIteratorX]);
            tableIteratorY = tableIteratorY + 1;
        }
        print("]");
        println("--------------");
    }
}

class Sum extends Math{
    void sommeIntInt1D(int[] table1, int[] table2){
        int tableIterator = 0;
        if (table1.size1D == table2.size1D){
            while (tableIterator < table1.size1D ){
                table1[tableIterator] = table1[tableIterator] + table2[tableIterator];
                tableIterator = tableIterator + 1;
            }
        }
        else{
            dimensionIncompatible();
        }
    }

    void sommeIntInt2D(int[][] table1, int[][] table2){
        int tableIteratorY = 0;
        int tableIteratorX = 0;
        if ((table1.size1D == table2.size1D) && (table1.size2D == table2.size2D)){
            while (tableIteratorY < table1.size1D ){
                while (tableIteratorX < table1.size2D ){
                    table1[tableIteratorY][tableIteratorX] = table1[tableIteratorY][tableIteratorX] + table2[tableIteratorY][tableIteratorX];
                    tableIteratorX = tableIteratorX + 1;
                }
                tableIteratorY = tableIteratorY + 1;
            }
        }
        else{
            dimensionIncompatible();
        }
    }

    void sommeFloatInt1D(float[] table1, int[] table2){
        int tableIterator = 0;
        if (table1.size1D == table2.size1D){
            while (tableIterator < table1.size1D ){
                table1[tableIterator] = table1[tableIterator] + (float)(table2[tableIterator]);
                tableIterator = tableIterator + 1;
            }
        }
        else{
            dimensionIncompatible();
        }
    }

    void sommeFloatInt2D(int[][] table1, int[][] table2){
        int tableIteratorY = 0;
        int tableIteratorX = 0;
        if ((table1.size1D == table2.size1D) && (table1.size2D == table2.size2D)){
            while (tableIteratorY < table1.size1D ){
                while (tableIteratorX < table1.size2D ){
                    table1[tableIteratorY][tableIteratorX] = table1[tableIteratorY][tableIteratorX] + (float)(table2[tableIteratorY][tableIteratorX]);
                    tableIteratorX = tableIteratorX + 1;
                }
                tableIteratorY = tableIteratorY + 1;
            }
        }
        else{
            dimensionIncompatible();
        }
    }

    void sommeIntFloat1D(float[] table1, int[] table2){
        int tableIterator = 0;
        if (table1.size1D == table2.size1D){
            while (tableIterator < table1.size1D ){
                table1[tableIterator] = table1[tableIterator] + (int)(table2[tableIterator]);
                tableIterator = tableIterator + 1;
            }
        }
        else{
            dimensionIncompatible();
        }
    }

    void sommeIntFloat2D(int[][] table1, int[][] table2){
        int tableIteratorY = 0;
        int tableIteratorX = 0;
        if ((table1.size1D == table2.size1D) && (table1.size2D == table2.size2D)){
            while (tableIteratorY < table1.size1D ){
                while (tableIteratorX < table1.size2D ){
                    table1[tableIteratorY][tableIteratorX] = table1[tableIteratorY][tableIteratorX] + (int)(table2[tableIteratorY][tableIteratorX]);
                    tableIteratorX = tableIteratorX + 1;
                }
                tableIteratorY = tableIteratorY + 1;
            }
        }
        else{
            dimensionIncompatible();
        }
    }

    void sommeFloatFloat1D(float[] table1, int[] table2){
        int tableIterator = 0;
        if (table1.size1D == table2.size1D){
            while (tableIterator < table1.size1D ){
                table1[tableIterator] = table1[tableIterator] + table2[tableIterator];
                tableIterator = tableIterator + 1;
            }
        }
        else{
            dimensionIncompatible();
        }
    }

    void sommeFloatFloat2D(int[][] table1, int[][] table2){
        int tableIteratorY = 0;
        int tableIteratorX = 0;
        if ((table1.size1D == table2.size1D) && (table1.size2D == table2.size2D)){
            while (tableIteratorY < table1.size1D ){
                while (tableIteratorX < table1.size2D ){
                    table1[tableIteratorY][tableIteratorX] = table1[tableIteratorY][tableIteratorX] + table2[tableIteratorY][tableIteratorX];
                    tableIteratorX = tableIteratorX + 1;
                }
                tableIteratorY = tableIteratorY + 1;
            }
        }
        else{
            dimensionIncompatible();
        }
    }

    void dimensionIncompatible(){
        println("Erreur de dimension");
        throwError();
    }

}

{
    int[] x = new int[7];
    float[] y = new float[7];
    matrixManipulation.setInt1DTable(x,5);
    matrixManipulation.setInt1DTable(y,6.0);
    matrixManipulation.printInt1DTable(x);
    matrixManipulation.printInt1DTable(y);
    matrixManipulation.sommeIntFloat1D(x,y);
    matrixManipulation.printInt1DTable(x);
    /*
    //int z;

        int[] y = new int[3];
        y[1] = 2;
        y[0] = 2*2*2*2*y[1];
        println("STEP 2 DONE");
        println(y[0] );
        println("STEP 3 DONE");

    int[][] x = new int[3][2];

    println("STEP 1 DONE");
    println(x.size1D);
    println("STEP size 1 DONE");

    x.size2D = 5;
    println(z);

    println(x.size2D);
    println("STEP size 2 DONE");

   A a = new A();
    a.x = 2;
    x.size1D = 5;


    x[0][0] = 1;
    x[0][0] = 2*x[0][0];
    println("STEP 1 prime DONE");
    println(x[0][0]);


    x[1][1] = 2*2*2*2*x[0][0];
    println("STEP 2 DONE");
    println(x[1][1]);
    println("STEP 3 DONE");
    */


}