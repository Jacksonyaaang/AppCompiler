	TSTO #13
	BOV stack_overflow_error
	ADDSP #10
; start main program
; -------------------------------------
;        Method Table
; -------------------------------------
	LOAD #null, R0
	STORE R0, 6(GB)
	LOAD code.Object.equals, R0
	STORE R0, 7(GB)
	LEA 6(GB), R0
	STORE R0, 8(GB)
	LOAD code.Object.equals, R0
	STORE R0, 9(GB)
	LOAD code.MatrixTraitement.calculate, R0
	STORE R0, 10(GB)
; -------------------------------------
;        Main program
; -------------------------------------
; Beginning of main instructions:
; --------StartNew--------[143, 30]-----
; [New][loadItemintoRegister] loading new of calss =  MatrixTraitement into memory at register R2
	NEW #1, R2
	BOV heap_overflow_error
	LEA 8(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.MatrixTraitement
	POP R2
; --------EndNew--------[143, 30]-----
	STORE R2, 1(GB)	; Initializing the variable mm and loading it into memory
; --------StartNewTable--------[144, 29]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  float[][] into memory at register R2
	LOAD #3, R3	; loading 3 into memory
	CMP #1, R3
	BLT int_allocation_table_must_be_strictly_positive
	LOAD #3, R4	; loading 3 into memory
	CMP #1, R4
	BLT int_allocation_table_must_be_strictly_positive
	LOAD R3, R1
	MUL R4, R1
	ADD #2, R1
	NEW R1, R0
	BOV heap_overflow_error
	STORE R3, 0(R0)
	STORE R4, 1(R0)
	LOAD R0, R2
; --------EndNewTable--------[144, 29]-----
	STORE R2, 2(GB)	; Initializing the variable matInver and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 4(GB)	; Initializing the variable itrX and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 5(GB)	; Initializing the variable itrY and loading it into memory
; --------BeginAssignOp--------[149, 8]-----
	LOAD #1, R3	; loading 1 into memory
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[149, 8]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	LOAD #0, R4	; loading 0 into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD #0, R5	; loading 0 into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 2(GB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	WSTR "-----saving---"
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4	; adding index_y to size1D*index_x
	PUSH R1
	LOAD R4, R1
	WINT
	WNL
	POP R1
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[149, 8]-----
; --------EndAssignOp--------[149, 8]-----
; --------BeginAssignOp--------[150, 8]-----
	LOAD #2, R3	; loading 2 into memory
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[150, 8]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	LOAD #0, R4	; loading 0 into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD #1, R5	; loading 1 into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 2(GB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	WSTR "-----saving---"
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4	; adding index_y to size1D*index_x
	PUSH R1
	LOAD R4, R1
	WINT
	WNL
	POP R1
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[150, 8]-----
; --------EndAssignOp--------[150, 8]-----
; --------BeginAssignOp--------[151, 8]-----
	LOAD #3, R3	; loading 3 into memory
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[151, 8]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	LOAD #0, R4	; loading 0 into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD #2, R5	; loading 2 into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 2(GB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	WSTR "-----saving---"
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4	; adding index_y to size1D*index_x
	PUSH R1
	LOAD R4, R1
	WINT
	WNL
	POP R1
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[151, 8]-----
; --------EndAssignOp--------[151, 8]-----
; --------BeginAssignOp--------[152, 8]-----
	LOAD #0, R3	; loading 0 into memory
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[152, 8]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	LOAD #1, R4	; loading 1 into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD #0, R5	; loading 0 into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 2(GB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	WSTR "-----saving---"
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4	; adding index_y to size1D*index_x
	PUSH R1
	LOAD R4, R1
	WINT
	WNL
	POP R1
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[152, 8]-----
; --------EndAssignOp--------[152, 8]-----
; --------BeginAssignOp--------[153, 8]-----
	LOAD #1, R3	; loading 1 into memory
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[153, 8]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	LOAD #1, R4	; loading 1 into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD #1, R5	; loading 1 into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 2(GB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	WSTR "-----saving---"
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4	; adding index_y to size1D*index_x
	PUSH R1
	LOAD R4, R1
	WINT
	WNL
	POP R1
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[153, 8]-----
; --------EndAssignOp--------[153, 8]-----
; --------BeginAssignOp--------[154, 8]-----
	LOAD #4, R3	; loading 4 into memory
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[154, 8]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	LOAD #1, R4	; loading 1 into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD #2, R5	; loading 2 into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 2(GB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	WSTR "-----saving---"
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4	; adding index_y to size1D*index_x
	PUSH R1
	LOAD R4, R1
	WINT
	WNL
	POP R1
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[154, 8]-----
; --------EndAssignOp--------[154, 8]-----
; --------BeginAssignOp--------[155, 8]-----
	LOAD #5, R3	; loading 5 into memory
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[155, 8]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	LOAD #2, R4	; loading 2 into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD #0, R5	; loading 0 into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 2(GB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	WSTR "-----saving---"
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4	; adding index_y to size1D*index_x
	PUSH R1
	LOAD R4, R1
	WINT
	WNL
	POP R1
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[155, 8]-----
; --------EndAssignOp--------[155, 8]-----
; --------BeginAssignOp--------[156, 8]-----
	LOAD #6, R3	; loading 6 into memory
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[156, 8]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	LOAD #2, R4	; loading 2 into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD #1, R5	; loading 1 into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 2(GB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	WSTR "-----saving---"
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4	; adding index_y to size1D*index_x
	PUSH R1
	LOAD R4, R1
	WINT
	WNL
	POP R1
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[156, 8]-----
; --------EndAssignOp--------[156, 8]-----
; --------BeginAssignOp--------[157, 8]-----
	LOAD #4, R3	; loading 4 into memory
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[157, 8]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	LOAD #2, R4	; loading 2 into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD #2, R5	; loading 2 into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 2(GB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	WSTR "-----saving---"
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4	; adding index_y to size1D*index_x
	PUSH R1
	LOAD R4, R1
	WINT
	WNL
	POP R1
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[157, 8]-----
; --------EndAssignOp--------[157, 8]-----
; --------BeginAssignOp--------[159, 8]-----
; --------BeginMethodCall--------[159, 21]-----
	ADDSP #2
	LOAD 1(GB), R3	; loading mm into memory
	STORE R3, 0(SP)
	LOAD 2(GB), R3	; loading matInver into memory
	STORE R3, -1(SP)
	LOAD 0(SP), R3
	CMP #null, R3	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R3), R3
	BSR 2(R3)
	LOAD R0, R3
	SUBSP #2
; --------EndMethodCall--------[159, 21]-----
	STORE R3, 3(GB)	;  Assiging a value to testMatInver
	LOAD R3, R2	;  Return value of the assignement of =testMatInverand storing it into R2
; --------EndAssignOp--------[159, 8]-----
	HALT
; -------------------------------------
;        Classes
; -------------------------------------
; ---------------------------------------------------
; ----------------- class : MatrixTraitement -------------------
; ---------------------------------------------------
; ------------Init method for class = MatrixTraitement--------
init.MatrixTraitement:
	RTS
; ------------Code for method : calculate with label =  code.MatrixTraitement.calculate--------
code.MatrixTraitement.calculate:
	TSTO #16
	BOV stack_overflow_error
	ADDSP #11
	PUSH R6	; Pushing and poping registers used in the method
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------BeginSelection--------[6, 19]-----
	LOAD -3(LB), R2	; loading mat into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[6, 19]-----
	STORE R2, 1(LB)	; Initializing the variable size and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable indexRow and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 3(LB)	; Initializing the variable indexCol and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	FLOAT R2, R2	; Doing an unary minus
	STORE R2, 4(LB)	; Initializing the variable tempo and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	FLOAT R2, R2	; Doing an unary minus
	STORE R2, 5(LB)	; Initializing the variable tempoK and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	FLOAT R2, R2	; Doing an unary minus
	STORE R2, 6(LB)	; Initializing the variable buffer and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 7(LB)	; Initializing the variable k and loading it into memory
; --------StartNewTable--------[13, 29]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  float[][] into memory at register R2
	LOAD 1(LB), R3	; loading size into memory
	CMP #1, R3
	BLT int_allocation_table_must_be_strictly_positive
; --------StartBinaryOp--------[13, 45]-----
	LOAD #2, R4	; loading 2 into memory
	MUL 1(LB), R4
; --------EndBinaryOp--------[13, 45]-----
	CMP #1, R4
	BLT int_allocation_table_must_be_strictly_positive
	LOAD R3, R1
	MUL R4, R1
	ADD #2, R1
	NEW R1, R0
	BOV heap_overflow_error
	STORE R3, 0(R0)
	STORE R4, 1(R0)
	LOAD R0, R2
; --------EndNewTable--------[13, 29]-----
	STORE R2, 8(LB)	; Initializing the variable matInver and loading it into memory
; --------StartNewTable--------[14, 35]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  float[][] into memory at register R2
	LOAD 1(LB), R3	; loading size into memory
	CMP #1, R3
	BLT int_allocation_table_must_be_strictly_positive
	LOAD 1(LB), R4	; loading size into memory
	CMP #1, R4
	BLT int_allocation_table_must_be_strictly_positive
	LOAD R3, R1
	MUL R4, R1
	ADD #2, R1
	NEW R1, R0
	BOV heap_overflow_error
	STORE R3, 0(R0)
	STORE R4, 1(R0)
	LOAD R0, R2
; --------EndNewTable--------[14, 35]-----
	STORE R2, 9(LB)	; Initializing the variable matInverResult and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 10(LB)	; Initializing the variable inX and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 11(LB)	; Initializing the variable inY and loading it into memory
	LOAD 1(LB), R2	; loading size into memory
	LOAD R2, R1
	WINT
	WNL
while_begin1:
; --------StartBinaryOp--------[19, 15]-----
	LOAD 2(LB), R2	; loading indexRow into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[19, 15]-----
	CMP #1, R2
	BNE while_end1
; --------BeginAssignOp--------[20, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[20, 12]-----
while_begin2:
; --------StartBinaryOp--------[21, 18]-----
	LOAD 3(LB), R2	; loading indexCol into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[21, 18]-----
	CMP #1, R2
	BNE while_end2
; --------StartBinaryOp--------[22, 19]-----
	LOAD 3(LB), R2	; loading indexCol into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[22, 19]-----
; ---------Startif-----------[22, 16]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else1
; --------BeginAssignOp--------[23, 20]-----
; --------StartGetTableElements--------[23, 49]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  mat into memory at register R3
	LOAD 2(LB), R4	; loading indexRow into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 3(LB), R5	; loading indexCol into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading mat into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of mat into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	WSTR "-----selection---"
	LOAD 1(R1), R0	; loading size 2d of mat into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4
	PUSH R1
	LOAD R4, R1
	WINT
	WNL
	POP R1
	LOAD 2(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[23, 49]-----
; --------StartStoreTableElements--------[23, 20]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	LOAD 2(LB), R4	; loading indexRow into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 3(LB), R5	; loading indexCol into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	WSTR "-----saving---"
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4	; adding index_y to size1D*index_x
	PUSH R1
	LOAD R4, R1
	WINT
	WNL
	POP R1
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[23, 20]-----
; --------EndAssignOp--------[23, 20]-----
; --------StartGetTableElements--------[24, 26]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R2
	LOAD 2(LB), R3	; loading indexRow into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 3(LB), R4	; loading indexCol into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	WSTR "-----selection---"
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	MUL R0, R3
	ADD R4, R3
	PUSH R1
	LOAD R3, R1
	WINT
	WNL
	POP R1
	LOAD 2(R1, R3), R0
	LOAD R0, R2
; --------EndGetTableElements--------[24, 26]-----
	LOAD R2, R1
	WFLOAT
	WSTR "/"
	BRA end_ifthenelse_1
else1:
end_ifthenelse_1:
; ---------Endif-----------
; --------BeginAssignOp--------[26, 16]-----
; --------StartBinaryOp--------[26, 25]-----
	LOAD 3(LB), R3	; loading indexCol into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[26, 25]-----
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[26, 16]-----
	BRA while_begin2
while_end2:
	WNL
; --------BeginAssignOp--------[29, 12]-----
; --------StartBinaryOp--------[29, 21]-----
	LOAD 2(LB), R3	; loading indexRow into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[29, 21]-----
	STORE R3, 2(LB)	;  Assiging a value to indexRow
	LOAD R3, R2	;  Return value of the assignement of =indexRowand storing it into R2
; --------EndAssignOp--------[29, 12]-----
	BRA while_begin1
while_end1:
	LOAD 1(LB), R2	; loading size into memory
	LOAD R2, R1
	WINT
	WNL
; --------BeginAssignOp--------[33, 8]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 2(LB)	;  Assiging a value to indexRow
	LOAD R3, R2	;  Return value of the assignement of =indexRowand storing it into R2
; --------EndAssignOp--------[33, 8]-----
; --------BeginAssignOp--------[34, 8]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[34, 8]-----
while_begin3:
; --------StartBinaryOp--------[35, 15]-----
	LOAD 2(LB), R2	; loading indexRow into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[35, 15]-----
	CMP #1, R2
	BNE while_end3
; --------BeginAssignOp--------[36, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[36, 12]-----
while_begin4:
; --------StartBinaryOp--------[37, 18]-----
	LOAD 3(LB), R2	; loading indexCol into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[37, 18]-----
	CMP #1, R2
	BNE while_end4
; --------StartGetTableElements--------[39, 22]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R2
	LOAD 2(LB), R3	; loading indexRow into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 3(LB), R4	; loading indexCol into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	WSTR "-----selection---"
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	MUL R0, R3
	ADD R4, R3
	PUSH R1
	LOAD R3, R1
	WINT
	WNL
	POP R1
	LOAD 2(R1, R3), R0
	LOAD R0, R2
; --------EndGetTableElements--------[39, 22]-----
	LOAD R2, R1
	WFLOAT
	WSTR "/"
; --------BeginAssignOp--------[40, 16]-----
; --------StartBinaryOp--------[40, 25]-----
	LOAD 3(LB), R3	; loading indexCol into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[40, 25]-----
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[40, 16]-----
	BRA while_begin4
while_end4:
	WNL
; --------BeginAssignOp--------[43, 12]-----
; --------StartBinaryOp--------[43, 21]-----
	LOAD 2(LB), R3	; loading indexRow into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[43, 21]-----
	STORE R3, 2(LB)	;  Assiging a value to indexRow
	LOAD R3, R2	;  Return value of the assignement of =indexRowand storing it into R2
; --------EndAssignOp--------[43, 12]-----
	BRA while_begin3
while_end3:
; --------BeginAssignOp--------[46, 8]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 2(LB)	;  Assiging a value to indexRow
	LOAD R3, R2	;  Return value of the assignement of =indexRowand storing it into R2
; --------EndAssignOp--------[46, 8]-----
; --------BeginAssignOp--------[47, 8]-----
; --------StartBinaryOp--------[47, 19]-----
	LOAD 1(LB), R3	; loading size into memory
	LOAD #1, R4	; loading 1 into memory
	SUB R4, R3
; --------EndBinaryOp--------[47, 19]-----
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[47, 8]-----
while_begin5:
; --------StartBinaryOp--------[48, 15]-----
	LOAD 2(LB), R2	; loading indexRow into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[48, 15]-----
	CMP #1, R2
	BNE while_end5
; --------BeginAssignOp--------[49, 12]-----
	LOAD #1, R3	; loading 1 into memory
	FLOAT R3, R3	; Doing an unary minus
; --------StartStoreTableElements--------[49, 12]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	LOAD 2(LB), R4	; loading indexRow into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 3(LB), R5	; loading indexCol into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	WSTR "-----saving---"
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4	; adding index_y to size1D*index_x
	PUSH R1
	LOAD R4, R1
	WINT
	WNL
	POP R1
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[49, 12]-----
; --------EndAssignOp--------[49, 12]-----
; --------BeginAssignOp--------[50, 12]-----
; --------StartBinaryOp--------[50, 23]-----
	LOAD 2(LB), R3	; loading indexRow into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[50, 23]-----
	STORE R3, 2(LB)	;  Assiging a value to indexRow
	LOAD R3, R2	;  Return value of the assignement of =indexRowand storing it into R2
; --------EndAssignOp--------[50, 12]-----
; --------BeginAssignOp--------[51, 12]-----
; --------StartBinaryOp--------[51, 23]-----
	LOAD 3(LB), R3	; loading indexCol into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[51, 23]-----
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[51, 12]-----
	BRA while_begin5
while_end5:
; --------BeginAssignOp--------[55, 8]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 10(LB)	;  Assiging a value to inX
	LOAD R3, R2	;  Return value of the assignement of =inXand storing it into R2
; --------EndAssignOp--------[55, 8]-----
; --------BeginAssignOp--------[56, 8]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 11(LB)	;  Assiging a value to inY
	LOAD R3, R2	;  Return value of the assignement of =inYand storing it into R2
; --------EndAssignOp--------[56, 8]-----
; --------BeginSelection--------[57, 16]-----
	LOAD 8(LB), R2	; loading matInver into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[57, 16]-----
	LOAD R2, R1
	WINT
	WSTR " // size//"
; --------BeginSelection--------[57, 46]-----
	LOAD 8(LB), R3	; loading matInver into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[57, 46]-----
	LOAD R3, R1
	WINT
	WNL
while_begin6:
; --------StartBinaryOp--------[58, 15]-----
	LOAD 10(LB), R2	; loading inX into memory
; --------BeginSelection--------[58, 21]-----
	LOAD 8(LB), R3	; loading matInver into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[58, 21]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[58, 15]-----
	CMP #1, R2
	BNE while_end6
; --------BeginAssignOp--------[59, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 11(LB)	;  Assiging a value to inY
	LOAD R3, R2	;  Return value of the assignement of =inYand storing it into R2
; --------EndAssignOp--------[59, 12]-----
while_begin7:
; --------StartBinaryOp--------[60, 19]-----
	LOAD 11(LB), R2	; loading inY into memory
; --------BeginSelection--------[60, 25]-----
	LOAD 8(LB), R3	; loading matInver into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[60, 25]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[60, 19]-----
	CMP #1, R2
	BNE while_end7
	WSTR "x = "
	LOAD 10(LB), R2	; loading inX into memory
	LOAD R2, R1
	WINT
	WSTR " y = "
	LOAD 11(LB), R3	; loading inY into memory
	LOAD R3, R1
	WINT
	WNL
	WSTR " "
; --------BeginAssignOp--------[64, 16]-----
; --------StartBinaryOp--------[64, 22]-----
	LOAD 11(LB), R3	; loading inY into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[64, 22]-----
	STORE R3, 11(LB)	;  Assiging a value to inY
	LOAD R3, R2	;  Return value of the assignement of =inYand storing it into R2
; --------EndAssignOp--------[64, 16]-----
	BRA while_begin7
while_end7:
	WNL
; --------BeginAssignOp--------[67, 12]-----
; --------StartBinaryOp--------[67, 18]-----
	LOAD 10(LB), R3	; loading inX into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[67, 18]-----
	STORE R3, 10(LB)	;  Assiging a value to inX
	LOAD R3, R2	;  Return value of the assignement of =inXand storing it into R2
; --------EndAssignOp--------[67, 12]-----
	BRA while_begin6
while_end6:
	WSTR "--------"
; --------BeginAssignOp--------[74, 8]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[74, 8]-----
; --------BeginAssignOp--------[75, 8]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 2(LB)	;  Assiging a value to indexRow
	LOAD R3, R2	;  Return value of the assignement of =indexRowand storing it into R2
; --------EndAssignOp--------[75, 8]-----
while_begin8:
; --------StartBinaryOp--------[76, 15]-----
	LOAD 2(LB), R2	; loading indexRow into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[76, 15]-----
	CMP #1, R2
	BNE while_end8
; --------BeginAssignOp--------[77, 12]-----
; --------StartGetTableElements--------[77, 18]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R3
	LOAD 2(LB), R4	; loading indexRow into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R5	; loading indexRow into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	WSTR "-----selection---"
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4
	PUSH R1
	LOAD R4, R1
	WINT
	WNL
	POP R1
	LOAD 2(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[77, 18]-----
	STORE R3, 4(LB)	;  Assiging a value to tempo
	LOAD R3, R2	;  Return value of the assignement of =tempoand storing it into R2
; --------EndAssignOp--------[77, 12]-----
; --------BeginAssignOp--------[78, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[78, 12]-----
while_begin9:
; --------StartBinaryOp--------[79, 18]-----
	LOAD 3(LB), R2	; loading indexCol into memory
; --------StartBinaryOp--------[79, 27]-----
	LOAD #2, R3	; loading 2 into memory
	MUL 1(LB), R3
; --------EndBinaryOp--------[79, 27]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[79, 18]-----
	CMP #1, R2
	BNE while_end9
; --------BeginAssignOp--------[80, 16]-----
; --------StartBinaryOp--------[80, 45]-----
; --------StartGetTableElements--------[80, 45]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R3
	LOAD 2(LB), R4	; loading indexRow into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 3(LB), R5	; loading indexCol into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	WSTR "-----selection---"
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4
	PUSH R1
	LOAD R4, R1
	WINT
	WNL
	POP R1
	LOAD 2(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[80, 45]-----
	DIV 4(LB), R3
	BOV overflow_error	; Checking for overflow since the operation is between two floats 
; --------EndBinaryOp--------[80, 45]-----
; --------StartStoreTableElements--------[80, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	LOAD 2(LB), R4	; loading indexRow into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 3(LB), R5	; loading indexCol into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	WSTR "-----saving---"
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4	; adding index_y to size1D*index_x
	PUSH R1
	LOAD R4, R1
	WINT
	WNL
	POP R1
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[80, 16]-----
; --------EndAssignOp--------[80, 16]-----
; --------BeginAssignOp--------[82, 16]-----
; --------StartBinaryOp--------[82, 25]-----
	LOAD 3(LB), R3	; loading indexCol into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[82, 25]-----
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[82, 16]-----
	BRA while_begin9
while_end9:
; --------BeginAssignOp--------[87, 12]-----
; --------StartBinaryOp--------[87, 14]-----
	LOAD 2(LB), R3	; loading indexRow into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[87, 14]-----
	STORE R3, 7(LB)	;  Assiging a value to k
	LOAD R3, R2	;  Return value of the assignement of =kand storing it into R2
; --------EndAssignOp--------[87, 12]-----
while_begin10:
; --------StartBinaryOp--------[88, 19]-----
	LOAD 7(LB), R2	; loading k into memory
; --------BeginSelection--------[88, 21]-----
	LOAD 8(LB), R3	; loading matInver into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[88, 21]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[88, 19]-----
	CMP #1, R2
	BNE while_end10
; --------BeginAssignOp--------[89, 16]-----
; --------StartGetTableElements--------[89, 23]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R3
	LOAD 7(LB), R4	; loading k into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R5	; loading indexRow into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	WSTR "-----selection---"
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4
	PUSH R1
	LOAD R4, R1
	WINT
	WNL
	POP R1
	LOAD 2(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[89, 23]-----
	STORE R3, 5(LB)	;  Assiging a value to tempoK
	LOAD R3, R2	;  Return value of the assignement of =tempoKand storing it into R2
; --------EndAssignOp--------[89, 16]-----
; --------BeginAssignOp--------[90, 16]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[90, 16]-----
while_begin11:
; --------StartBinaryOp--------[91, 22]-----
	LOAD 3(LB), R2	; loading indexCol into memory
; --------BeginSelection--------[91, 31]-----
	LOAD 8(LB), R3	; loading matInver into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[91, 31]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[91, 22]-----
	CMP #1, R2
	BNE while_end11
; --------BeginAssignOp--------[92, 20]-----
; --------StartBinaryOp--------[92, 42]-----
; --------StartGetTableElements--------[92, 42]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R3
	LOAD 7(LB), R4	; loading k into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 3(LB), R5	; loading indexCol into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	WSTR "-----selection---"
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4
	PUSH R1
	LOAD R4, R1
	WINT
	WNL
	POP R1
	LOAD 2(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[92, 42]-----
; --------StartBinaryOp--------[92, 64]-----
; --------StartGetTableElements--------[92, 64]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R4
	LOAD 2(LB), R5	; loading indexRow into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 3(LB), R6	; loading indexCol into memory
	CMP #0, R6
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	WSTR "-----selection---"
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R6, R0
	BLE table_dimension_are_not_respected
	MUL R0, R5
	ADD R6, R5
	PUSH R1
	LOAD R5, R1
	WINT
	WNL
	POP R1
	LOAD 2(R1, R5), R0
	LOAD R0, R4
; --------EndGetTableElements--------[92, 64]-----
	MUL 5(LB), R4
	BOV overflow_error	; Checking for overflow since the operation is between two floats 
; --------EndBinaryOp--------[92, 64]-----
	SUB R4, R3
	BOV overflow_error	; Checking for overflow since the operation is between two floats 
; --------EndBinaryOp--------[92, 42]-----
; --------StartStoreTableElements--------[92, 20]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	LOAD 7(LB), R4	; loading k into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 3(LB), R5	; loading indexCol into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	WSTR "-----saving---"
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4	; adding index_y to size1D*index_x
	PUSH R1
	LOAD R4, R1
	WINT
	WNL
	POP R1
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[92, 20]-----
; --------EndAssignOp--------[92, 20]-----
; --------BeginAssignOp--------[94, 20]-----
; --------StartBinaryOp--------[94, 29]-----
	LOAD 3(LB), R3	; loading indexCol into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[94, 29]-----
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[94, 20]-----
	BRA while_begin11
while_end11:
; --------BeginAssignOp--------[97, 16]-----
; --------StartBinaryOp--------[97, 18]-----
	LOAD 7(LB), R3	; loading k into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[97, 18]-----
	STORE R3, 7(LB)	;  Assiging a value to k
	LOAD R3, R2	;  Return value of the assignement of =kand storing it into R2
; --------EndAssignOp--------[97, 16]-----
	BRA while_begin10
while_end10:
; --------BeginAssignOp--------[102, 12]-----
; --------StartBinaryOp--------[102, 21]-----
	LOAD 2(LB), R3	; loading indexRow into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[102, 21]-----
	STORE R3, 2(LB)	;  Assiging a value to indexRow
	LOAD R3, R2	;  Return value of the assignement of =indexRowand storing it into R2
; --------EndAssignOp--------[102, 12]-----
	BRA while_begin8
while_end8:
; --------BeginAssignOp--------[105, 8]-----
; --------StartBinaryOp--------[105, 17]-----
; --------BeginSelection--------[105, 17]-----
	LOAD 8(LB), R3	; loading matInver into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[105, 17]-----
	LOAD #1, R4	; loading 1 into memory
	SUB R4, R3
; --------EndBinaryOp--------[105, 17]-----
	STORE R3, 2(LB)	;  Assiging a value to indexRow
	LOAD R3, R2	;  Return value of the assignement of =indexRowand storing it into R2
; --------EndAssignOp--------[105, 8]-----
while_begin12:
; --------StartBinaryOp--------[106, 15]-----
	LOAD 2(LB), R2	; loading indexRow into memory
	LOAD #0, R3	; loading 0 into memory
	CMP R3, R2	; Comparing registers for GreaterOrEqual operation 
	SGE R2	; Placing GreaterOrEqual result into the register  
; --------EndBinaryOp--------[106, 15]-----
	CMP #1, R2
	BNE while_end12
; --------BeginAssignOp--------[107, 12]-----
; --------StartBinaryOp--------[107, 14]-----
	LOAD 2(LB), R3	; loading indexRow into memory
	LOAD #1, R4	; loading 1 into memory
	SUB R4, R3
; --------EndBinaryOp--------[107, 14]-----
	STORE R3, 7(LB)	;  Assiging a value to k
	LOAD R3, R2	;  Return value of the assignement of =kand storing it into R2
; --------EndAssignOp--------[107, 12]-----
while_begin13:
; --------StartBinaryOp--------[108, 18]-----
	LOAD 7(LB), R2	; loading k into memory
	LOAD #0, R3	; loading 0 into memory
	CMP R3, R2	; Comparing registers for GreaterOrEqual operation 
	SGE R2	; Placing GreaterOrEqual result into the register  
; --------EndBinaryOp--------[108, 18]-----
	CMP #1, R2
	BNE while_end13
; --------BeginAssignOp--------[109, 16]-----
; --------StartGetTableElements--------[109, 23]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R3
	LOAD 7(LB), R4	; loading k into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R5	; loading indexRow into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	WSTR "-----selection---"
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4
	PUSH R1
	LOAD R4, R1
	WINT
	WNL
	POP R1
	LOAD 2(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[109, 23]-----
	STORE R3, 6(LB)	;  Assiging a value to buffer
	LOAD R3, R2	;  Return value of the assignement of =bufferand storing it into R2
; --------EndAssignOp--------[109, 16]-----
; --------BeginAssignOp--------[110, 16]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[110, 16]-----
while_begin14:
; --------StartBinaryOp--------[111, 23]-----
	LOAD 3(LB), R2	; loading indexCol into memory
; --------BeginSelection--------[111, 32]-----
	LOAD 8(LB), R3	; loading matInver into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[111, 32]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[111, 23]-----
	CMP #1, R2
	BNE while_end14
; --------BeginAssignOp--------[112, 20]-----
; --------StartBinaryOp--------[112, 43]-----
; --------StartGetTableElements--------[112, 43]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R3
	LOAD 7(LB), R4	; loading k into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 3(LB), R5	; loading indexCol into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	WSTR "-----selection---"
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4
	PUSH R1
	LOAD R4, R1
	WINT
	WNL
	POP R1
	LOAD 2(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[112, 43]-----
; --------StartBinaryOp--------[112, 65]-----
; --------StartGetTableElements--------[112, 65]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R4
	LOAD 2(LB), R5	; loading indexRow into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 3(LB), R6	; loading indexCol into memory
	CMP #0, R6
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	WSTR "-----selection---"
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R6, R0
	BLE table_dimension_are_not_respected
	MUL R0, R5
	ADD R6, R5
	PUSH R1
	LOAD R5, R1
	WINT
	WNL
	POP R1
	LOAD 2(R1, R5), R0
	LOAD R0, R4
; --------EndGetTableElements--------[112, 65]-----
	MUL 6(LB), R4
	BOV overflow_error	; Checking for overflow since the operation is between two floats 
; --------EndBinaryOp--------[112, 65]-----
	SUB R4, R3
	BOV overflow_error	; Checking for overflow since the operation is between two floats 
; --------EndBinaryOp--------[112, 43]-----
; --------StartStoreTableElements--------[112, 20]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInver the value in R3
	LOAD 7(LB), R4	; loading k into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 3(LB), R5	; loading indexCol into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	WSTR "-----saving---"
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4	; adding index_y to size1D*index_x
	PUSH R1
	LOAD R4, R1
	WINT
	WNL
	POP R1
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[112, 20]-----
; --------EndAssignOp--------[112, 20]-----
; --------BeginAssignOp--------[113, 20]-----
; --------StartBinaryOp--------[113, 29]-----
	LOAD 3(LB), R3	; loading indexCol into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[113, 29]-----
	STORE R3, 3(LB)	;  Assiging a value to indexCol
	LOAD R3, R2	;  Return value of the assignement of =indexColand storing it into R2
; --------EndAssignOp--------[113, 20]-----
	BRA while_begin14
while_end14:
; --------BeginAssignOp--------[116, 16]-----
; --------StartBinaryOp--------[116, 18]-----
	LOAD 7(LB), R3	; loading k into memory
	LOAD #1, R4	; loading 1 into memory
	SUB R4, R3
; --------EndBinaryOp--------[116, 18]-----
	STORE R3, 7(LB)	;  Assiging a value to k
	LOAD R3, R2	;  Return value of the assignement of =kand storing it into R2
; --------EndAssignOp--------[116, 16]-----
	BRA while_begin13
while_end13:
; --------BeginAssignOp--------[120, 12]-----
; --------StartBinaryOp--------[120, 21]-----
	LOAD 2(LB), R3	; loading indexRow into memory
	LOAD #1, R4	; loading 1 into memory
	SUB R4, R3
; --------EndBinaryOp--------[120, 21]-----
	STORE R3, 2(LB)	;  Assiging a value to indexRow
	LOAD R3, R2	;  Return value of the assignement of =indexRowand storing it into R2
; --------EndAssignOp--------[120, 12]-----
	BRA while_begin12
while_end12:
; --------BeginAssignOp--------[124, 8]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 10(LB)	;  Assiging a value to inX
	LOAD R3, R2	;  Return value of the assignement of =inXand storing it into R2
; --------EndAssignOp--------[124, 8]-----
; --------BeginAssignOp--------[125, 8]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 11(LB)	;  Assiging a value to inY
	LOAD R3, R2	;  Return value of the assignement of =inYand storing it into R2
; --------EndAssignOp--------[125, 8]-----
while_begin15:
; --------StartBinaryOp--------[126, 14]-----
	LOAD 10(LB), R2	; loading inX into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[126, 14]-----
	CMP #1, R2
	BNE while_end15
; --------BeginAssignOp--------[127, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 11(LB)	;  Assiging a value to inY
	LOAD R3, R2	;  Return value of the assignement of =inYand storing it into R2
; --------EndAssignOp--------[127, 12]-----
while_begin16:
; --------StartBinaryOp--------[128, 19]-----
	LOAD 11(LB), R2	; loading inY into memory
	CMP 1(LB), R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[128, 19]-----
	CMP #1, R2
	BNE while_end16
; --------BeginAssignOp--------[129, 16]-----
; --------StartGetTableElements--------[129, 41]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  matInver into memory at register R3
	LOAD 10(LB), R4	; loading inX into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
; --------StartBinaryOp--------[129, 55]-----
	LOAD 1(LB), R5	; loading size into memory
	ADD 11(LB), R5
; --------EndBinaryOp--------[129, 55]-----
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 8(LB), R1	; loading matInver into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of matInver into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	WSTR "-----selection---"
	LOAD 1(R1), R0	; loading size 2d of matInver into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4
	PUSH R1
	LOAD R4, R1
	WINT
	WNL
	POP R1
	LOAD 2(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[129, 41]-----
; --------StartStoreTableElements--------[129, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  matInverResult the value in R3
	LOAD 10(LB), R4	; loading inX into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 11(LB), R5	; loading inY into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 9(LB), R1	; loading matInverResult into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	WSTR "-----saving---"
	LOAD 0(R1), R0	; loading size 1d of matInverResult into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of matInverResult into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4	; adding index_y to size1D*index_x
	PUSH R1
	LOAD R4, R1
	WINT
	WNL
	POP R1
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[129, 16]-----
; --------EndAssignOp--------[129, 16]-----
; --------BeginAssignOp--------[130, 16]-----
; --------StartBinaryOp--------[130, 20]-----
	LOAD 11(LB), R3	; loading inY into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[130, 20]-----
	STORE R3, 11(LB)	;  Assiging a value to inY
	LOAD R3, R2	;  Return value of the assignement of =inYand storing it into R2
; --------EndAssignOp--------[130, 16]-----
	BRA while_begin16
while_end16:
; --------BeginAssignOp--------[132, 12]-----
; --------StartBinaryOp--------[132, 16]-----
	LOAD 10(LB), R3	; loading inX into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[132, 16]-----
	STORE R3, 10(LB)	;  Assiging a value to inX
	LOAD R3, R2	;  Return value of the assignement of =inXand storing it into R2
; --------EndAssignOp--------[132, 12]-----
	BRA while_begin15
while_end15:
	LOAD 9(LB), R2	; loading matInverResult into memory
	LOAD R2, R0
	BRA fin.MatrixTraitement.calculate
	WSTR "Error: La méthode code.MatrixTraitement.calculate doit retourner un element"
	WNL
	ERROR
fin.MatrixTraitement.calculate:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	POP R6	; Pushing and poping registers used in the method
	RTS
; -------------------------------------
;        Method equal
; -------------------------------------
; ------------------Start generateCodeForObjectEquals location:
code.Object.equals:
	LOAD -2(LB), R0
	CMP R1, R0
	SEQ R0	; Comparaison this et paramètre d'equals
fin.Object.equals:
	RTS
init.Object:
	RTS
; -------------------------------------
;        Liste Erreur
; -------------------------------------
deref_null_error:
	WSTR "Error: deref_null_error"
	WNL
	ERROR
table_dimension_are_not_respected:
	WSTR "Error: table_dimension_are_not_respected"
	WNL
	ERROR
overflow_error:
	WSTR "Error: overflow_error"
	WNL
	ERROR
int_selection_table_must_be_positive:
	WSTR "Error: int_selection_table_must_be_positive"
	WNL
	ERROR
heap_overflow_error:
	WSTR "Error: heap_overflow_error"
	WNL
	ERROR
stack_overflow_error:
	WSTR "Error: stack_overflow_error"
	WNL
	ERROR
int_allocation_table_must_be_strictly_positive:
	WSTR "Error: int_allocation_table_must_be_strictly_positive"
	WNL
	ERROR
; end main program
