DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:38) - [MethodDefinition][setLabel] Initialising label value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with code.object.equals
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:46) - verify program: start
DEBUG fr.ensimag.deca.DecacCompiler.saveMainProgramState(DecacCompiler.java:110) - [DecacCompiler][saveMainProgramState] Saving state main program
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:36) - [ListDeclClass][verifyListClass] verify listClass pass 1: START
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:40) - [ListDeclClass][verifyListClass] verify listClass pass 1: END
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassMembers(ListDeclClass.java:48) - [ListDeclClass][verifyListClassMembers] verify listClass pass 2: START
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyListDeclField(ListDeclField.java:54) - [ListDeclField][verifyListDeclField]
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:92) - [DeclField][verifyDecleField] Verify a Field declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:232) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:108) - [DeclField][verifyDecleField]  Declaration d'une field avec le nom = x  / avec l'index = 1 / dans la classe Point2D
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:92) - [DeclField][verifyDecleField] Verify a Field declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:232) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:108) - [DeclField][verifyDecleField]  Declaration d'une field avec le nom = y  / avec l'index = 2 / dans la classe Point2D
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:32) - [ListDeclMethod][verifyListDeclMethod]
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : diag
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  diag
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:123) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:232) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : a
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:232) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter a into -3(LB)
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:136) - [DeclMethod][verifyDecleMethod] Method = diag does not exists, adding a new one to the local env with index 2
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyListDeclField(ListDeclField.java:54) - [ListDeclField][verifyListDeclField]
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:92) - [DeclField][verifyDecleField] Verify a Field declaration
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:232) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclField.verifyDeclField(DeclField.java:108) - [DeclField][verifyDecleField]  Declaration d'une field avec le nom = z  / avec l'index = 3 / dans la classe Point3D
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:32) - [ListDeclMethod][verifyListDeclMethod]
INFO  fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:34) - [ListDeclMethod][verifyListDeclMethod] Verifing the method : diag
DEBUG fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:120) - [DeclMethod][verifyDecleMethod] Verifing the declaration of a method in pass 2 || MethodName =  diag
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:123) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:232) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:47) - [ListDeclParam][verifyListDeclParam] Start
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:76) - [DeclParam][verifyDecleParam] Verifing method parameter : a
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:232) - [Identifier][verifyType] Verify that declaration type is correct
DEBUG fr.ensimag.deca.tree.DeclParam.verifyDeclParam(DeclParam.java:96) - [DeclParam][verifyDecleParam] Saving method parameter a into -3(LB)
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:148) - [DeclMethod][verifyDecleMethod] Method = diag exists in the localenv, checking if it is a method that belongs to the current class
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:154) - [DeclMethod][verifyDecleMethod] Method = diag exists in the parent class,checking if our method matchs the one that is in the parent
INFO  fr.ensimag.deca.tree.DeclMethod.verifyDeclMethodSimple(DeclMethod.java:167) - [DeclMethod][verifyDecleMethod] Method = diag exists in the parent class,and it was redefined exactly the way it was in the parent method, we used the index the index =2
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassMembers(ListDeclClass.java:52) - [ListDeclClass][verifyListClassMembers] verify listClass pass 2: END
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassBody(ListDeclClass.java:59) - [ListDeclClass][verifyListClassBody] verify listClass pass 3: START
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyInitFields(ListDeclField.java:62) - [ListDeclField][verifyInitListDeclField]
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethodBody(ListDeclMethod.java:41) - [ListDeclMethod][verifyListDeclMethod]
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:123) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:183) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:90) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:162) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyInitFields(ListDeclField.java:62) - [ListDeclField][verifyInitListDeclField]
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethodBody(ListDeclMethod.java:41) - [ListDeclMethod][verifyListDeclMethod]
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:123) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:54) - [ListDeclVar][verifyListDeclVariable]
DEBUG fr.ensimag.deca.tree.ListInst.verifyListInst(ListInst.java:35) - [ListInst][verifyListInst]
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyInst(AbstractExpr.java:183) - [AbstractExpr][verifyInst] Verify the expression coming from the instruction
DEBUG fr.ensimag.deca.tree.Assign.verifyExpr(Assign.java:90) - [Assign][verifyExpr] Verify left and right expression in assignment
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.AbstractExpr.verifyRValue(AbstractExpr.java:162) - [AbstractExpr][verifyRValue] Verify the right expression of (implicit) assignments
DEBUG fr.ensimag.deca.tree.AbstractOpArith.verifyExpr(AbstractOpArith.java:38) - [AbstractOpArith][verifyExpr] Verify the arithmetic expressions
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.Identifier.verifyExpr(Identifier.java:212) - [Identifier][verifyExpr] Verifying the exp of an identifier 
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClassBody(ListDeclClass.java:63) - [ListDeclClass][verifyListClassBody] verify listClass pass 3: END
DEBUG fr.ensimag.deca.DecacCompiler.setMainProgramState(DecacCompiler.java:97) - [DecacCompiler][setMainProgramState] Seeting main state program
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:53) - verify program: end
DEBUG fr.ensimag.deca.DecacCompiler.setMainProgramState(DecacCompiler.java:97) - [DecacCompiler][setMainProgramState] Seeting main state program
DEBUG fr.ensimag.deca.tree.ListDeclClass.codeGenListClassTableau(ListDeclClass.java:67) - [ListDeclClass][codeGenListClassTableau] Code generation pass 1: START
DEBUG fr.ensimag.deca.tree.DeclClass.codeGenTableauDeMethod(DeclClass.java:67) - [DeclClass][codeGenTableauDeMethod] Generating the table method || ClassName =  Point2D // Super class  = object
DEBUG fr.ensimag.deca.tree.DeclClass.codeGenTableauDeMethod(DeclClass.java:69) - [DeclClass][codeGenTableauDeMethod] Class definitions are : 
 Main class =  type defined at [3, 0], type=Point2D 
 Super class  = type (builtin), type=object
DEBUG fr.ensimag.deca.tree.DeclClass.codeGenTableauDeMethod(DeclClass.java:76) - [DeclClass][codeGenTableauDeMethod] Current methode table adresses 
-----Start table Method Table----
type (builtin), type=object -> 1(GB)
-----End table Method Table  ----

DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with code.object.equals
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:38) - [MethodDefinition][setLabel] Initialising label value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with code.Point2D.diag
DEBUG fr.ensimag.deca.tree.DeclClass.codeGenTableauDeMethod(DeclClass.java:67) - [DeclClass][codeGenTableauDeMethod] Generating the table method || ClassName =  Point3D // Super class  = Point2D
DEBUG fr.ensimag.deca.tree.DeclClass.codeGenTableauDeMethod(DeclClass.java:69) - [DeclClass][codeGenTableauDeMethod] Class definitions are : 
 Main class =  type defined at [14, 0], type=Point3D 
 Super class  = type defined at [3, 0], type=Point2D
DEBUG fr.ensimag.deca.tree.DeclClass.codeGenTableauDeMethod(DeclClass.java:76) - [DeclClass][codeGenTableauDeMethod] Current methode table adresses 
-----Start table Method Table----
type (builtin), type=object -> 1(GB)
type defined at [3, 0], type=Point2D -> 3(GB)
-----End table Method Table  ----

DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with code.object.equals
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:38) - [MethodDefinition][setLabel] Initialising label value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with code.Point3D.diag
DEBUG fr.ensimag.deca.tree.ListDeclClass.codeGenListClassTableau(ListDeclClass.java:71) - [ListDeclClass][codeGenListClassTableau] Code generation pass 1: END
DEBUG fr.ensimag.deca.DecacCompiler.setMainProgramState(DecacCompiler.java:97) - [DecacCompiler][setMainProgramState] Seeting main state program
DEBUG fr.ensimag.deca.tree.ListDeclClass.codeGenListClassMethod(ListDeclClass.java:75) - [ListDeclClass][codeGenListClassMethod] Code generation pass 2 classes: START
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:38) - [MethodDefinition][setLabel] Initialising label value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with init.Point2D
INFO  fr.ensimag.deca.tree.DeclClass.codeGenMethodInitialisation(DeclClass.java:112) - [DeclClass][codeGenMethodInitialisation] Defining code initilization method
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:123) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclField.CodeGenListPlaceZeroInField(ListDeclField.java:69) - [ListDeclField][CodeGenListPlaceZeroInField] Placing Zero In All fields
DEBUG fr.ensimag.deca.tree.ListDeclField.CodeGenListInitializeField(ListDeclField.java:77) - [ListDeclField][CodeGenListInitializeField] Initializing the fields
DEBUG fr.ensimag.deca.tree.DeclClass.codeGenMethodInitialisation(DeclClass.java:141) - [DeclClass][codeGenMethodInitialisation] sizeStackMax = 0
DEBUG fr.ensimag.deca.tree.ListDeclMethod.codeGenListMethod(ListDeclMethod.java:49) - [ListDeclMethod][CodeGenListMethodProgram]
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:123) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.context.MethodDefinition.setEndLabel(MethodDefinition.java:55) - [MethodDefinition][setendLabel] Initialising endLabel value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setEndLabel(MethodDefinition.java:58) - [MethodDefinition][setendLabel] Trying to modify endLabel with fin.Point2D.diag
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:259) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:78) - [AbstractBinaryExpr][codeGenInst] generating code for abstact binary expression 
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:81) - [AbstractBinaryExpr][codeGenInst] Exploring Left
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.checkIfWeWorkWithFloatAndIfConvIsNeeded(AbstractBinaryExpr.java:116) - [AbstractBinaryExpr][checkIfWeWorkWithFloatAndIfConvIsNeeded] Checking if i am working with floats
DEBUG fr.ensimag.deca.tree.Identifier.codeGenInst(Identifier.java:58) - [Identifier][codeGenInst] Loading identifier into memory with name = x
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:259) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R3
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:65) - [Identifier][loadItemintoRegister] Loading x into the register R3
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:69) - [Identifier][loadItemintoRegister] Working with field x
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:84) -  [AbstractBinaryExpr][codeGenInst] Left register R3
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:88) - [AbstractBinaryExpr][codeGenInst] Exploiting an identifier with the adresse-3(LB)
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:26) - [Plus][executeBinaryOperation] generating code for int literal value 
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:27) - [Plus][executeBinaryOperation] generating code for Plus between: -3(LB) and R3
DEBUG fr.ensimag.deca.tree.Assign.codeGenInst(Assign.java:73) - [Assign][codeGenInst]Left operand in assign operation is field
DEBUG fr.ensimag.deca.tree.DeclMethod.codeGenDeclMethod(DeclMethod.java:258) - [DeclClass][codeGenMethodInitialisation] sizeStackMax = 2
DEBUG fr.ensimag.deca.codegen.ListError.activeError(ListError.java:44) - ERROR is being made to value true stack_overflow_error
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:38) - [MethodDefinition][setLabel] Initialising label value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setLabel(MethodDefinition.java:41) - [MethodDefinition][setLabel] Trying to modify label with init.Point3D
INFO  fr.ensimag.deca.tree.DeclClass.codeGenMethodInitialisation(DeclClass.java:112) - [DeclClass][codeGenMethodInitialisation] Defining code initilization method
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:123) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.tree.ListDeclField.CodeGenListPlaceZeroInField(ListDeclField.java:69) - [ListDeclField][CodeGenListPlaceZeroInField] Placing Zero In All fields
DEBUG fr.ensimag.deca.tree.ListDeclField.CodeGenListInitializeField(ListDeclField.java:77) - [ListDeclField][CodeGenListInitializeField] Initializing the fields
DEBUG fr.ensimag.deca.tree.DeclClass.codeGenMethodInitialisation(DeclClass.java:141) - [DeclClass][codeGenMethodInitialisation] sizeStackMax = 3
DEBUG fr.ensimag.deca.codegen.ListError.activeError(ListError.java:44) - ERROR is being made to value true stack_overflow_error
DEBUG fr.ensimag.deca.tree.ListDeclMethod.codeGenListMethod(ListDeclMethod.java:49) - [ListDeclMethod][CodeGenListMethodProgram]
DEBUG fr.ensimag.deca.DecacCompiler.setMethodProgramState(DecacCompiler.java:123) - [DecacCompiler][setMethodProgramState] Entring a method program
DEBUG fr.ensimag.deca.context.MethodDefinition.setEndLabel(MethodDefinition.java:55) - [MethodDefinition][setendLabel] Initialising endLabel value 
DEBUG fr.ensimag.deca.context.MethodDefinition.setEndLabel(MethodDefinition.java:58) - [MethodDefinition][setendLabel] Trying to modify endLabel with fin.Point3D.diag
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:259) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R2
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:78) - [AbstractBinaryExpr][codeGenInst] generating code for abstact binary expression 
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:81) - [AbstractBinaryExpr][codeGenInst] Exploring Left
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.checkIfWeWorkWithFloatAndIfConvIsNeeded(AbstractBinaryExpr.java:116) - [AbstractBinaryExpr][checkIfWeWorkWithFloatAndIfConvIsNeeded] Checking if i am working with floats
DEBUG fr.ensimag.deca.tree.Identifier.codeGenInst(Identifier.java:58) - [Identifier][codeGenInst] Loading identifier into memory with name = x
DEBUG fr.ensimag.deca.tree.AbstractExpr.LoadGencode(AbstractExpr.java:259) - [Abstractexpr][LoadGencode]  Reserving an non empty register with the name R3
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:65) - [Identifier][loadItemintoRegister] Loading x into the register R3
DEBUG fr.ensimag.deca.tree.Identifier.loadItemintoRegister(Identifier.java:69) - [Identifier][loadItemintoRegister] Working with field x
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:84) -  [AbstractBinaryExpr][codeGenInst] Left register R3
DEBUG fr.ensimag.deca.tree.AbstractBinaryExpr.codeGenInst(AbstractBinaryExpr.java:88) - [AbstractBinaryExpr][codeGenInst] Exploiting an identifier with the adresse-3(LB)
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:26) - [Plus][executeBinaryOperation] generating code for int literal value 
DEBUG fr.ensimag.deca.tree.Plus.executeBinaryOperation(Plus.java:27) - [Plus][executeBinaryOperation] generating code for Plus between: -3(LB) and R3
DEBUG fr.ensimag.deca.tree.Assign.codeGenInst(Assign.java:73) - [Assign][codeGenInst]Left operand in assign operation is field
DEBUG fr.ensimag.deca.tree.DeclMethod.codeGenDeclMethod(DeclMethod.java:258) - [DeclClass][codeGenMethodInitialisation] sizeStackMax = 2
DEBUG fr.ensimag.deca.codegen.ListError.activeError(ListError.java:44) - ERROR is being made to value true stack_overflow_error
DEBUG fr.ensimag.deca.tree.ListDeclClass.codeGenListClassMethod(ListDeclClass.java:80) - [ListDeclClass][codeGenListClassMethod] Code generation pass 2 classes: END
; ------------Code for method : diag with label =  code.Point3D.diag--------
code.Point3D.diag:
	TSTO #2
	BOV stack_overflow_error
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------BeginAssignOp--------[19, 8]-----
; --------StartBinaryOp--------[19, 12]-----
	LOAD -2(LB), R3	; loading the class of the field x into memory
	LOAD 1(R3), R3	; loading x into memory
	ADD -3(LB), R3
; --------EndBinaryOp--------[19, 12]-----
	LOAD -2(LB), R2	; loading parent class =  Point2D into memory when working with field x
	STORE R3, 1(R2)	; Saving field  x into memory
; --------EndAssignOp--------[19, 8]-----
fin.Point3D.diag:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
	HALT
; -------------------------------------
;        Classes
; -------------------------------------
; ---------------------------------------------------
; ----------------- class : Point2D -------------------
; ---------------------------------------------------
; ------------Init method for class = Point2D--------
init.Point2D:
	LOAD #0, R0	; loading 0  into memory to initialize field to 0
	LOAD -2(LB), R1	; loading class (this) into memory when working with field x
	STORE R0, 1(R1)	; Saving field  x into memory
	LOAD #0, R0	; loading 0  into memory to initialize field to 0
	LOAD -2(LB), R1	; loading class (this) into memory when working with field y
	STORE R0, 2(R1)	; Saving field  y into memory
	RTS
; ------------Code for method : diag with label =  code.Point2D.diag--------
code.Point2D.diag:
	TSTO #2
	BOV stack_overflow_error
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------BeginAssignOp--------[9, 8]-----
; --------StartBinaryOp--------[9, 12]-----
	LOAD -2(LB), R3	; loading the class of the field x into memory
	LOAD 1(R3), R3	; loading x into memory
	ADD -3(LB), R3
; --------EndBinaryOp--------[9, 12]-----
	LOAD -2(LB), R2	; loading parent class =  Point2D into memory when working with field x
	STORE R3, 1(R2)	; Saving field  x into memory
; --------EndAssignOp--------[9, 8]-----
fin.Point2D.diag:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; ---------------------------------------------------
; ----------------- class : Point3D -------------------
; ---------------------------------------------------
; ------------Init method for class = Point3D--------
init.Point3D:
	TSTO #3
	BOV stack_overflow_error
	LOAD -2(LB), R0	; Placing the current class = Point3D adresse in the the stack before calling parent 
	PUSH R0	; Placing this = Point3D into the stack
	BSR init.Point2D	; Calling the initialisation method of parent classPoint2D
	SUBSP #1
	LOAD #0, R0	; loading 0  into memory to initialize field to 0
	LOAD -2(LB), R1	; loading class (this) into memory when working with field z
	STORE R0, 3(R1)	; Saving field  z into memory
	RTS
; ------------Code for method : diag with label =  code.Point3D.diag--------
code.Point3D.diag:
	TSTO #2
	BOV stack_overflow_error
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------BeginAssignOp--------[19, 8]-----
; --------StartBinaryOp--------[19, 12]-----
	LOAD -2(LB), R3	; loading the class of the field x into memory
	LOAD 1(R3), R3	; loading x into memory
	ADD -3(LB), R3
; --------EndBinaryOp--------[19, 12]-----
	LOAD -2(LB), R2	; loading parent class =  Point2D into memory when working with field x
	STORE R3, 1(R2)	; Saving field  x into memory
; --------EndAssignOp--------[19, 8]-----
fin.Point3D.diag:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	RTS
; -------------------------------------
;        Liste Erreur
; -------------------------------------
stack_overflow_error:
	WSTR "Error: stack_overflow_error"
	WNL
	ERROR

