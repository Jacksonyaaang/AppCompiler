	TSTO #48
	BOV stack_overflow_error
	ADDSP #45
; start main program
; -------------------------------------
;        Method Table
; -------------------------------------
	LOAD #null, R0
	STORE R0, 7(GB)
	LOAD code.Object.equals, R0
	STORE R0, 8(GB)
	LEA 7(GB), R0
	STORE R0, 9(GB)
	LOAD code.Object.equals, R0
	STORE R0, 10(GB)
	LOAD code.Math.setInt1DTable, R0
	STORE R0, 11(GB)
	LOAD code.Math.setInt2DTable, R0
	STORE R0, 12(GB)
	LOAD code.Math.set1DTableIntValue, R0
	STORE R0, 13(GB)
	LOAD code.Math.set2DTableIntValue, R0
	STORE R0, 14(GB)
	LOAD code.Math.setFloat1DTable, R0
	STORE R0, 15(GB)
	LOAD code.Math.setFloat2DTable, R0
	STORE R0, 16(GB)
	LOAD code.Math.set1DTableFloatValue, R0
	STORE R0, 17(GB)
	LOAD code.Math.set2DTableFloatValue, R0
	STORE R0, 18(GB)
	LOAD code.Math.printInt1DTable, R0
	STORE R0, 19(GB)
	LOAD code.Math.printInt2DTable, R0
	STORE R0, 20(GB)
	LOAD code.Math.printFloat1DTable, R0
	STORE R0, 21(GB)
	LOAD code.Math.printFloat2DTable, R0
	STORE R0, 22(GB)
	LEA 9(GB), R0
	STORE R0, 23(GB)
	LOAD code.Object.equals, R0
	STORE R0, 24(GB)
	LOAD code.Math.setInt1DTable, R0
	STORE R0, 25(GB)
	LOAD code.Math.setInt2DTable, R0
	STORE R0, 26(GB)
	LOAD code.Math.set1DTableIntValue, R0
	STORE R0, 27(GB)
	LOAD code.Math.set2DTableIntValue, R0
	STORE R0, 28(GB)
	LOAD code.Math.setFloat1DTable, R0
	STORE R0, 29(GB)
	LOAD code.Math.setFloat2DTable, R0
	STORE R0, 30(GB)
	LOAD code.Math.set1DTableFloatValue, R0
	STORE R0, 31(GB)
	LOAD code.Math.set2DTableFloatValue, R0
	STORE R0, 32(GB)
	LOAD code.Math.printInt1DTable, R0
	STORE R0, 33(GB)
	LOAD code.Math.printInt2DTable, R0
	STORE R0, 34(GB)
	LOAD code.Math.printFloat1DTable, R0
	STORE R0, 35(GB)
	LOAD code.Math.printFloat2DTable, R0
	STORE R0, 36(GB)
	LOAD code.Sum.sommeIntInt1D, R0
	STORE R0, 37(GB)
	LOAD code.Sum.sommeIntInt2D, R0
	STORE R0, 38(GB)
	LOAD code.Sum.sommeFloatInt1D, R0
	STORE R0, 39(GB)
	LOAD code.Sum.sommeFloatInt2D, R0
	STORE R0, 40(GB)
	LOAD code.Sum.sommeIntFloat1D, R0
	STORE R0, 41(GB)
	LOAD code.Sum.sommeIntFloat2D, R0
	STORE R0, 42(GB)
	LOAD code.Sum.sommeFloatFloat1D, R0
	STORE R0, 43(GB)
	LOAD code.Sum.sommeFloatFloat2D, R0
	STORE R0, 44(GB)
	LOAD code.Sum.dimensionIncompatible, R0
	STORE R0, 45(GB)
; -------------------------------------
;        Main program
; -------------------------------------
; Beginning of main instructions:
; --------StartNew--------[255, 26]-----
; [New][loadItemintoRegister] loading new of calss =  Sum into memory at register R2
	NEW #1, R2
	BOV heap_overflow_error
	LEA 23(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.Sum
	POP R2
; --------EndNew--------[255, 26]-----
	STORE R2, 1(GB)	; Initializing the variable matrixsum1D and loading it into memory
; --------StartNewTable--------[256, 18]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  int[] into memory at register R2
	LOAD #7, R3	; loading 7 into memory
	CMP #1, R3
	BLT int_allocation_table_must_be_strictly_positive
	LOAD R3, R1
	ADD #1, R1
	NEW R1, R0
	BOV heap_overflow_error
	STORE R3, 0(R0)
	LOAD R0, R2
; --------EndNewTable--------[256, 18]-----
	STORE R2, 2(GB)	; Initializing the variable x and loading it into memory
; --------StartNewTable--------[257, 20]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  float[] into memory at register R2
	LOAD #7, R3	; loading 7 into memory
	CMP #1, R3
	BLT int_allocation_table_must_be_strictly_positive
	LOAD R3, R1
	ADD #1, R1
	NEW R1, R0
	BOV heap_overflow_error
	STORE R3, 0(R0)
	LOAD R0, R2
; --------EndNewTable--------[257, 20]-----
	STORE R2, 3(GB)	; Initializing the variable y and loading it into memory
; --------StartNew--------[258, 26]-----
; [New][loadItemintoRegister] loading new of calss =  Sum into memory at register R2
	NEW #1, R2
	BOV heap_overflow_error
	LEA 23(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.Sum
	POP R2
; --------EndNew--------[258, 26]-----
	STORE R2, 4(GB)	; Initializing the variable matrixsum2D and loading it into memory
; --------StartNewTable--------[259, 20]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  int[][] into memory at register R2
	LOAD #3, R3	; loading 3 into memory
	CMP #1, R3
	BLT int_allocation_table_must_be_strictly_positive
	LOAD #3, R4	; loading 3 into memory
	CMP #1, R4
	BLT int_allocation_table_must_be_strictly_positive
	LOAD R3, R1
	MUL R4, R1
	ADD #2, R1
	NEW R1, R0
	BOV heap_overflow_error
	STORE R3, 0(R0)
	STORE R4, 1(R0)
	LOAD R0, R2
; --------EndNewTable--------[259, 20]-----
	STORE R2, 5(GB)	; Initializing the variable a and loading it into memory
; --------StartNewTable--------[260, 22]-----
; [NewTable][loadItemintoRegister] loading NewTable  =  float[][] into memory at register R2
	LOAD #3, R3	; loading 3 into memory
	CMP #1, R3
	BLT int_allocation_table_must_be_strictly_positive
	LOAD #3, R4	; loading 3 into memory
	CMP #1, R4
	BLT int_allocation_table_must_be_strictly_positive
	LOAD R3, R1
	MUL R4, R1
	ADD #2, R1
	NEW R1, R0
	BOV heap_overflow_error
	STORE R3, 0(R0)
	STORE R4, 1(R0)
	LOAD R0, R2
; --------EndNewTable--------[260, 22]-----
	STORE R2, 6(GB)	; Initializing the variable b and loading it into memory
	WSTR "Test somme tableau 1D"
	WNL
; --------BeginMethodCall--------[263, 8]-----
	ADDSP #3
	LOAD 1(GB), R2	; loading matrixsum1D into memory
	STORE R2, 0(SP)
	LOAD 2(GB), R2	; loading x into memory
	STORE R2, -1(SP)
	LOAD #5, R2	; loading 5 into memory
	STORE R2, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 2(R2)
	LOAD R0, R2
	SUBSP #3
; --------EndMethodCall--------[263, 8]-----
; --------BeginMethodCall--------[264, 8]-----
	ADDSP #3
	LOAD 1(GB), R2	; loading matrixsum1D into memory
	STORE R2, 0(SP)
	LOAD 3(GB), R2	; loading y into memory
	STORE R2, -1(SP)
	LOAD #0x1.8p2, R2	; loading 6.0 into memory
	STORE R2, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 6(R2)
	LOAD R0, R2
	SUBSP #3
; --------EndMethodCall--------[264, 8]-----
; --------BeginMethodCall--------[265, 8]-----
	ADDSP #2
	LOAD 1(GB), R2	; loading matrixsum1D into memory
	STORE R2, 0(SP)
	LOAD 2(GB), R2	; loading x into memory
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 10(R2)
	LOAD R0, R2
	SUBSP #2
; --------EndMethodCall--------[265, 8]-----
; --------BeginMethodCall--------[266, 8]-----
	ADDSP #2
	LOAD 1(GB), R2	; loading matrixsum1D into memory
	STORE R2, 0(SP)
	LOAD 3(GB), R2	; loading y into memory
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 12(R2)
	LOAD R0, R2
	SUBSP #2
; --------EndMethodCall--------[266, 8]-----
; --------BeginMethodCall--------[267, 8]-----
	ADDSP #3
	LOAD 1(GB), R2	; loading matrixsum1D into memory
	STORE R2, 0(SP)
	LOAD 2(GB), R2	; loading x into memory
	STORE R2, -1(SP)
	LOAD 3(GB), R2	; loading y into memory
	STORE R2, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 18(R2)
	LOAD R0, R2
	SUBSP #3
; --------EndMethodCall--------[267, 8]-----
; --------BeginMethodCall--------[268, 8]-----
	ADDSP #2
	LOAD 1(GB), R2	; loading matrixsum1D into memory
	STORE R2, 0(SP)
	LOAD 2(GB), R2	; loading x into memory
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 10(R2)
	LOAD R0, R2
	SUBSP #2
; --------EndMethodCall--------[268, 8]-----
	WSTR "Test somme tableau 2D"
	WNL
; --------BeginMethodCall--------[271, 8]-----
	ADDSP #3
	LOAD 4(GB), R2	; loading matrixsum2D into memory
	STORE R2, 0(SP)
	LOAD 5(GB), R2	; loading a into memory
	STORE R2, -1(SP)
	LOAD #5, R2	; loading 5 into memory
	STORE R2, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 3(R2)
	LOAD R0, R2
	SUBSP #3
; --------EndMethodCall--------[271, 8]-----
; --------BeginMethodCall--------[272, 8]-----
	ADDSP #3
	LOAD 4(GB), R2	; loading matrixsum2D into memory
	STORE R2, 0(SP)
	LOAD 6(GB), R2	; loading b into memory
	STORE R2, -1(SP)
	LOAD #0x1.8p2, R2	; loading 6.0 into memory
	STORE R2, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 7(R2)
	LOAD R0, R2
	SUBSP #3
; --------EndMethodCall--------[272, 8]-----
; --------BeginMethodCall--------[273, 8]-----
	ADDSP #2
	LOAD 4(GB), R2	; loading matrixsum2D into memory
	STORE R2, 0(SP)
	LOAD 5(GB), R2	; loading a into memory
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 11(R2)
	LOAD R0, R2
	SUBSP #2
; --------EndMethodCall--------[273, 8]-----
; --------BeginMethodCall--------[274, 8]-----
	ADDSP #2
	LOAD 4(GB), R2	; loading matrixsum2D into memory
	STORE R2, 0(SP)
	LOAD 6(GB), R2	; loading b into memory
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 13(R2)
	LOAD R0, R2
	SUBSP #2
; --------EndMethodCall--------[274, 8]-----
; --------BeginMethodCall--------[275, 8]-----
	ADDSP #3
	LOAD 4(GB), R2	; loading matrixsum2D into memory
	STORE R2, 0(SP)
	LOAD 5(GB), R2	; loading a into memory
	STORE R2, -1(SP)
	LOAD 6(GB), R2	; loading b into memory
	STORE R2, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 19(R2)
	LOAD R0, R2
	SUBSP #3
; --------EndMethodCall--------[275, 8]-----
; --------BeginMethodCall--------[276, 8]-----
	ADDSP #2
	LOAD 4(GB), R2	; loading matrixsum2D into memory
	STORE R2, 0(SP)
	LOAD 5(GB), R2	; loading a into memory
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 11(R2)
	LOAD R0, R2
	SUBSP #2
; --------EndMethodCall--------[276, 8]-----
	HALT
; -------------------------------------
;        Classes
; -------------------------------------
; ---------------------------------------------------
; ----------------- class : Math -------------------
; ---------------------------------------------------
; ------------Init method for class = Math--------
init.Math:
	RTS
; ------------Code for method : setInt1DTable with label =  code.Math.setInt1DTable--------
code.Math.setInt1DTable:
	TSTO #4
	BOV stack_overflow_error
	ADDSP #1
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIterator and loading it into memory
while_begin1:
; --------StartBinaryOp--------[8, 15]-----
	LOAD 1(LB), R2	; loading tableIterator into memory
; --------BeginSelection--------[8, 31]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[8, 31]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[8, 15]-----
	CMP #1, R2
	BNE while_end1
; --------BeginAssignOp--------[9, 12]-----
	LOAD -4(LB), R3	; loading value into memory
; --------StartStoreTableElements--------[9, 12]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table the value in R3
	LOAD 1(LB), R4	; loading tableIterator into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading table into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD R4, R0
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[9, 12]-----
; --------EndAssignOp--------[9, 12]-----
; --------BeginAssignOp--------[10, 12]-----
; --------StartBinaryOp--------[10, 28]-----
	LOAD 1(LB), R3	; loading tableIterator into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[10, 28]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIterator
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorand storing it into R2
; --------EndAssignOp--------[10, 12]-----
	BRA while_begin1
while_end1:
fin.Math.setInt1DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : setInt2DTable with label =  code.Math.setInt2DTable--------
code.Math.setInt2DTable:
	TSTO #6
	BOV stack_overflow_error
	ADDSP #2
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIteratorX and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable tableIteratorY and loading it into memory
while_begin2:
; --------StartBinaryOp--------[17, 15]-----
	LOAD 2(LB), R2	; loading tableIteratorY into memory
; --------BeginSelection--------[17, 32]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[17, 32]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[17, 15]-----
	CMP #1, R2
	BNE while_end2
while_begin3:
; --------StartBinaryOp--------[18, 19]-----
	LOAD 1(LB), R2	; loading tableIteratorX into memory
; --------BeginSelection--------[18, 36]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[18, 36]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[18, 19]-----
	CMP #1, R2
	BNE while_end3
; --------BeginAssignOp--------[19, 16]-----
	LOAD -4(LB), R3	; loading value into memory
; --------StartStoreTableElements--------[19, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table the value in R3
	LOAD 1(LB), R4	; loading tableIteratorX into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R5	; loading tableIteratorY into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading table into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of table into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[19, 16]-----
; --------EndAssignOp--------[19, 16]-----
; --------BeginAssignOp--------[20, 16]-----
; --------StartBinaryOp--------[20, 33]-----
	LOAD 1(LB), R3	; loading tableIteratorX into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[20, 33]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[20, 16]-----
	BRA while_begin3
while_end3:
; --------BeginAssignOp--------[22, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[22, 12]-----
; --------BeginAssignOp--------[23, 12]-----
; --------StartBinaryOp--------[23, 29]-----
	LOAD 2(LB), R3	; loading tableIteratorY into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[23, 29]-----
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorY
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorYand storing it into R2
; --------EndAssignOp--------[23, 12]-----
	BRA while_begin2
while_end2:
fin.Math.setInt2DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : set1DTableIntValue with label =  code.Math.set1DTableIntValue--------
code.Math.set1DTableIntValue:
	TSTO #3
	BOV stack_overflow_error
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------BeginAssignOp--------[28, 8]-----
	LOAD -4(LB), R3	; loading value into memory
; --------StartStoreTableElements--------[28, 8]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table the value in R3
	LOAD -5(LB), R4	; loading index into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading table into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD R4, R0
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[28, 8]-----
; --------EndAssignOp--------[28, 8]-----
fin.Math.set1DTableIntValue:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : set2DTableIntValue with label =  code.Math.set2DTableIntValue--------
code.Math.set2DTableIntValue:
	TSTO #4
	BOV stack_overflow_error
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------BeginAssignOp--------[32, 8]-----
	LOAD -4(LB), R3	; loading value into memory
; --------StartStoreTableElements--------[32, 8]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table the value in R3
	LOAD -5(LB), R4	; loading indexX into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD -6(LB), R5	; loading indexY into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading table into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of table into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[32, 8]-----
; --------EndAssignOp--------[32, 8]-----
fin.Math.set2DTableIntValue:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : setFloat1DTable with label =  code.Math.setFloat1DTable--------
code.Math.setFloat1DTable:
	TSTO #4
	BOV stack_overflow_error
	ADDSP #1
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIterator and loading it into memory
while_begin4:
; --------StartBinaryOp--------[37, 15]-----
	LOAD 1(LB), R2	; loading tableIterator into memory
; --------BeginSelection--------[37, 31]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[37, 31]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[37, 15]-----
	CMP #1, R2
	BNE while_end4
; --------BeginAssignOp--------[38, 12]-----
	LOAD -4(LB), R3	; loading value into memory
; --------StartStoreTableElements--------[38, 12]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table the value in R3
	LOAD 1(LB), R4	; loading tableIterator into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading table into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD R4, R0
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[38, 12]-----
; --------EndAssignOp--------[38, 12]-----
; --------BeginAssignOp--------[39, 12]-----
; --------StartBinaryOp--------[39, 28]-----
	LOAD 1(LB), R3	; loading tableIterator into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[39, 28]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIterator
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorand storing it into R2
; --------EndAssignOp--------[39, 12]-----
	BRA while_begin4
while_end4:
fin.Math.setFloat1DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : setFloat2DTable with label =  code.Math.setFloat2DTable--------
code.Math.setFloat2DTable:
	TSTO #6
	BOV stack_overflow_error
	ADDSP #2
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIteratorX and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable tableIteratorY and loading it into memory
while_begin5:
; --------StartBinaryOp--------[46, 15]-----
	LOAD 2(LB), R2	; loading tableIteratorY into memory
; --------BeginSelection--------[46, 32]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[46, 32]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[46, 15]-----
	CMP #1, R2
	BNE while_end5
while_begin6:
; --------StartBinaryOp--------[47, 19]-----
	LOAD 1(LB), R2	; loading tableIteratorX into memory
; --------BeginSelection--------[47, 36]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[47, 36]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[47, 19]-----
	CMP #1, R2
	BNE while_end6
; --------BeginAssignOp--------[48, 16]-----
	LOAD -4(LB), R3	; loading value into memory
; --------StartStoreTableElements--------[48, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table the value in R3
	LOAD 1(LB), R4	; loading tableIteratorX into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R5	; loading tableIteratorY into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading table into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of table into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[48, 16]-----
; --------EndAssignOp--------[48, 16]-----
; --------BeginAssignOp--------[49, 16]-----
; --------StartBinaryOp--------[49, 33]-----
	LOAD 1(LB), R3	; loading tableIteratorX into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[49, 33]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[49, 16]-----
	BRA while_begin6
while_end6:
; --------BeginAssignOp--------[51, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[51, 12]-----
; --------BeginAssignOp--------[52, 12]-----
; --------StartBinaryOp--------[52, 29]-----
	LOAD 2(LB), R3	; loading tableIteratorY into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[52, 29]-----
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorY
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorYand storing it into R2
; --------EndAssignOp--------[52, 12]-----
	BRA while_begin5
while_end5:
fin.Math.setFloat2DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : set1DTableFloatValue with label =  code.Math.set1DTableFloatValue--------
code.Math.set1DTableFloatValue:
	TSTO #3
	BOV stack_overflow_error
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------BeginAssignOp--------[57, 8]-----
	LOAD -4(LB), R3	; loading value into memory
; --------StartStoreTableElements--------[57, 8]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table the value in R3
	LOAD -5(LB), R4	; loading index into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading table into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD R4, R0
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[57, 8]-----
; --------EndAssignOp--------[57, 8]-----
fin.Math.set1DTableFloatValue:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : set2DTableFloatValue with label =  code.Math.set2DTableFloatValue--------
code.Math.set2DTableFloatValue:
	TSTO #4
	BOV stack_overflow_error
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------BeginAssignOp--------[61, 8]-----
	LOAD -4(LB), R3	; loading value into memory
; --------StartStoreTableElements--------[61, 8]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table the value in R3
	LOAD -5(LB), R4	; loading indexX into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD -6(LB), R5	; loading indexY into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading table into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of table into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[61, 8]-----
; --------EndAssignOp--------[61, 8]-----
fin.Math.set2DTableFloatValue:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : printInt1DTable with label =  code.Math.printInt1DTable--------
code.Math.printInt1DTable:
	TSTO #4
	BOV stack_overflow_error
	ADDSP #1
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIterator and loading it into memory
	WSTR "--------------"
	WNL
	WSTR "Tableau1D = ["
while_begin7:
; --------StartBinaryOp--------[69, 15]-----
	LOAD 1(LB), R2	; loading tableIterator into memory
; --------BeginSelection--------[69, 31]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[69, 31]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[69, 15]-----
	CMP #1, R2
	BNE while_end7
; --------StartGetTableElements--------[70, 18]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table into memory at register R2
	LOAD 1(LB), R3	; loading tableIterator into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading table into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1, R3), R0
	LOAD R0, R2
; --------EndGetTableElements--------[70, 18]-----
	LOAD R2, R1
	WINT
	WSTR " ,"
; --------BeginAssignOp--------[71, 12]-----
; --------StartBinaryOp--------[71, 28]-----
	LOAD 1(LB), R3	; loading tableIterator into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[71, 28]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIterator
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorand storing it into R2
; --------EndAssignOp--------[71, 12]-----
	BRA while_begin7
while_end7:
	WSTR "]"
	WSTR "--------------"
	WNL
fin.Math.printInt1DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : printInt2DTable with label =  code.Math.printInt2DTable--------
code.Math.printInt2DTable:
	TSTO #5
	BOV stack_overflow_error
	ADDSP #2
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIteratorX and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable tableIteratorY and loading it into memory
	WSTR "--------------"
	WNL
	WSTR "Tableau2D = ["
while_begin8:
; --------StartBinaryOp--------[82, 15]-----
	LOAD 2(LB), R2	; loading tableIteratorY into memory
; --------BeginSelection--------[82, 32]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[82, 32]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[82, 15]-----
	CMP #1, R2
	BNE while_end8
while_begin9:
; --------StartBinaryOp--------[83, 19]-----
	LOAD 1(LB), R2	; loading tableIteratorX into memory
; --------BeginSelection--------[83, 36]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[83, 36]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[83, 19]-----
	CMP #1, R2
	BNE while_end9
; --------StartGetTableElements--------[84, 22]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table into memory at register R2
	LOAD 1(LB), R3	; loading tableIteratorX into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R4	; loading tableIteratorY into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading table into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of table into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	MUL R0, R3
	ADD R4, R3
	LOAD 2(R1, R3), R0
	LOAD R0, R2
; --------EndGetTableElements--------[84, 22]-----
	LOAD R2, R1
	WINT
	WSTR " ,"
; --------BeginAssignOp--------[85, 16]-----
; --------StartBinaryOp--------[85, 33]-----
	LOAD 1(LB), R3	; loading tableIteratorX into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[85, 33]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[85, 16]-----
	BRA while_begin9
while_end9:
	WSTR ""
	WNL
; --------BeginAssignOp--------[88, 12]-----
	LOAD #0, R3	; loading 0 into memory
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[88, 12]-----
; --------BeginAssignOp--------[89, 12]-----
; --------StartBinaryOp--------[89, 29]-----
	LOAD 2(LB), R3	; loading tableIteratorY into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[89, 29]-----
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorY
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorYand storing it into R2
; --------EndAssignOp--------[89, 12]-----
	BRA while_begin8
while_end8:
	WSTR "]"
	WSTR "--------------"
	WNL
fin.Math.printInt2DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : printFloat1DTable with label =  code.Math.printFloat1DTable--------
code.Math.printFloat1DTable:
	TSTO #4
	BOV stack_overflow_error
	ADDSP #1
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIterator and loading it into memory
	WSTR "--------------"
	WNL
	WSTR "Tableau1D = ["
while_begin10:
; --------StartBinaryOp--------[99, 15]-----
	LOAD 1(LB), R2	; loading tableIterator into memory
; --------BeginSelection--------[99, 31]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[99, 31]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[99, 15]-----
	CMP #1, R2
	BNE while_end10
; --------StartGetTableElements--------[100, 18]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table into memory at register R2
	LOAD 1(LB), R3	; loading tableIterator into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading table into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1, R3), R0
	LOAD R0, R2
; --------EndGetTableElements--------[100, 18]-----
	LOAD R2, R1
	WFLOAT
	WSTR " ,"
; --------BeginAssignOp--------[101, 12]-----
; --------StartBinaryOp--------[101, 28]-----
	LOAD 1(LB), R3	; loading tableIterator into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[101, 28]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIterator
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorand storing it into R2
; --------EndAssignOp--------[101, 12]-----
	BRA while_begin10
while_end10:
	WSTR "]"
	WSTR "--------------"
	WNL
fin.Math.printFloat1DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : printFloat2DTable with label =  code.Math.printFloat2DTable--------
code.Math.printFloat2DTable:
	TSTO #5
	BOV stack_overflow_error
	ADDSP #2
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIteratorX and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable tableIteratorY and loading it into memory
	WSTR "--------------"
	WNL
	WSTR "Tableau2D = ["
while_begin11:
; --------StartBinaryOp--------[112, 15]-----
	LOAD 2(LB), R2	; loading tableIteratorY into memory
; --------BeginSelection--------[112, 32]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[112, 32]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[112, 15]-----
	CMP #1, R2
	BNE while_end11
while_begin12:
; --------StartBinaryOp--------[113, 19]-----
	LOAD 1(LB), R2	; loading tableIteratorX into memory
; --------StartBinaryOp--------[113, 36]-----
; --------BeginSelection--------[113, 36]-----
	LOAD -3(LB), R3	; loading table into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[113, 36]-----
	LOAD #1, R4	; loading 1 into memory
	SUB R4, R3
; --------EndBinaryOp--------[113, 36]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[113, 19]-----
	CMP #1, R2
	BNE while_end12
; --------StartGetTableElements--------[114, 22]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table into memory at register R2
	LOAD 1(LB), R3	; loading tableIteratorX into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R4	; loading tableIteratorY into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading table into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of table into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	MUL R0, R3
	ADD R4, R3
	LOAD 2(R1, R3), R0
	LOAD R0, R2
; --------EndGetTableElements--------[114, 22]-----
	LOAD R2, R1
	WFLOAT
	WSTR " ,"
; --------BeginAssignOp--------[115, 16]-----
; --------StartBinaryOp--------[115, 33]-----
	LOAD 1(LB), R3	; loading tableIteratorX into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[115, 33]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[115, 16]-----
	BRA while_begin12
while_end12:
; --------StartGetTableElements--------[117, 20]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table into memory at register R2
	LOAD 2(LB), R3	; loading tableIteratorY into memory
	CMP #0, R3
	BLT int_selection_table_must_be_positive
	LOAD 1(LB), R4	; loading tableIteratorX into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading table into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table into memory
	CMP R3, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of table into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	MUL R0, R3
	ADD R4, R3
	LOAD 2(R1, R3), R0
	LOAD R0, R2
; --------EndGetTableElements--------[117, 20]-----
	LOAD R2, R1
	WFLOAT
	WNL
; --------BeginAssignOp--------[118, 12]-----
; --------StartBinaryOp--------[118, 29]-----
	LOAD 2(LB), R3	; loading tableIteratorY into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[118, 29]-----
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorY
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorYand storing it into R2
; --------EndAssignOp--------[118, 12]-----
	BRA while_begin11
while_end11:
	WSTR "]"
	WSTR "--------------"
	WNL
fin.Math.printFloat2DTable:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	RTS
; ---------------------------------------------------
; ----------------- class : Sum -------------------
; ---------------------------------------------------
; ------------Init method for class = Sum--------
init.Sum:
	TSTO #3
	BOV stack_overflow_error
	LOAD -2(LB), R0	; Placing the current class = Sum adresse in the the stack before calling parent 
	PUSH R0	; Placing this = Sum into the stack
	BSR init.Math	; Calling the initialisation method of parent classMath
	SUBSP #1
	RTS
; ------------Code for method : sommeIntInt1D with label =  code.Sum.sommeIntInt1D--------
code.Sum.sommeIntInt1D:
	TSTO #6
	BOV stack_overflow_error
	ADDSP #1
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIterator and loading it into memory
; --------StartBinaryOp--------[128, 12]-----
; --------BeginSelection--------[128, 12]-----
	LOAD -3(LB), R2	; loading table1 into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[128, 12]-----
; --------BeginSelection--------[128, 29]-----
	LOAD -4(LB), R3	; loading table2 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[128, 29]-----
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[128, 12]-----
; ---------Startif-----------[128, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else1
while_begin13:
; --------StartBinaryOp--------[129, 19]-----
	LOAD 1(LB), R2	; loading tableIterator into memory
; --------BeginSelection--------[129, 35]-----
	LOAD -3(LB), R3	; loading table1 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[129, 35]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[129, 19]-----
	CMP #1, R2
	BNE while_end13
; --------BeginAssignOp--------[130, 16]-----
; --------StartBinaryOp--------[130, 40]-----
; --------StartGetTableElements--------[130, 40]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table1 into memory at register R3
	LOAD 1(LB), R4	; loading tableIterator into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading table1 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[130, 40]-----
; --------StartGetTableElements--------[130, 64]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table2 into memory at register R4
	LOAD 1(LB), R5	; loading tableIterator into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD -4(LB), R1	; loading table2 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table2 into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1, R5), R0
	LOAD R0, R4
; --------EndGetTableElements--------[130, 64]-----
	ADD R4, R3
; --------EndBinaryOp--------[130, 40]-----
; --------StartStoreTableElements--------[130, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table1 the value in R3
	LOAD 1(LB), R4	; loading tableIterator into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading table1 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD R4, R0
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[130, 16]-----
; --------EndAssignOp--------[130, 16]-----
; --------BeginAssignOp--------[131, 16]-----
; --------StartBinaryOp--------[131, 32]-----
	LOAD 1(LB), R3	; loading tableIterator into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[131, 32]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIterator
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorand storing it into R2
; --------EndAssignOp--------[131, 16]-----
	BRA while_begin13
while_end13:
	BRA end_ifthenelse_1
else1:
; --------BeginMethodCall--------[135, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 22(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[135, 12]-----
end_ifthenelse_1:
; ---------Endif-----------
fin.Sum.sommeIntInt1D:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : sommeIntInt2D with label =  code.Sum.sommeIntInt2D--------
code.Sum.sommeIntInt2D:
	TSTO #8
	BOV stack_overflow_error
	ADDSP #2
	PUSH R6	; Pushing and poping registers used in the method
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIteratorY and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable tableIteratorX and loading it into memory
; --------StartAND--------[142, 12]-----
; --------StartBinaryOp--------[142, 13]-----
; --------BeginSelection--------[142, 13]-----
	LOAD -3(LB), R2	; loading table1 into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[142, 13]-----
; --------BeginSelection--------[142, 30]-----
	LOAD -4(LB), R3	; loading table2 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[142, 30]-----
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[142, 13]-----
	CMP #0, R2	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_1	; [AND] checking if the first element is false
; --------StartBinaryOp--------[142, 49]-----
; --------BeginSelection--------[142, 49]-----
	LOAD -3(LB), R3	; loading table1 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[142, 49]-----
; --------BeginSelection--------[142, 66]-----
	LOAD -4(LB), R4	; loading table2 into memory
	CMP #null, R4
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R4), R4	; Loading the field size2D into a register 
; --------BeginSelection--------[142, 66]-----
	CMP R4, R3	; Comparing registers for Equals operation 
	SEQ R3	; Placing Equals result into the register  
; --------EndBinaryOp--------[142, 49]-----
	CMP #0, R3	; [AND]Comparing in the right branch 
	BNE AND_Success_id1	; [AND] checking if the first element is true
End_And_False_Id_1:
	LOAD #0, R2	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id1	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id1:
QUIT_AND_Called_When_Fail_id1:
; --------EndAND--------[142, 12]-----
; ---------Startif-----------[142, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else2
while_begin14:
; --------StartBinaryOp--------[143, 19]-----
	LOAD 1(LB), R2	; loading tableIteratorY into memory
; --------BeginSelection--------[143, 36]-----
	LOAD -3(LB), R3	; loading table1 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[143, 36]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[143, 19]-----
	CMP #1, R2
	BNE while_end14
while_begin15:
; --------StartBinaryOp--------[144, 23]-----
	LOAD 2(LB), R2	; loading tableIteratorX into memory
; --------BeginSelection--------[144, 40]-----
	LOAD -3(LB), R3	; loading table1 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[144, 40]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[144, 23]-----
	CMP #1, R2
	BNE while_end15
; --------BeginAssignOp--------[145, 20]-----
; --------StartBinaryOp--------[145, 61]-----
; --------StartGetTableElements--------[145, 61]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table1 into memory at register R3
	LOAD 1(LB), R4	; loading tableIteratorY into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R5	; loading tableIteratorX into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading table1 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of table1 into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4
	LOAD 2(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[145, 61]-----
; --------StartGetTableElements--------[145, 102]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table2 into memory at register R4
	LOAD 1(LB), R5	; loading tableIteratorY into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R6	; loading tableIteratorX into memory
	CMP #0, R6
	BLT int_selection_table_must_be_positive
	LOAD -4(LB), R1	; loading table2 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table2 into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of table2 into memory
	CMP R6, R0
	BLE table_dimension_are_not_respected
	MUL R0, R5
	ADD R6, R5
	LOAD 2(R1, R5), R0
	LOAD R0, R4
; --------EndGetTableElements--------[145, 102]-----
	ADD R4, R3
; --------EndBinaryOp--------[145, 61]-----
; --------StartStoreTableElements--------[145, 20]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table1 the value in R3
	LOAD 1(LB), R4	; loading tableIteratorY into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R5	; loading tableIteratorX into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading table1 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of table1 into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[145, 20]-----
; --------EndAssignOp--------[145, 20]-----
; --------BeginAssignOp--------[146, 20]-----
; --------StartBinaryOp--------[146, 37]-----
	LOAD 2(LB), R3	; loading tableIteratorX into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[146, 37]-----
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[146, 20]-----
	BRA while_begin15
while_end15:
; --------BeginAssignOp--------[148, 16]-----
; --------StartBinaryOp--------[148, 33]-----
	LOAD 1(LB), R3	; loading tableIteratorY into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[148, 33]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorY
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorYand storing it into R2
; --------EndAssignOp--------[148, 16]-----
	BRA while_begin14
while_end14:
	BRA end_ifthenelse_2
else2:
; --------BeginMethodCall--------[152, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 22(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[152, 12]-----
end_ifthenelse_2:
; ---------Endif-----------
fin.Sum.sommeIntInt2D:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	POP R6	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : sommeFloatInt1D with label =  code.Sum.sommeFloatInt1D--------
code.Sum.sommeFloatInt1D:
	TSTO #6
	BOV stack_overflow_error
	ADDSP #1
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIterator and loading it into memory
; --------StartBinaryOp--------[158, 12]-----
; --------BeginSelection--------[158, 12]-----
	LOAD -3(LB), R2	; loading table1 into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[158, 12]-----
; --------BeginSelection--------[158, 29]-----
	LOAD -4(LB), R3	; loading table2 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[158, 29]-----
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[158, 12]-----
; ---------Startif-----------[158, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else3
while_begin16:
; --------StartBinaryOp--------[159, 19]-----
	LOAD 1(LB), R2	; loading tableIterator into memory
; --------BeginSelection--------[159, 35]-----
	LOAD -3(LB), R3	; loading table1 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[159, 35]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[159, 19]-----
	CMP #1, R2
	BNE while_end16
; --------BeginAssignOp--------[160, 16]-----
; --------StartBinaryOp--------[160, 40]-----
; --------StartGetTableElements--------[160, 40]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table1 into memory at register R3
	LOAD 1(LB), R4	; loading tableIterator into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading table1 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[160, 40]-----
; --------StartGetTableElements--------[160, 72]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table2 into memory at register R4
	LOAD 1(LB), R5	; loading tableIterator into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD -4(LB), R1	; loading table2 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table2 into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1, R5), R0
	LOAD R0, R4
; --------EndGetTableElements--------[160, 72]-----
	FLOAT R4, R4
	ADD R4, R3
	BOV overflow_error	; Checking for overflow since the operation is between two floats 
; --------EndBinaryOp--------[160, 40]-----
; --------StartStoreTableElements--------[160, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table1 the value in R3
	LOAD 1(LB), R4	; loading tableIterator into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading table1 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD R4, R0
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[160, 16]-----
; --------EndAssignOp--------[160, 16]-----
; --------BeginAssignOp--------[161, 16]-----
; --------StartBinaryOp--------[161, 32]-----
	LOAD 1(LB), R3	; loading tableIterator into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[161, 32]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIterator
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorand storing it into R2
; --------EndAssignOp--------[161, 16]-----
	BRA while_begin16
while_end16:
	BRA end_ifthenelse_3
else3:
; --------BeginMethodCall--------[165, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 22(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[165, 12]-----
end_ifthenelse_3:
; ---------Endif-----------
fin.Sum.sommeFloatInt1D:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : sommeFloatInt2D with label =  code.Sum.sommeFloatInt2D--------
code.Sum.sommeFloatInt2D:
	TSTO #8
	BOV stack_overflow_error
	ADDSP #2
	PUSH R6	; Pushing and poping registers used in the method
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIteratorY and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable tableIteratorX and loading it into memory
; --------StartAND--------[172, 12]-----
; --------StartBinaryOp--------[172, 13]-----
; --------BeginSelection--------[172, 13]-----
	LOAD -3(LB), R2	; loading table1 into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[172, 13]-----
; --------BeginSelection--------[172, 30]-----
	LOAD -4(LB), R3	; loading table2 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[172, 30]-----
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[172, 13]-----
	CMP #0, R2	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_2	; [AND] checking if the first element is false
; --------StartBinaryOp--------[172, 49]-----
; --------BeginSelection--------[172, 49]-----
	LOAD -3(LB), R3	; loading table1 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[172, 49]-----
; --------BeginSelection--------[172, 66]-----
	LOAD -4(LB), R4	; loading table2 into memory
	CMP #null, R4
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R4), R4	; Loading the field size2D into a register 
; --------BeginSelection--------[172, 66]-----
	CMP R4, R3	; Comparing registers for Equals operation 
	SEQ R3	; Placing Equals result into the register  
; --------EndBinaryOp--------[172, 49]-----
	CMP #0, R3	; [AND]Comparing in the right branch 
	BNE AND_Success_id2	; [AND] checking if the first element is true
End_And_False_Id_2:
	LOAD #0, R2	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id2	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id2:
QUIT_AND_Called_When_Fail_id2:
; --------EndAND--------[172, 12]-----
; ---------Startif-----------[172, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else4
while_begin17:
; --------StartBinaryOp--------[173, 19]-----
	LOAD 1(LB), R2	; loading tableIteratorY into memory
; --------BeginSelection--------[173, 36]-----
	LOAD -3(LB), R3	; loading table1 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[173, 36]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[173, 19]-----
	CMP #1, R2
	BNE while_end17
while_begin18:
; --------StartBinaryOp--------[174, 23]-----
	LOAD 2(LB), R2	; loading tableIteratorX into memory
; --------BeginSelection--------[174, 40]-----
	LOAD -3(LB), R3	; loading table1 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[174, 40]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[174, 23]-----
	CMP #1, R2
	BNE while_end18
; --------BeginAssignOp--------[175, 20]-----
; --------StartBinaryOp--------[175, 61]-----
; --------StartGetTableElements--------[175, 61]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table1 into memory at register R3
	LOAD 1(LB), R4	; loading tableIteratorY into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R5	; loading tableIteratorX into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading table1 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of table1 into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4
	LOAD 2(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[175, 61]-----
; --------StartGetTableElements--------[175, 110]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table2 into memory at register R4
	LOAD 1(LB), R5	; loading tableIteratorY into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R6	; loading tableIteratorX into memory
	CMP #0, R6
	BLT int_selection_table_must_be_positive
	LOAD -4(LB), R1	; loading table2 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table2 into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of table2 into memory
	CMP R6, R0
	BLE table_dimension_are_not_respected
	MUL R0, R5
	ADD R6, R5
	LOAD 2(R1, R5), R0
	LOAD R0, R4
; --------EndGetTableElements--------[175, 110]-----
	FLOAT R4, R4
	ADD R4, R3
	BOV overflow_error	; Checking for overflow since the operation is between two floats 
; --------EndBinaryOp--------[175, 61]-----
; --------StartStoreTableElements--------[175, 20]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table1 the value in R3
	LOAD 1(LB), R4	; loading tableIteratorY into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R5	; loading tableIteratorX into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading table1 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of table1 into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[175, 20]-----
; --------EndAssignOp--------[175, 20]-----
; --------BeginAssignOp--------[176, 20]-----
; --------StartBinaryOp--------[176, 37]-----
	LOAD 2(LB), R3	; loading tableIteratorX into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[176, 37]-----
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[176, 20]-----
	BRA while_begin18
while_end18:
; --------BeginAssignOp--------[178, 16]-----
; --------StartBinaryOp--------[178, 33]-----
	LOAD 1(LB), R3	; loading tableIteratorY into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[178, 33]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorY
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorYand storing it into R2
; --------EndAssignOp--------[178, 16]-----
	BRA while_begin17
while_end17:
	BRA end_ifthenelse_4
else4:
; --------BeginMethodCall--------[182, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 22(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[182, 12]-----
end_ifthenelse_4:
; ---------Endif-----------
fin.Sum.sommeFloatInt2D:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	POP R6	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : sommeIntFloat1D with label =  code.Sum.sommeIntFloat1D--------
code.Sum.sommeIntFloat1D:
	TSTO #6
	BOV stack_overflow_error
	ADDSP #1
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIterator and loading it into memory
; --------StartBinaryOp--------[188, 12]-----
; --------BeginSelection--------[188, 12]-----
	LOAD -3(LB), R2	; loading table1 into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[188, 12]-----
; --------BeginSelection--------[188, 29]-----
	LOAD -4(LB), R3	; loading table2 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[188, 29]-----
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[188, 12]-----
; ---------Startif-----------[188, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else5
while_begin19:
; --------StartBinaryOp--------[189, 19]-----
	LOAD 1(LB), R2	; loading tableIterator into memory
; --------BeginSelection--------[189, 35]-----
	LOAD -3(LB), R3	; loading table1 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[189, 35]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[189, 19]-----
	CMP #1, R2
	BNE while_end19
; --------BeginAssignOp--------[190, 16]-----
; --------StartBinaryOp--------[190, 40]-----
; --------StartGetTableElements--------[190, 40]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table1 into memory at register R3
	LOAD 1(LB), R4	; loading tableIterator into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading table1 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[190, 40]-----
; --------StartGetTableElements--------[190, 70]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table2 into memory at register R4
	LOAD 1(LB), R5	; loading tableIterator into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD -4(LB), R1	; loading table2 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table2 into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1, R5), R0
	LOAD R0, R4
; --------EndGetTableElements--------[190, 70]-----
	INT R4, R4
	ADD R4, R3
; --------EndBinaryOp--------[190, 40]-----
; --------StartStoreTableElements--------[190, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table1 the value in R3
	LOAD 1(LB), R4	; loading tableIterator into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading table1 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD R4, R0
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[190, 16]-----
; --------EndAssignOp--------[190, 16]-----
; --------BeginAssignOp--------[191, 16]-----
; --------StartBinaryOp--------[191, 32]-----
	LOAD 1(LB), R3	; loading tableIterator into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[191, 32]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIterator
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorand storing it into R2
; --------EndAssignOp--------[191, 16]-----
	BRA while_begin19
while_end19:
	BRA end_ifthenelse_5
else5:
; --------BeginMethodCall--------[195, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 22(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[195, 12]-----
end_ifthenelse_5:
; ---------Endif-----------
fin.Sum.sommeIntFloat1D:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : sommeIntFloat2D with label =  code.Sum.sommeIntFloat2D--------
code.Sum.sommeIntFloat2D:
	TSTO #8
	BOV stack_overflow_error
	ADDSP #2
	PUSH R6	; Pushing and poping registers used in the method
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIteratorY and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable tableIteratorX and loading it into memory
; --------StartAND--------[202, 12]-----
; --------StartBinaryOp--------[202, 13]-----
; --------BeginSelection--------[202, 13]-----
	LOAD -3(LB), R2	; loading table1 into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[202, 13]-----
; --------BeginSelection--------[202, 30]-----
	LOAD -4(LB), R3	; loading table2 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[202, 30]-----
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[202, 13]-----
	CMP #0, R2	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_3	; [AND] checking if the first element is false
; --------StartBinaryOp--------[202, 49]-----
; --------BeginSelection--------[202, 49]-----
	LOAD -3(LB), R3	; loading table1 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[202, 49]-----
; --------BeginSelection--------[202, 66]-----
	LOAD -4(LB), R4	; loading table2 into memory
	CMP #null, R4
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R4), R4	; Loading the field size2D into a register 
; --------BeginSelection--------[202, 66]-----
	CMP R4, R3	; Comparing registers for Equals operation 
	SEQ R3	; Placing Equals result into the register  
; --------EndBinaryOp--------[202, 49]-----
	CMP #0, R3	; [AND]Comparing in the right branch 
	BNE AND_Success_id3	; [AND] checking if the first element is true
End_And_False_Id_3:
	LOAD #0, R2	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id3	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id3:
QUIT_AND_Called_When_Fail_id3:
; --------EndAND--------[202, 12]-----
; ---------Startif-----------[202, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else6
while_begin20:
; --------StartBinaryOp--------[203, 19]-----
	LOAD 1(LB), R2	; loading tableIteratorY into memory
; --------BeginSelection--------[203, 36]-----
	LOAD -3(LB), R3	; loading table1 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[203, 36]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[203, 19]-----
	CMP #1, R2
	BNE while_end20
while_begin21:
; --------StartBinaryOp--------[204, 23]-----
	LOAD 2(LB), R2	; loading tableIteratorX into memory
; --------BeginSelection--------[204, 40]-----
	LOAD -3(LB), R3	; loading table1 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[204, 40]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[204, 23]-----
	CMP #1, R2
	BNE while_end21
; --------BeginAssignOp--------[205, 20]-----
; --------StartBinaryOp--------[205, 61]-----
; --------StartGetTableElements--------[205, 61]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table1 into memory at register R3
	LOAD 1(LB), R4	; loading tableIteratorY into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R5	; loading tableIteratorX into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading table1 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of table1 into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4
	LOAD 2(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[205, 61]-----
; --------StartGetTableElements--------[205, 108]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table2 into memory at register R4
	LOAD 1(LB), R5	; loading tableIteratorY into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R6	; loading tableIteratorX into memory
	CMP #0, R6
	BLT int_selection_table_must_be_positive
	LOAD -4(LB), R1	; loading table2 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table2 into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of table2 into memory
	CMP R6, R0
	BLE table_dimension_are_not_respected
	MUL R0, R5
	ADD R6, R5
	LOAD 2(R1, R5), R0
	LOAD R0, R4
; --------EndGetTableElements--------[205, 108]-----
	INT R4, R4
	ADD R4, R3
; --------EndBinaryOp--------[205, 61]-----
; --------StartStoreTableElements--------[205, 20]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table1 the value in R3
	LOAD 1(LB), R4	; loading tableIteratorY into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R5	; loading tableIteratorX into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading table1 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of table1 into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[205, 20]-----
; --------EndAssignOp--------[205, 20]-----
; --------BeginAssignOp--------[206, 20]-----
; --------StartBinaryOp--------[206, 37]-----
	LOAD 2(LB), R3	; loading tableIteratorX into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[206, 37]-----
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[206, 20]-----
	BRA while_begin21
while_end21:
; --------BeginAssignOp--------[208, 16]-----
; --------StartBinaryOp--------[208, 33]-----
	LOAD 1(LB), R3	; loading tableIteratorY into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[208, 33]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorY
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorYand storing it into R2
; --------EndAssignOp--------[208, 16]-----
	BRA while_begin20
while_end20:
	BRA end_ifthenelse_6
else6:
; --------BeginMethodCall--------[212, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 22(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[212, 12]-----
end_ifthenelse_6:
; ---------Endif-----------
fin.Sum.sommeIntFloat2D:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	POP R6	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : sommeFloatFloat1D with label =  code.Sum.sommeFloatFloat1D--------
code.Sum.sommeFloatFloat1D:
	TSTO #6
	BOV stack_overflow_error
	ADDSP #1
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIterator and loading it into memory
; --------StartBinaryOp--------[218, 12]-----
; --------BeginSelection--------[218, 12]-----
	LOAD -3(LB), R2	; loading table1 into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[218, 12]-----
; --------BeginSelection--------[218, 29]-----
	LOAD -4(LB), R3	; loading table2 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[218, 29]-----
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[218, 12]-----
; ---------Startif-----------[218, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else7
while_begin22:
; --------StartBinaryOp--------[219, 19]-----
	LOAD 1(LB), R2	; loading tableIterator into memory
; --------BeginSelection--------[219, 35]-----
	LOAD -3(LB), R3	; loading table1 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[219, 35]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[219, 19]-----
	CMP #1, R2
	BNE while_end22
; --------BeginAssignOp--------[220, 16]-----
; --------StartBinaryOp--------[220, 40]-----
; --------StartGetTableElements--------[220, 40]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table1 into memory at register R3
	LOAD 1(LB), R4	; loading tableIterator into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading table1 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[220, 40]-----
; --------StartGetTableElements--------[220, 64]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table2 into memory at register R4
	LOAD 1(LB), R5	; loading tableIterator into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD -4(LB), R1	; loading table2 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table2 into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1, R5), R0
	LOAD R0, R4
; --------EndGetTableElements--------[220, 64]-----
	ADD R4, R3
	BOV overflow_error	; Checking for overflow since the operation is between two floats 
; --------EndBinaryOp--------[220, 40]-----
; --------StartStoreTableElements--------[220, 16]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table1 the value in R3
	LOAD 1(LB), R4	; loading tableIterator into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading table1 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD R4, R0
	STORE R3, 1(R1, R0)
; --------EndStoreTableElements--------[220, 16]-----
; --------EndAssignOp--------[220, 16]-----
; --------BeginAssignOp--------[221, 16]-----
; --------StartBinaryOp--------[221, 32]-----
	LOAD 1(LB), R3	; loading tableIterator into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[221, 32]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIterator
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorand storing it into R2
; --------EndAssignOp--------[221, 16]-----
	BRA while_begin22
while_end22:
	BRA end_ifthenelse_7
else7:
; --------BeginMethodCall--------[225, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 22(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[225, 12]-----
end_ifthenelse_7:
; ---------Endif-----------
fin.Sum.sommeFloatFloat1D:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : sommeFloatFloat2D with label =  code.Sum.sommeFloatFloat2D--------
code.Sum.sommeFloatFloat2D:
	TSTO #8
	BOV stack_overflow_error
	ADDSP #2
	PUSH R6	; Pushing and poping registers used in the method
	PUSH R5	; Pushing and poping registers used in the method
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 1(LB)	; Initializing the variable tableIteratorY and loading it into memory
	LOAD #0, R2	; loading 0 into memory
	STORE R2, 2(LB)	; Initializing the variable tableIteratorX and loading it into memory
; --------StartAND--------[232, 12]-----
; --------StartBinaryOp--------[232, 13]-----
; --------BeginSelection--------[232, 13]-----
	LOAD -3(LB), R2	; loading table1 into memory
	CMP #null, R2
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R2), R2	; Loading the field size1D into a register 
; --------BeginSelection--------[232, 13]-----
; --------BeginSelection--------[232, 30]-----
	LOAD -4(LB), R3	; loading table2 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[232, 30]-----
	CMP R3, R2	; Comparing registers for Equals operation 
	SEQ R2	; Placing Equals result into the register  
; --------EndBinaryOp--------[232, 13]-----
	CMP #0, R2	; [AND]Comparing in the left branch 
	BEQ End_And_False_Id_4	; [AND] checking if the first element is false
; --------StartBinaryOp--------[232, 49]-----
; --------BeginSelection--------[232, 49]-----
	LOAD -3(LB), R3	; loading table1 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[232, 49]-----
; --------BeginSelection--------[232, 66]-----
	LOAD -4(LB), R4	; loading table2 into memory
	CMP #null, R4
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R4), R4	; Loading the field size2D into a register 
; --------BeginSelection--------[232, 66]-----
	CMP R4, R3	; Comparing registers for Equals operation 
	SEQ R3	; Placing Equals result into the register  
; --------EndBinaryOp--------[232, 49]-----
	CMP #0, R3	; [AND]Comparing in the right branch 
	BNE AND_Success_id4	; [AND] checking if the first element is true
End_And_False_Id_4:
	LOAD #0, R2	; And is false, We place the value 0 in the return Register
	BRA QUIT_AND_Called_When_Fail_id4	; [AND] Branch will be used in the case when the left operand is falsein order to avoir poping pushing operations relate to right operand
AND_Success_id4:
QUIT_AND_Called_When_Fail_id4:
; --------EndAND--------[232, 12]-----
; ---------Startif-----------[232, 8]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else8
while_begin23:
; --------StartBinaryOp--------[233, 19]-----
	LOAD 1(LB), R2	; loading tableIteratorY into memory
; --------BeginSelection--------[233, 36]-----
	LOAD -3(LB), R3	; loading table1 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R3), R3	; Loading the field size2D into a register 
; --------BeginSelection--------[233, 36]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[233, 19]-----
	CMP #1, R2
	BNE while_end23
while_begin24:
; --------StartBinaryOp--------[234, 23]-----
	LOAD 2(LB), R2	; loading tableIteratorX into memory
; --------BeginSelection--------[234, 40]-----
	LOAD -3(LB), R3	; loading table1 into memory
	CMP #null, R3
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R3), R3	; Loading the field size1D into a register 
; --------BeginSelection--------[234, 40]-----
	CMP R3, R2	; Comparing registers for Lower operation 
	SLT R2	; Placing Lower result into the register  
; --------EndBinaryOp--------[234, 23]-----
	CMP #1, R2
	BNE while_end24
; --------BeginAssignOp--------[235, 20]-----
; --------StartBinaryOp--------[235, 61]-----
; --------StartGetTableElements--------[235, 61]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table1 into memory at register R3
	LOAD 1(LB), R4	; loading tableIteratorY into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R5	; loading tableIteratorX into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; loading table1 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of table1 into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4
	LOAD 2(R1, R4), R0
	LOAD R0, R3
; --------EndGetTableElements--------[235, 61]-----
; --------StartGetTableElements--------[235, 102]-----
; [TableGetElement][loadItemintoRegister] loading TableGetElement  =  table2 into memory at register R4
	LOAD 1(LB), R5	; loading tableIteratorY into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R6	; loading tableIteratorX into memory
	CMP #0, R6
	BLT int_selection_table_must_be_positive
	LOAD -4(LB), R1	; loading table2 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table2 into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of table2 into memory
	CMP R6, R0
	BLE table_dimension_are_not_respected
	MUL R0, R5
	ADD R6, R5
	LOAD 2(R1, R5), R0
	LOAD R0, R4
; --------EndGetTableElements--------[235, 102]-----
	ADD R4, R3
	BOV overflow_error	; Checking for overflow since the operation is between two floats 
; --------EndBinaryOp--------[235, 61]-----
; --------StartStoreTableElements--------[235, 20]-----
; [TableGetElement][loadItemintoRegister] storing into TableGetElement  =  table1 the value in R3
	LOAD 1(LB), R4	; loading tableIteratorY into memory
	CMP #0, R4
	BLT int_selection_table_must_be_positive
	LOAD 2(LB), R5	; loading tableIteratorX into memory
	CMP #0, R5
	BLT int_selection_table_must_be_positive
	LOAD -3(LB), R1	; [saving] loading table1 into memory
	CMP #null, R1
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 0(R1), R0	; loading size 1d of table1 into memory
	CMP R4, R0
	BLE table_dimension_are_not_respected
	LOAD 1(R1), R0	; loading size 2d of table1 into memory
	CMP R5, R0
	BLE table_dimension_are_not_respected
	MUL R0, R4
	ADD R5, R4
	LOAD R4, R0
	STORE R3, 2(R1, R0)	; Selecting the elemnt stored in 2(R1, R0)
; --------EndStoreTableElements--------[235, 20]-----
; --------EndAssignOp--------[235, 20]-----
; --------BeginAssignOp--------[236, 20]-----
; --------StartBinaryOp--------[236, 37]-----
	LOAD 2(LB), R3	; loading tableIteratorX into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[236, 37]-----
	STORE R3, 2(LB)	;  Assiging a value to tableIteratorX
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorXand storing it into R2
; --------EndAssignOp--------[236, 20]-----
	BRA while_begin24
while_end24:
; --------BeginAssignOp--------[238, 16]-----
; --------StartBinaryOp--------[238, 33]-----
	LOAD 1(LB), R3	; loading tableIteratorY into memory
	LOAD #1, R4	; loading 1 into memory
	ADD R4, R3
; --------EndBinaryOp--------[238, 33]-----
	STORE R3, 1(LB)	;  Assiging a value to tableIteratorY
	LOAD R3, R2	;  Return value of the assignement of =tableIteratorYand storing it into R2
; --------EndAssignOp--------[238, 16]-----
	BRA while_begin23
while_end23:
	BRA end_ifthenelse_8
else8:
; --------BeginMethodCall--------[242, 12]-----
	ADDSP #1
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2	; checking that class adresse is not null
	BEQ deref_null_error
	LOAD 0(R2), R2
	BSR 22(R2)
	LOAD R0, R2
	SUBSP #1
; --------EndMethodCall--------[242, 12]-----
end_ifthenelse_8:
; ---------Endif-----------
fin.Sum.sommeFloatFloat2D:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	POP R5	; Pushing and poping registers used in the method
	POP R6	; Pushing and poping registers used in the method
	RTS
; ------------Code for method : dimensionIncompatible with label =  code.Sum.dimensionIncompatible--------
code.Sum.dimensionIncompatible:
;  ---------ClassBodyCodeGeneration------
	WSTR "Erreur de dimension"
	WNL
fin.Sum.dimensionIncompatible:
	RTS
; -------------------------------------
;        Method equal
; -------------------------------------
; ------------------Start generateCodeForObjectEquals location:
code.Object.equals:
	LOAD -2(LB), R0
	CMP -3(LB), R0
	SEQ R0	; Comparaison this et paramètre d'equals
fin.Object.equals:
	RTS
init.Object:
	RTS
; -------------------------------------
;        Liste Erreur
; -------------------------------------
deref_null_error:
	WSTR "Error: deref_null_error"
	WNL
	ERROR
table_dimension_are_not_respected:
	WSTR "Error: table_dimension_are_not_respected"
	WNL
	ERROR
overflow_error:
	WSTR "Error: overflow_error"
	WNL
	ERROR
int_selection_table_must_be_positive:
	WSTR "Error: int_selection_table_must_be_positive"
	WNL
	ERROR
heap_overflow_error:
	WSTR "Error: heap_overflow_error"
	WNL
	ERROR
stack_overflow_error:
	WSTR "Error: stack_overflow_error"
	WNL
	ERROR
int_allocation_table_must_be_strictly_positive:
	WSTR "Error: int_allocation_table_must_be_strictly_positive"
	WNL
	ERROR
; end main program
