	TSTO #10
	BOV stack_overflow_error
	ADDSP #10
; start main program
; -------------------------------------
;        Method Table
; -------------------------------------
	LOAD #null, R0
	STORE R0, 2(GB)
	LOAD code.Object.equals, R0
	STORE R0, 3(GB)
	LEA 2(GB), R0
	STORE R0, 4(GB)
	LOAD code.Object.equals, R0
	STORE R0, 5(GB)
	LEA 2(GB), R0
	STORE R0, 6(GB)
	LOAD code.Object.equals, R0
	STORE R0, 7(GB)
	LEA 2(GB), R0
	STORE R0, 8(GB)
	LOAD code.Object.equals, R0
	STORE R0, 9(GB)
	LOAD code.C.test, R0
	STORE R0, 10(GB)
; -------------------------------------
;        Main program
; -------------------------------------
; Beginning of main instructions:
	HALT
; -------------------------------------
;        Classes
; -------------------------------------
; ---------------------------------------------------
; ----------------- class : B -------------------
; ---------------------------------------------------
; ------------Init method for class = B--------
init.B:
	LOAD #0, R0	; loading 0  into memory to initialize field to 0
	LOAD -2(LB), R1	; loading class (this) into memory when working with field x
	STORE R0, 1(R1)	; Saving field  x into memory
	RTS
; ---------------------------------------------------
; ----------------- class : A -------------------
; ---------------------------------------------------
; ------------Init method for class = A--------
init.A:
	LOAD #0, R0	; loading 0  into memory to initialize field to 0
	LOAD -2(LB), R1	; loading class (this) into memory when working with field b
	STORE R0, 1(R1)	; Saving field  b into memory
	RTS
; ---------------------------------------------------
; ----------------- class : C -------------------
; ---------------------------------------------------
; ------------Init method for class = C--------
init.C:
	RTS
; ------------Code for method : test with label =  code.C.test--------
code.C.test:
	TSTO #7
	BOV stack_overflow_error
	ADDSP #1
	PUSH R4	; Pushing and poping registers used in the method
	PUSH R3	; Pushing and poping registers used in the method
	PUSH R2	; Pushing and poping registers used in the method
;  ---------ClassBodyCodeGeneration------
; --------StartNew--------[9, 14]-----
; [New][loadItemintoRegister] loading new of calss =  A into memory at register R2
	NEW #2, R2
	BOV heap_overflow_error
	LEA 6(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.A
	POP R2
; --------EndNew--------[9, 14]-----
	STORE R2, 1(LB)	; Initializing the variable a and loading it into memory
; --------BeginAssignOp--------[10, 8]-----
	LOAD #5, R3	; loading 5 into memory
; --------BeginSelection--------[10, 8]-----
	LOAD 1(LB), R4	; loading a into memory
	CMP #null, R4
	BEQ deref_null_error	; Checking if the class identifier is null
	LOAD 1(R4), R4	; Loading the field b into a register 
; --------BeginSelection--------[10, 8]-----
	STORE R3, 1(R4)	; Saving field  x into memory
	LOAD R3, R2	;  Return value of the assignement of =xand storing it into R2
; --------EndAssignOp--------[10, 8]-----
fin.C.test:
	POP R2	; Pushing and poping registers used in the method
	POP R3	; Pushing and poping registers used in the method
	POP R4	; Pushing and poping registers used in the method
	RTS
; -------------------------------------
;        Method equal
; -------------------------------------
; ------------------Start generateCodeForObjectEquals location:
code.Object.equals:
	LOAD -2(LB), R0
	CMP -3(LB), R0
	SEQ R0	; Comparaison this et param√®tre d'equals
fin.Object.equals:
	RTS
; -------------------------------------
;        Liste Erreur
; -------------------------------------
deref_null_error:
	WSTR "Error: deref_null_error"
	WNL
	ERROR
heap_overflow_error:
	WSTR "Error: heap_overflow_error"
	WNL
	ERROR
stack_overflow_error:
	WSTR "Error: stack_overflow_error"
	WNL
	ERROR
; end main program
