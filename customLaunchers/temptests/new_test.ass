	TSTO #17
	BOV stack_overflow_error
	ADDSP #14
; start main program
; -------------------------------------
;        Method Table
; -------------------------------------
	LOAD #null, R0
	STORE R0, 5(GB)
	LOAD code.Object.equals, R0
	STORE R0, 6(GB)
	LEA 5(GB), R0
	STORE R0, 7(GB)
	LOAD code.Object.equals, R0
	STORE R0, 8(GB)
	LEA 5(GB), R0
	STORE R0, 9(GB)
	LOAD code.Object.equals, R0
	STORE R0, 10(GB)
	LEA 9(GB), R0
	STORE R0, 11(GB)
	LOAD code.Object.equals, R0
	STORE R0, 12(GB)
	LEA 11(GB), R0
	STORE R0, 13(GB)
	LOAD code.Object.equals, R0
	STORE R0, 14(GB)
; -------------------------------------
;        Main program
; -------------------------------------
; Beginning of main instructions:
; --------StartNew--------[39, 14]-----
; [New][loadItemintoRegister] loading new of calss =  A into memory at register R2
	NEW #1, R2
	BOV heap_overflow_error
	LEA 7(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.A
	POP R2
; --------EndNew--------[39, 14]-----
	STORE R2, 1(GB)	; Initializing the variable test1 and loading it into memory
; --------StartNew--------[40, 14]-----
; [New][loadItemintoRegister] loading new of calss =  B into memory at register R2
	NEW #1, R2
	BOV heap_overflow_error
	LEA 9(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.B
	POP R2
; --------EndNew--------[40, 14]-----
	STORE R2, 2(GB)	; Initializing the variable test2 and loading it into memory
; --------StartNew--------[41, 14]-----
; [New][loadItemintoRegister] loading new of calss =  C into memory at register R2
	NEW #1, R2
	BOV heap_overflow_error
	LEA 11(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.C
	POP R2
; --------EndNew--------[41, 14]-----
	STORE R2, 3(GB)	; Initializing the variable test3 and loading it into memory
; --------StartNew--------[42, 14]-----
; [New][loadItemintoRegister] loading new of calss =  D into memory at register R2
	NEW #1, R2
	BOV heap_overflow_error
	LEA 13(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.D
	POP R2
; --------EndNew--------[42, 14]-----
	STORE R2, 4(GB)	; Initializing the variable test4 and loading it into memory
; --------------BeginInstanceof----------[43, 8]+-----
	LEA 5(GB), R0	; loading method table of Object
	LEA 7(GB), R1	; loading method table of A
	CMP R1, R0
	BEQ instanceOf_Object1	; si les deux classes sont les mêmes , on retourne immédiatement true
	LOAD 1(GB), R2	; loading test1 into memory
loopbegin1:
	CMP R0, R2
	BEQ instanceOf_Object1	; loopend
	LOAD 0(R2), R2
	CMP #null, R2
	BEQ endfalse1
	BRA loopbegin1
instanceOf_Object1:
	LOAD #1, R0
	BRA endtrue1
endfalse1:
	LOAD #0, R0
endtrue1:
	LOAD R0, R2
; --------------EndInstanceof----------[43, 8]-----
; ---------Startif-----------[43, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else1
	WSTR "Object compraison works"
	WNL
	BRA end_ifthenelse_1
else1:
end_ifthenelse_1:
; ---------Endif-----------
; --------------BeginInstanceof----------[46, 8]+-----
	LEA 9(GB), R0	; loading method table of B
	LEA 7(GB), R1	; loading method table of A
	CMP R1, R0
	BEQ instanceOf_Object2	; si les deux classes sont les mêmes , on retourne immédiatement true
	LOAD 1(GB), R2	; loading test1 into memory
loopbegin2:
	CMP R0, R2
	BEQ instanceOf_Object2	; loopend
	LOAD 0(R2), R2
	CMP #null, R2
	BEQ endfalse2
	BRA loopbegin2
instanceOf_Object2:
	LOAD #1, R0
	BRA endtrue2
endfalse2:
	LOAD #0, R0
endtrue2:
	LOAD R0, R2
; --------------EndInstanceof----------[46, 8]-----
; ---------Startif-----------[46, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else2
	WSTR "cast does not instance of work"
	WNL
	BRA end_ifthenelse_2
else2:
end_ifthenelse_2:
; ---------Endif-----------
; --------------BeginInstanceof----------[49, 8]+-----
	LEA 9(GB), R0	; loading method table of B
	LEA 9(GB), R1	; loading method table of B
	CMP R1, R0
	BEQ instanceOf_Object3	; si les deux classes sont les mêmes , on retourne immédiatement true
	LOAD 2(GB), R2	; loading test2 into memory
loopbegin3:
	CMP R0, R2
	BEQ instanceOf_Object3	; loopend
	LOAD 0(R2), R2
	CMP #null, R2
	BEQ endfalse3
	BRA loopbegin3
instanceOf_Object3:
	LOAD #1, R0
	BRA endtrue3
endfalse3:
	LOAD #0, R0
endtrue3:
	LOAD R0, R2
; --------------EndInstanceof----------[49, 8]-----
; ---------Startif-----------[49, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else3
	WSTR "cast works"
	WNL
	BRA end_ifthenelse_3
else3:
end_ifthenelse_3:
; ---------Endif-----------
; --------------BeginInstanceof----------[52, 8]+-----
	LEA 9(GB), R0	; loading method table of B
	LEA 11(GB), R1	; loading method table of C
	CMP R1, R0
	BEQ instanceOf_Object4	; si les deux classes sont les mêmes , on retourne immédiatement true
	LOAD 3(GB), R2	; loading test3 into memory
loopbegin4:
	CMP R0, R2
	BEQ instanceOf_Object4	; loopend
	LOAD 0(R2), R2
	CMP #null, R2
	BEQ endfalse4
	BRA loopbegin4
instanceOf_Object4:
	LOAD #1, R0
	BRA endtrue4
endfalse4:
	LOAD #0, R0
endtrue4:
	LOAD R0, R2
; --------------EndInstanceof----------[52, 8]-----
; ---------Startif-----------[52, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else4
	WSTR "cast works"
	WNL
	BRA end_ifthenelse_4
else4:
end_ifthenelse_4:
; ---------Endif-----------
; --------------BeginInstanceof----------[55, 10]+-----
	LEA 7(GB), R0	; loading method table of A
	LEA 13(GB), R1	; loading method table of D
	CMP R1, R0
	BEQ instanceOf_Object5	; si les deux classes sont les mêmes , on retourne immédiatement true
	LOAD 4(GB), R2	; loading test4 into memory
loopbegin5:
	CMP R0, R2
	BEQ instanceOf_Object5	; loopend
	LOAD 0(R2), R2
	CMP #null, R2
	BEQ endfalse5
	BRA loopbegin5
instanceOf_Object5:
	LOAD #1, R0
	BRA endtrue5
endfalse5:
	LOAD #0, R0
endtrue5:
	LOAD R0, R2
; --------------EndInstanceof----------[55, 10]-----
	CMP #0, R2	; Applying not operand
	SEQ R2	; Applying not operand
; ---------Startif-----------[55, 4]
	CMP #1, R2	; Comparing expr output in the ifthenelse
	BNE else5
	WSTR "cast works"
	WNL
	BRA end_ifthenelse_5
else5:
end_ifthenelse_5:
; ---------Endif-----------
	HALT
; -------------------------------------
;        Classes
; -------------------------------------
; ---------------------------------------------------
; ----------------- class : A -------------------
; ---------------------------------------------------
; ------------Init method for class = A--------
init.A:
	RTS
; ---------------------------------------------------
; ----------------- class : B -------------------
; ---------------------------------------------------
; ------------Init method for class = B--------
init.B:
	RTS
; ---------------------------------------------------
; ----------------- class : C -------------------
; ---------------------------------------------------
; ------------Init method for class = C--------
init.C:
	TSTO #3
	BOV stack_overflow_error
	LOAD -2(LB), R0	; Placing the current class = C adresse in the the stack before calling parent 
	PUSH R0	; Placing this = C into the stack
	BSR init.B	; Calling the initialisation method of parent classB
	SUBSP #1
	RTS
; ---------------------------------------------------
; ----------------- class : D -------------------
; ---------------------------------------------------
; ------------Init method for class = D--------
init.D:
	TSTO #3
	BOV stack_overflow_error
	LOAD -2(LB), R0	; Placing the current class = D adresse in the the stack before calling parent 
	PUSH R0	; Placing this = D into the stack
	BSR init.C	; Calling the initialisation method of parent classC
	SUBSP #1
	RTS
; -------------------------------------
;        Method equal
; -------------------------------------
; ------------------Start generateCodeForObjectEquals location:
code.Object.equals:
	LOAD -2(LB), R0
	CMP R1, R0
	SEQ R0	; Comparaison this et paramètre d'equals
fin.Object.equals:
	RTS
init.Object:
	RTS
; -------------------------------------
;        Liste Erreur
; -------------------------------------
heap_overflow_error:
	WSTR "Error: heap_overflow_error"
	WNL
	ERROR
stack_overflow_error:
	WSTR "Error: stack_overflow_error"
	WNL
	ERROR
; end main program
